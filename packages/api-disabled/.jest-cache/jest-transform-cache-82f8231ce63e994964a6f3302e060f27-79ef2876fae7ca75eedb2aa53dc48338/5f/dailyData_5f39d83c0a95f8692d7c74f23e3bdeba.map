{"version":3,"names":["cov_1bq6n67btm","actualCoverage","lodash_1","s","require","typeorm_1","bluebird_1","__importDefault","luxon_1","common_1","sites_entity_1","daily_data_entity_1","math_1","sofar_1","temperature_1","constants_1","bleachingAlert_1","site_utils_1","getDegreeHeatingDays","latitude","longitude","endOfDate","maxMonthlyMean","f","seaSurfaceTemperatures","value","calculateDegreeHeatingDays","timestamp","toISOString","_a","degreeHeatingWeek","getSofarHindcastData","SofarModels","NOAACoralReefWatch","sofarVariableIDs","latestDegreeHeatingWeek","getLatestData","b","exports","getDailyData","site","polygon","nearestNOAALocation","NOAALongitude","NOAALatitude","coordinates","degreeHeatingDays","satelliteTemperatureData","Promise","all","analysedSeaSurfaceTemperature","latestSatelliteTemperature","satelliteTemperature","dailyAlertLevel","calculateAlertLevel","id","date","hasNoData","data","Object","values","omit","every","isUndefined","getWeeklyAlertLevel","dailyDataRepository","pastWeek","Date","setDate","getDate","query","createQueryBuilder","select","andWhere","getRawOne","isNumber","weeklyAlertLevel","undefined","getMaxAlert","getMax","filter","getSitesIdsWithoutDataForDate","dataSource","siteIds","getRepository","Site","where","length","getRawMany","map","getSitesDailyData","siteRepository","DailyData","allSites","find","assign","In","getAllColumns","start","Logger","log","toDateString","default","__awaiter","dailyDataInput","entity","create","save","err","get","filteredData","omitBy","isNil","update","site_id","set","execute","console","error","concurrency","valueOf","runDailyUpdate","today","DateTime","utc","endOf","yesterday","day","toJSDate"],"sources":["/home/user/climbox/packages/api/src/workers/dailyData.ts"],"sourcesContent":["/** Worker to process daily data for all sites. */\r\nimport { get, isNil, isNumber, isUndefined, omit, omitBy } from 'lodash';\r\nimport { DataSource, In, Repository } from 'typeorm';\r\nimport { Point } from 'geojson';\r\nimport Bluebird from 'bluebird';\r\nimport { DateTime } from 'luxon';\r\nimport { Logger } from '@nestjs/common';\r\nimport { Site } from '../sites/sites.entity';\r\nimport { DailyData } from '../sites/daily-data.entity';\r\nimport { getMax } from '../utils/math';\r\nimport { getLatestData, getSofarHindcastData } from '../utils/sofar';\r\nimport { calculateDegreeHeatingDays } from '../utils/temperature';\r\nimport { SofarDailyData, ValueWithTimestamp } from '../utils/sofar.types';\r\nimport { SofarModels, sofarVariableIDs } from '../utils/constants';\r\nimport { calculateAlertLevel } from '../utils/bleachingAlert';\r\nimport { getAllColumns } from '../utils/site.utils';\r\n\r\nexport async function getDegreeHeatingDays(\r\n  latitude: number,\r\n  longitude: number,\r\n  endOfDate: Date,\r\n  maxMonthlyMean: number | null,\r\n): Promise<ValueWithTimestamp | undefined> {\r\n  try {\r\n    // TODO - Get data for the past 84 days.\r\n    const seaSurfaceTemperatures = [] as number[];\r\n    return {\r\n      value: calculateDegreeHeatingDays(seaSurfaceTemperatures, maxMonthlyMean),\r\n      timestamp: endOfDate.toISOString(),\r\n    };\r\n  } catch {\r\n    const degreeHeatingWeek = await getSofarHindcastData(\r\n      SofarModels.NOAACoralReefWatch,\r\n      sofarVariableIDs[SofarModels.NOAACoralReefWatch].degreeHeatingWeek,\r\n      latitude,\r\n      longitude,\r\n      endOfDate,\r\n      96,\r\n    );\r\n\r\n    // Check if there are any data returned\r\n    // Grab the last one and convert it to degreeHeatingDays\r\n    const latestDegreeHeatingWeek = getLatestData(degreeHeatingWeek);\r\n    return (\r\n      latestDegreeHeatingWeek && {\r\n        value: latestDegreeHeatingWeek.value * 7,\r\n        timestamp: latestDegreeHeatingWeek.timestamp,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function getDailyData(\r\n  site: Site,\r\n  endOfDate: Date,\r\n): Promise<SofarDailyData> {\r\n  const { polygon, maxMonthlyMean, nearestNOAALocation } = site;\r\n  const [NOAALongitude, NOAALatitude] = nearestNOAALocation\r\n    ? (nearestNOAALocation as Point).coordinates\r\n    : (polygon as Point).coordinates;\r\n\r\n  const [degreeHeatingDays, satelliteTemperatureData] = await Promise.all([\r\n    // Calculate Degree Heating Days\r\n    // Calculating Degree Heating Days requires exactly 84 days of data.\r\n    getDegreeHeatingDays(\r\n      NOAALatitude,\r\n      NOAALongitude,\r\n      endOfDate,\r\n      maxMonthlyMean,\r\n    ),\r\n    getSofarHindcastData(\r\n      SofarModels.NOAACoralReefWatch,\r\n      sofarVariableIDs[SofarModels.NOAACoralReefWatch]\r\n        .analysedSeaSurfaceTemperature,\r\n      NOAALatitude,\r\n      NOAALongitude,\r\n      endOfDate,\r\n      96,\r\n    ),\r\n  ]);\r\n\r\n  // Get satelliteTemperature\r\n  const latestSatelliteTemperature =\r\n    satelliteTemperatureData && getLatestData(satelliteTemperatureData);\r\n  const satelliteTemperature =\r\n    latestSatelliteTemperature && latestSatelliteTemperature.value;\r\n\r\n  const dailyAlertLevel = calculateAlertLevel(\r\n    maxMonthlyMean,\r\n    satelliteTemperature,\r\n    degreeHeatingDays?.value,\r\n  );\r\n\r\n  return {\r\n    site: { id: site.id },\r\n    date: endOfDate,\r\n    dailyAlertLevel,\r\n    satelliteTemperature,\r\n    degreeHeatingDays: degreeHeatingDays?.value,\r\n  };\r\n}\r\n\r\nfunction hasNoData(data: SofarDailyData) {\r\n  return Object.values(omit(data, 'site', 'date')).every(isUndefined);\r\n}\r\n\r\nexport async function getWeeklyAlertLevel(\r\n  dailyDataRepository: Repository<DailyData>,\r\n  date: Date,\r\n  site: Site,\r\n): Promise<number | undefined> {\r\n  const pastWeek = new Date(date);\r\n  pastWeek.setDate(pastWeek.getDate() - 6);\r\n  const query = await dailyDataRepository\r\n    .createQueryBuilder('dailyData')\r\n    .select('MAX(dailyData.dailyAlertLevel)', 'weeklyAlertLevel')\r\n    .andWhere('dailyData.date >= :pastWeek', { pastWeek })\r\n    .andWhere('dailyData.date <= :date', { date })\r\n    .andWhere('dailyData.site = :site', { site: site.id })\r\n    .getRawOne();\r\n\r\n  return isNumber(query.weeklyAlertLevel) ? query.weeklyAlertLevel : undefined;\r\n}\r\n\r\nexport function getMaxAlert(\r\n  dailyAlertLevel?: number,\r\n  weeklyAlertLevel?: number,\r\n) {\r\n  return getMax([weeklyAlertLevel, dailyAlertLevel].filter(isNumber));\r\n}\r\n\r\nexport async function getSitesIdsWithoutDataForDate(\r\n  dataSource: DataSource,\r\n  date: Date,\r\n  siteIds?: number[],\r\n): Promise<number[]> {\r\n  const query = dataSource\r\n    .getRepository(Site)\r\n    .createQueryBuilder('s')\r\n    .select('s.id', 'id')\r\n    .where(\r\n      `NOT EXISTS (\r\n        SELECT 1\r\n        FROM daily_data dd\r\n        WHERE dd.site_id = s.id\r\n        AND dd.date = :date\r\n      )`,\r\n      { date },\r\n    );\r\n\r\n  if (siteIds?.length) {\r\n    query.andWhere('s.id IN (:...siteIds)', { siteIds });\r\n  }\r\n\r\n  return (await query.getRawMany<{ id: number }>()).map((site) => site.id);\r\n}\r\n\r\n/* eslint-disable no-console */\r\nexport async function getSitesDailyData(\r\n  dataSource: DataSource,\r\n  endOfDate: Date,\r\n  siteIds?: number[],\r\n) {\r\n  const siteRepository = dataSource.getRepository(Site);\r\n  const dailyDataRepository = dataSource.getRepository(DailyData);\r\n  const allSites = await siteRepository.find({\r\n    ...(siteIds && siteIds.length > 0\r\n      ? {\r\n          where: {\r\n            id: In(siteIds),\r\n          },\r\n        }\r\n      : {}),\r\n    select: getAllColumns(siteRepository),\r\n  });\r\n  const start = new Date();\r\n  Logger.log(\r\n    `Updating ${allSites.length} sites for ${endOfDate.toDateString()}.`,\r\n  );\r\n  await Bluebird.map(\r\n    allSites,\r\n    async (site) => {\r\n      const dailyDataInput = await getDailyData(site, endOfDate);\r\n\r\n      // If no data returned from the update function, skip\r\n      if (hasNoData(dailyDataInput)) {\r\n        Logger.log(`No data has been fetched. Skipping ${site.id}...`);\r\n        return;\r\n      }\r\n\r\n      // Calculate weekly alert level\r\n      const weeklyAlertLevel = await getWeeklyAlertLevel(\r\n        dailyDataRepository,\r\n        endOfDate,\r\n        site,\r\n      );\r\n\r\n      const entity = dailyDataRepository.create({\r\n        ...dailyDataInput,\r\n        weeklyAlertLevel: getMaxAlert(\r\n          dailyDataInput.dailyAlertLevel,\r\n          weeklyAlertLevel,\r\n        ),\r\n      });\r\n      try {\r\n        // Try to save daily data entity\r\n        await dailyDataRepository.save(entity);\r\n      } catch (err) {\r\n        // Update instead of insert\r\n        if (get(err, 'constraint') === 'no_duplicated_date') {\r\n          const filteredData = omitBy(entity, isNil);\r\n          await dailyDataRepository\r\n            .createQueryBuilder('dailyData')\r\n            .update()\r\n            .where('site_id = :site_id', { site_id: site.id })\r\n            .andWhere('Date(date) = Date(:date)', { date: entity.date })\r\n            .set(filteredData)\r\n            .execute();\r\n        } else {\r\n          console.error(\r\n            `Error updating data for Site ${\r\n              site.id\r\n            } & ${endOfDate.toDateString()}: ${err}.`,\r\n          );\r\n        }\r\n      }\r\n    },\r\n    { concurrency: 8 },\r\n  );\r\n  Logger.log(\r\n    `Updated ${allSites.length} sites in ${\r\n      (new Date().valueOf() - start.valueOf()) / 1000\r\n    } seconds`,\r\n  );\r\n}\r\n\r\nexport async function runDailyUpdate(dataSource: DataSource) {\r\n  const today = DateTime.utc().endOf('day');\r\n\r\n  const yesterday = today.set({ day: today.day - 1 });\r\n  console.log(`Daily Update for data ending on ${yesterday.day}`);\r\n  try {\r\n    await getSitesDailyData(dataSource, yesterday.toJSDate());\r\n    console.log('Completed daily update.');\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n"],"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"}