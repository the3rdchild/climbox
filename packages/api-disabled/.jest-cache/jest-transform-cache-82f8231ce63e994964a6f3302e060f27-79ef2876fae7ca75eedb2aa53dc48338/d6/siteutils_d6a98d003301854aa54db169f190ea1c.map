{"version":3,"names":["cov_2rijo4cilq","actualCoverage","google_maps_services_js_1","s","require","common_1","lodash_1","geo_tz_1","__importDefault","coordinates_1","source_type_enum_1","temperature_1","metrics_enum_1","googleMapsClient","Client","logger","Logger","getLocality","results","f","localityPreference","AddressType","administrative_area_level_2","administrative_area_level_1","locality","country","length","b","undefined","result","reduce","tempResult","localityResult","find","r","types","includes","formatted_address","getGoogleRegion","longitude","latitude","__awaiter","reverseGeocode","params","latlng","result_type","key","process","env","GOOGLE_MAPS_API_KEY","then","data","catch","e","error","response","error_message","exports","getRegion","regionRepository","region","findOne","where","name","save","polygon","createPoint","getTimezones","default","handleDuplicateSite","err","code","BadRequestException","InternalServerErrorException","getExclusionDates","exclusionDatesRepository","sensorId","createQueryBuilder","getMany","getConflictingExclusionDates","start","end","allDates","filter","exclusionDate","endDate","startDate","filterMetricDataByDate","exclusionDates","metricData","timestamp","some","dataDate","Date","excludeSpotterData","mapValues","getAllColumns","repository","metadata","columns","map","col","propertyName","getSite","siteId","siteRepository","relations","includeAll","site","Object","assign","id","select","NotFoundException","surveyPointBelongsToSite","pointId","surveyPointRepository","surveyPoint","_a","toString","getSiteAndSurveyPoint","surveyPointId","getSiteFromSensorId","hasHoboDataSubQuery","sourceRepository","hasHoboData","SourceType","HOBO","groupBy","getRawMany","hasHoboDataSet","Set","forEach","row","add","getWaterQualityDataSubQuery","latestDataRepository","latestData","addSelect","HUI","SONDE","sondeMetrics","Metric","ODO_CONCENTRATION","CHOLOROPHYLL_CONCENTRATION","PH","SALINITY","TURBIDITY","waterQualityDataSet","Map","entries","o","sondeMetricsCount","Number","set","siteData","source","get","push","metric","getReefCheckDataSubQuery","reefCheckSurveyRepository","organisms","leftJoin","addGroupBy","substrates","impact","merge","keyBy","getLatestData","findBy","createSite","depth","sitesRepository","historicalMonthlyMeanRepository","maxMonthlyMean","getMMM","historicalMonthlyMeans","getHistoricalMonthlyMeans","timezones","timezone","display","warn","Promise","all","month","temperature","insert"],"sources":["/home/user/climbox/packages/api/src/utils/site.utils.ts"],"sourcesContent":["import {\r\n  Client,\r\n  AddressType,\r\n  GeocodeResult,\r\n} from '@googlemaps/google-maps-services-js';\r\nimport {\r\n  BadRequestException,\r\n  InternalServerErrorException,\r\n  Logger,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { ObjectLiteral, Repository } from 'typeorm';\r\nimport { Dictionary, groupBy, keyBy, mapValues, merge, some } from 'lodash';\r\nimport geoTz from 'geo-tz';\r\nimport { ReefCheckSurvey } from 'reef-check-surveys/reef-check-surveys.entity';\r\nimport { Region } from '../regions/regions.entity';\r\nimport { ExclusionDates } from '../sites/exclusion-dates.entity';\r\nimport { ValueWithTimestamp, SpotterData } from './sofar.types';\r\nimport { createPoint } from './coordinates';\r\nimport { Site } from '../sites/sites.entity';\r\nimport { Sources } from '../sites/sources.entity';\r\nimport { SourceType } from '../sites/schemas/source-type.enum';\r\nimport { LatestData } from '../time-series/latest-data.entity';\r\nimport { SiteSurveyPoint } from '../site-survey-points/site-survey-points.entity';\r\nimport { getHistoricalMonthlyMeans, getMMM } from './temperature';\r\nimport { HistoricalMonthlyMean } from '../sites/historical-monthly-mean.entity';\r\nimport { Metric } from '../time-series/metrics.enum';\r\n\r\nconst googleMapsClient = new Client({});\r\nconst logger = new Logger('Site Utils');\r\n\r\nconst getLocality = (results: GeocodeResult[]) => {\r\n  const localityPreference = [\r\n    AddressType.administrative_area_level_2,\r\n    AddressType.administrative_area_level_1,\r\n    AddressType.locality,\r\n    AddressType.country,\r\n  ];\r\n\r\n  if (results.length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  const result = localityPreference.reduce(\r\n    (tempResult: GeocodeResult | undefined, locality) => {\r\n      const localityResult = results.find((r) => r.types.includes(locality));\r\n      return tempResult || localityResult;\r\n    },\r\n    undefined,\r\n  );\r\n  return result ? result.formatted_address : results[0].formatted_address;\r\n};\r\n\r\nexport const getGoogleRegion = async (\r\n  longitude: number,\r\n  latitude: number,\r\n): Promise<string | undefined> => {\r\n  return googleMapsClient\r\n    .reverseGeocode({\r\n      params: {\r\n        latlng: [latitude, longitude],\r\n        result_type: [AddressType.country],\r\n        key: process.env.GOOGLE_MAPS_API_KEY || '',\r\n      },\r\n    })\r\n    .then((r) => {\r\n      const { results } = r.data;\r\n      return getLocality(results);\r\n    })\r\n    .catch((e) => {\r\n      logger.error(\r\n        e.response\r\n          ? e.response.data.error_message\r\n          : 'An unknown error occurred.',\r\n        e,\r\n      );\r\n      return undefined;\r\n    });\r\n};\r\n\r\nexport const getRegion = async (\r\n  longitude: number,\r\n  latitude: number,\r\n  regionRepository: Repository<Region>,\r\n) => {\r\n  const country = await getGoogleRegion(longitude, latitude);\r\n  // undefined values would result in the first database item\r\n  // https://github.com/typeorm/typeorm/issues/2500\r\n  const region = country\r\n    ? await regionRepository.findOne({ where: { name: country } })\r\n    : null;\r\n\r\n  if (region) {\r\n    return region;\r\n  }\r\n\r\n  return country\r\n    ? regionRepository.save({\r\n        name: country,\r\n        polygon: createPoint(longitude, latitude),\r\n      })\r\n    : undefined;\r\n};\r\n\r\nexport const getTimezones = (latitude: number, longitude: number) => {\r\n  return geoTz(latitude, longitude);\r\n};\r\n\r\nexport const handleDuplicateSite = (err) => {\r\n  // Unique Violation: A site already exists at these coordinates\r\n  if (err.code === '23505') {\r\n    throw new BadRequestException('A site already exists at these coordinates');\r\n  }\r\n\r\n  logger.error('An unexpected error occurred', err);\r\n  throw new InternalServerErrorException('An unexpected error occurred');\r\n};\r\n\r\nexport const getExclusionDates = async (\r\n  exclusionDatesRepository: Repository<ExclusionDates>,\r\n  sensorId: string | null,\r\n) => {\r\n  if (!sensorId) {\r\n    return [];\r\n  }\r\n\r\n  return exclusionDatesRepository\r\n    .createQueryBuilder('exclusion')\r\n    .where('exclusion.sensor_id = :sensorId', {\r\n      sensorId,\r\n    })\r\n    .getMany();\r\n};\r\n\r\nexport const getConflictingExclusionDates = async (\r\n  exclusionDatesRepository: Repository<ExclusionDates>,\r\n  sensorId: string,\r\n  start: Date,\r\n  end: Date,\r\n) => {\r\n  const allDates = await getExclusionDates(exclusionDatesRepository, sensorId);\r\n\r\n  return allDates.filter(\r\n    (exclusionDate) =>\r\n      start <= exclusionDate.endDate &&\r\n      (!exclusionDate.startDate || exclusionDate.startDate <= end),\r\n  );\r\n};\r\n\r\nexport const filterMetricDataByDate = (\r\n  exclusionDates: ExclusionDates[],\r\n  metricData?: ValueWithTimestamp[],\r\n) =>\r\n  metricData?.filter(\r\n    ({ timestamp }) =>\r\n      // Filter data that do not belong at any `[startDate, endDate]` exclusion date interval\r\n      !some(exclusionDates, ({ startDate, endDate }) => {\r\n        const dataDate = new Date(timestamp);\r\n\r\n        return dataDate <= endDate && (!startDate || startDate <= dataDate);\r\n      }),\r\n  );\r\n\r\nexport const excludeSpotterData = (\r\n  data: SpotterData,\r\n  exclusionDates: ExclusionDates[],\r\n) => {\r\n  if (exclusionDates.length === 0) {\r\n    return data;\r\n  }\r\n\r\n  return mapValues(data, (metricData) =>\r\n    filterMetricDataByDate(exclusionDates, metricData),\r\n  );\r\n};\r\n\r\n/**\r\n * Returns all columns from a Entity, including \"select: false\"\r\n * @param repository The repository of the Entity\r\n */\r\nexport function getAllColumns<T extends ObjectLiteral>(\r\n  repository: Repository<T>,\r\n): (keyof T)[] {\r\n  return repository.metadata.columns.map(\r\n    (col) => col.propertyName,\r\n  ) as (keyof T)[];\r\n}\r\n\r\nexport const getSite = async (\r\n  siteId: number,\r\n  siteRepository: Repository<Site>,\r\n  relations?: string[],\r\n  includeAll: boolean = false,\r\n) => {\r\n  const site = await siteRepository.findOne({\r\n    where: { id: siteId },\r\n    relations,\r\n    ...(includeAll ? { select: getAllColumns(siteRepository) } : {}),\r\n  });\r\n\r\n  if (!site) {\r\n    throw new NotFoundException(`Site with id ${siteId} does not exist`);\r\n  }\r\n\r\n  return site;\r\n};\r\n\r\nexport const surveyPointBelongsToSite = async (\r\n  siteId: number,\r\n  pointId: number,\r\n  surveyPointRepository: Repository<SiteSurveyPoint>,\r\n) => {\r\n  const surveyPoint = await surveyPointRepository.findOne({\r\n    where: { id: pointId },\r\n  });\r\n\r\n  if (surveyPoint?.siteId?.toString() !== siteId.toString()) {\r\n    throw new BadRequestException(\r\n      `Survey point with id ${surveyPoint?.id} does not belong to site with id ${siteId}.`,\r\n    );\r\n  }\r\n};\r\n\r\nexport const getSiteAndSurveyPoint = async (\r\n  siteId: number,\r\n  surveyPointId: number,\r\n  siteRepository: Repository<Site>,\r\n  surveyPointRepository: Repository<SiteSurveyPoint>,\r\n) => {\r\n  const site = await getSite(siteId, siteRepository);\r\n  const surveyPoint = await surveyPointRepository.findOne({\r\n    where: { id: surveyPointId },\r\n  });\r\n\r\n  if (!surveyPoint) {\r\n    throw new NotFoundException(\r\n      `Survey point with id ${surveyPointId} does not exist`,\r\n    );\r\n  }\r\n\r\n  await surveyPointBelongsToSite(\r\n    site.id,\r\n    surveyPoint.id,\r\n    surveyPointRepository,\r\n  );\r\n\r\n  return { site, surveyPoint };\r\n};\r\n\r\nexport const getSiteFromSensorId = async (\r\n  sensorId: string,\r\n  siteRepository: Repository<Site>,\r\n) => {\r\n  const site = await siteRepository.findOne({ where: { sensorId } });\r\n\r\n  if (!site) {\r\n    throw new NotFoundException(`No site exists with sensor ID ${sensorId}`);\r\n  }\r\n\r\n  return site;\r\n};\r\n\r\nexport const hasHoboDataSubQuery = async (\r\n  sourceRepository: Repository<Sources>,\r\n): Promise<Set<number>> => {\r\n  const hasHoboData: {\r\n    siteId: number;\r\n  }[] = await sourceRepository\r\n    .createQueryBuilder('sources')\r\n    .select('site_id', 'siteId')\r\n    .where(`type = '${SourceType.HOBO}'`)\r\n    .groupBy('site_id')\r\n    .getRawMany();\r\n\r\n  const hasHoboDataSet = new Set<number>();\r\n  hasHoboData.forEach((row) => {\r\n    hasHoboDataSet.add(row.siteId);\r\n  });\r\n\r\n  return hasHoboDataSet;\r\n};\r\n\r\nexport const getWaterQualityDataSubQuery = async (\r\n  latestDataRepository: Repository<LatestData>,\r\n): Promise<Map<number, string[]>> => {\r\n  const latestData: LatestData[] = await latestDataRepository\r\n    .createQueryBuilder('water_quality_data')\r\n    .select('site_id', 'siteId')\r\n    .addSelect('metric')\r\n    .addSelect('source')\r\n    .where(`source in ('${SourceType.HUI}', '${SourceType.SONDE}')`)\r\n    .getRawMany();\r\n\r\n  const sondeMetrics = [\r\n    Metric.ODO_CONCENTRATION,\r\n    Metric.CHOLOROPHYLL_CONCENTRATION,\r\n    Metric.PH,\r\n    Metric.SALINITY,\r\n    Metric.TURBIDITY,\r\n  ];\r\n\r\n  const waterQualityDataSet = new Map<number, string[]>();\r\n\r\n  Object.entries(groupBy(latestData, (o) => o.siteId)).forEach(\r\n    ([siteId, data]) => {\r\n      let sondeMetricsCount = 0;\r\n      const id = Number(siteId);\r\n      waterQualityDataSet.set(id, []);\r\n      data.forEach((siteData) => {\r\n        if (siteData.source === 'hui') {\r\n          // eslint-disable-next-line fp/no-mutating-methods\r\n          waterQualityDataSet.get(id)!.push('hui');\r\n        }\r\n        if (sondeMetrics.includes(siteData.metric)) {\r\n          // eslint-disable-next-line fp/no-mutation\r\n          sondeMetricsCount += 1;\r\n          if (sondeMetricsCount >= 3) {\r\n            // eslint-disable-next-line fp/no-mutating-methods\r\n            waterQualityDataSet.get(id)!.push('sonde');\r\n          }\r\n        }\r\n      });\r\n    },\r\n  );\r\n\r\n  return waterQualityDataSet;\r\n};\r\n\r\n/**\r\n * Get all reef check related data like organisms and substrates spotted each site\r\n * This information is intented to be used to filter sites\r\n */\r\nexport const getReefCheckDataSubQuery = async (\r\n  reefCheckSurveyRepository: Repository<ReefCheckSurvey>,\r\n): Promise<\r\n  Dictionary<{ siteId: number; organism: string[]; substrate: string[] }>\r\n> => {\r\n  const organisms: { siteId: number; organism: string[] }[] =\r\n    await reefCheckSurveyRepository\r\n      .createQueryBuilder('survey')\r\n      .select('survey.site_id', 'siteId')\r\n      .addSelect('json_agg(distinct rco.organism)', 'organism')\r\n      .leftJoin('reef_check_organism', 'rco', 'rco.survey_id = survey.id')\r\n      .where('(rco.s1 + rco.s2 + rco.s3 + rco.s4) > 0')\r\n      .addGroupBy('survey.site_id')\r\n      .getRawMany();\r\n\r\n  const substrates: { siteId: number; substrate: string[] }[] =\r\n    await reefCheckSurveyRepository\r\n      .createQueryBuilder('survey')\r\n      .select('survey.site_id', 'siteId')\r\n      .addSelect('json_agg(distinct substrate_code)', 'substrate')\r\n      .leftJoin('reef_check_substrate', 'rcs', 'survey_id = survey.id')\r\n      .where('(rcs.s1 + rcs.s2 + rcs.s3 + rcs.s4) > 0')\r\n      .addGroupBy('survey.site_id')\r\n      .getRawMany();\r\n\r\n  const impact: { siteId: number; impact: string[] }[] =\r\n    await reefCheckSurveyRepository\r\n      .createQueryBuilder('survey')\r\n      .select('survey.site_id', 'siteId')\r\n      .addSelect('json_agg(distinct overall_anthro_impact)', 'impact')\r\n      .addGroupBy('survey.site_id')\r\n      .getRawMany();\r\n\r\n  return merge(\r\n    keyBy(organisms, 'siteId'),\r\n    keyBy(substrates, 'siteId'),\r\n    keyBy(impact, 'siteId'),\r\n  );\r\n};\r\n\r\nexport const getLatestData = async (\r\n  site: Site,\r\n  latestDataRepository: Repository<LatestData>,\r\n): Promise<LatestData[]> => {\r\n  return latestDataRepository.findBy({\r\n    site: { id: site.id },\r\n  });\r\n};\r\n\r\nexport const createSite = async (\r\n  name: string,\r\n  depth: number | undefined,\r\n  longitude: number,\r\n  latitude: number,\r\n  regionRepository: Repository<Region>,\r\n  sitesRepository: Repository<Site>,\r\n  historicalMonthlyMeanRepository: Repository<HistoricalMonthlyMean>,\r\n): Promise<Site> => {\r\n  const region = await getRegion(longitude, latitude, regionRepository);\r\n  const maxMonthlyMean = await getMMM(longitude, latitude);\r\n  const historicalMonthlyMeans = await getHistoricalMonthlyMeans(\r\n    longitude,\r\n    latitude,\r\n  );\r\n  const timezones = getTimezones(latitude, longitude) as string[];\r\n  const site = await sitesRepository\r\n    .save({\r\n      name,\r\n      region,\r\n      polygon: createPoint(longitude, latitude),\r\n      maxMonthlyMean,\r\n      timezone: timezones[0],\r\n      display: false,\r\n      depth,\r\n    })\r\n    .catch(handleDuplicateSite);\r\n\r\n  if (!maxMonthlyMean) {\r\n    logger.warn(\r\n      `Max Monthly Mean appears to be null for Site ${site.id} at (lat, lon): (${latitude}, ${longitude}) `,\r\n    );\r\n  }\r\n\r\n  await Promise.all(\r\n    historicalMonthlyMeans.map(async ({ month, temperature }) => {\r\n      return (\r\n        temperature &&\r\n        historicalMonthlyMeanRepository.insert({\r\n          site,\r\n          month,\r\n          temperature,\r\n        })\r\n      );\r\n    }),\r\n  );\r\n\r\n  return site;\r\n};\r\n"],"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"}