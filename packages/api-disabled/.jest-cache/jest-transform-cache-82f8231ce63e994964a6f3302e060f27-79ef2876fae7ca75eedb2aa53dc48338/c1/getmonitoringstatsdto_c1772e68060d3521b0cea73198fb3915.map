{"file":"/home/user/climbox/packages/api/src/monitoring/dto/get-monitoring-stats.dto.ts","mappings":";;;;;;;;;;;;AAAA,2CAAqD;AACrD,6CAA8C;AAC9C,yDAAoD;AACpD,qDAAyE;AACzE,qDAA0C;AAC1C,mFAAoE;AAEpE,MAAM,aAAa,GAAG,EAAE,CAAC;AAEzB,MAAa,qBAAqB;CAgDjC;AA/CC;IAAC,IAAA,qBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;IACnC,IAAA,4BAAU,GAAE;IACZ,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;QACvB,IAAI;YACF,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAElC,IAAI,QAAQ,CAAC,MAAM,GAAG,aAAa,EAAE;gBACnC,MAAM,IAAI,4BAAmB,CAC3B,2CAA2C,aAAa,GAAG,CAC5D,CAAC;aACH;YAED,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;SAC7C;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,4BAAmB,CAAC,yBAAyB,CAAC,CAAC;SAC1D;IACH,CAAC,CAAC;IACD,IAAA,0BAAQ,EAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAC5B,IAAA,0BAAQ,EAAC,uCAAY,EAAE,CAAC,mBAAI,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;sDAC5B;AAEnB;IAAC,IAAA,qBAAW,EAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;IACrC,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,MAAM,CAAC;IAClB,IAAA,4BAAU,GAAE;;wDACM;AAEnB;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;QACvB,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;;sDACgB;AAElB;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC;IAChB,IAAA,wBAAM,GAAE;8BACD,IAAI;oDAAC;AAEb;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,wBAAI,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC;IAChB,IAAA,wBAAM,GAAE;8BACH,IAAI;kDAAC;AAEX;IAAC,IAAA,4BAAU,GAAE;IACZ,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;QACvB,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;;kDACY;AA/ChB,sDAgDC","names":[],"sources":["/home/user/climbox/packages/api/src/monitoring/dto/get-monitoring-stats.dto.ts"],"sourcesContent":["import { BadRequestException } from '@nestjs/common';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Transform, Type } from 'class-transformer';\r\nimport { IsDate, IsNumber, IsOptional, Validate } from 'class-validator';\r\nimport { Site } from 'sites/sites.entity';\r\nimport { EntityExists } from 'validations/entity-exists.constraint';\r\n\r\nconst maxAllowedIds = 10;\r\n\r\nexport class GetMonitoringStatsDto {\r\n  @ApiProperty({ example: [1, 3, 5] })\r\n  @IsOptional()\r\n  @Transform(({ value }) => {\r\n    try {\r\n      const splitted = value.split(',');\r\n\r\n      if (splitted.length > maxAllowedIds) {\r\n        throw new BadRequestException(\r\n          `siteIds: Too many IDs. Maximum allowed: ${maxAllowedIds}.`,\r\n        );\r\n      }\r\n\r\n      return splitted.map((x) => parseInt(x, 10));\r\n    } catch (error) {\r\n      throw new BadRequestException('siteIds: invalid format');\r\n    }\r\n  })\r\n  @IsNumber({}, { each: true })\r\n  @Validate(EntityExists, [Site], { each: true })\r\n  siteIds?: number[];\r\n\r\n  @ApiProperty({ example: 'SPOT-2742' })\r\n  @Type(() => String)\r\n  @IsOptional()\r\n  spotterId?: string;\r\n\r\n  @IsOptional()\r\n  @Transform(({ value }) => {\r\n    return [true, 'true', 1, '1'].indexOf(value) > -1;\r\n  })\r\n  monthly?: boolean;\r\n\r\n  @IsOptional()\r\n  @Type(() => Date)\r\n  @IsDate()\r\n  start?: Date;\r\n\r\n  @IsOptional()\r\n  @Type(() => Date)\r\n  @IsDate()\r\n  end?: Date;\r\n\r\n  @IsOptional()\r\n  @Transform(({ value }) => {\r\n    return [true, 'true', 1, '1'].indexOf(value) > -1;\r\n  })\r\n  csv?: boolean;\r\n}\r\n"],"version":3}