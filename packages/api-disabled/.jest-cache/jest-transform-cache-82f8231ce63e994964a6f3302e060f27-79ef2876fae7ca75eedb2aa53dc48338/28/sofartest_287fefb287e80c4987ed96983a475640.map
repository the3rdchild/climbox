{"file":"/home/user/climbox/packages/api/src/utils/sofar.test.ts","mappings":"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","names":[],"sources":["/home/user/climbox/packages/api/src/utils/sofar.test.ts"],"sourcesContent":["import { SofarModels, sofarVariableIDs } from './constants';\r\nimport {\r\n  getSofarHindcastData,\r\n  getSpotterData,\r\n  sofarHindcast,\r\n  sofarWaveData,\r\n} from './sofar';\r\nimport { ValueWithTimestamp } from './sofar.types';\r\n\r\ntest('It processes Sofar API for daily data.', async () => {\r\n  jest.setTimeout(30000);\r\n  const values = await getSofarHindcastData(\r\n    'NOAACoralReefWatch',\r\n    'analysedSeaSurfaceTemperature',\r\n    -3.5976336810301888,\r\n    -178.0000002552476,\r\n    new Date('2024-08-31'),\r\n  );\r\n\r\n  expect(values).toEqual([\r\n    { timestamp: '2024-08-30T12:00:00.000Z', value: 29.509984820290786 },\r\n  ]);\r\n});\r\n\r\ntest('It processes Sofar Spotter API for daily data.', async () => {\r\n  jest.setTimeout(30000);\r\n  const values = await getSpotterData(\r\n    'SPOT-300434063450120',\r\n    process.env.SOFAR_API_TOKEN,\r\n    new Date('2020-09-02'),\r\n  );\r\n\r\n  expect(values.bottomTemperature.length).toEqual(144);\r\n  expect(values.topTemperature.length).toEqual(144);\r\n});\r\n\r\ntest('it process Sofar Hindcast API for wind-wave data', async () => {\r\n  jest.setTimeout(30000);\r\n  const now = new Date();\r\n  const yesterdayDate = new Date(now);\r\n  yesterdayDate.setDate(now.getDate() - 1);\r\n  const today = now.toISOString();\r\n  const yesterday = yesterdayDate.toISOString();\r\n\r\n  const response = await sofarHindcast(\r\n    SofarModels.Wave,\r\n    sofarVariableIDs[SofarModels.Wave].significantWaveHeight,\r\n    -3.5976336810301888,\r\n    -178.0000002552476,\r\n    yesterday,\r\n    today,\r\n  );\r\n\r\n  const values = response?.values[0] as ValueWithTimestamp;\r\n\r\n  expect(new Date(values?.timestamp).getTime()).toBeLessThanOrEqual(\r\n    now.getTime(),\r\n  );\r\n});\r\n\r\ntest('it process Sofar Wave Date API for surface temperature', async () => {\r\n  jest.setTimeout(30000);\r\n  const now = new Date();\r\n  const yesterdayDate = new Date(now);\r\n  yesterdayDate.setDate(now.getDate() - 1);\r\n  const today = now.toISOString();\r\n  const yesterday = yesterdayDate.toISOString();\r\n\r\n  const response = await sofarWaveData(\r\n    'SPOT-1519',\r\n    process.env.SOFAR_API_TOKEN,\r\n    yesterday,\r\n    today,\r\n  );\r\n\r\n  const values = response && response.data.waves.length;\r\n\r\n  expect(values).toBeGreaterThan(0);\r\n});\r\n"],"version":3}