d88d471db8f4f0d163cf7acbc987dae2
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const sofar_1 = require("./sofar");
test('It processes Sofar API for daily data.', () => __awaiter(void 0, void 0, void 0, function* () {
    jest.setTimeout(30000);
    const values = yield (0, sofar_1.getSofarHindcastData)('NOAACoralReefWatch', 'analysedSeaSurfaceTemperature', -3.5976336810301888, -178.0000002552476, new Date('2024-08-31'));
    expect(values).toEqual([
        { timestamp: '2024-08-30T12:00:00.000Z', value: 29.509984820290786 },
    ]);
}));
test('It processes Sofar Spotter API for daily data.', () => __awaiter(void 0, void 0, void 0, function* () {
    jest.setTimeout(30000);
    const values = yield (0, sofar_1.getSpotterData)('SPOT-300434063450120', process.env.SOFAR_API_TOKEN, new Date('2020-09-02'));
    expect(values.bottomTemperature.length).toEqual(144);
    expect(values.topTemperature.length).toEqual(144);
}));
test('it process Sofar Hindcast API for wind-wave data', () => __awaiter(void 0, void 0, void 0, function* () {
    jest.setTimeout(30000);
    const now = new Date();
    const yesterdayDate = new Date(now);
    yesterdayDate.setDate(now.getDate() - 1);
    const today = now.toISOString();
    const yesterday = yesterdayDate.toISOString();
    const response = yield (0, sofar_1.sofarHindcast)(constants_1.SofarModels.Wave, constants_1.sofarVariableIDs[constants_1.SofarModels.Wave].significantWaveHeight, -3.5976336810301888, -178.0000002552476, yesterday, today);
    const values = response === null || response === void 0 ? void 0 : response.values[0];
    expect(new Date(values === null || values === void 0 ? void 0 : values.timestamp).getTime()).toBeLessThanOrEqual(now.getTime());
}));
test('it process Sofar Wave Date API for surface temperature', () => __awaiter(void 0, void 0, void 0, function* () {
    jest.setTimeout(30000);
    const now = new Date();
    const yesterdayDate = new Date(now);
    yesterdayDate.setDate(now.getDate() - 1);
    const today = now.toISOString();
    const yesterday = yesterdayDate.toISOString();
    const response = yield (0, sofar_1.sofarWaveData)('SPOT-1519', process.env.SOFAR_API_TOKEN, yesterday, today);
    const values = response && response.data.waves.length;
    expect(values).toBeGreaterThan(0);
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdXNlci9jbGltYm94L3BhY2thZ2VzL2FwaS9zcmMvdXRpbHMvc29mYXIudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLDJDQUE0RDtBQUM1RCxtQ0FLaUI7QUFHakIsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLEdBQVMsRUFBRTtJQUN4RCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSw0QkFBb0IsRUFDdkMsb0JBQW9CLEVBQ3BCLCtCQUErQixFQUMvQixDQUFDLGtCQUFrQixFQUNuQixDQUFDLGlCQUFpQixFQUNsQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FDdkIsQ0FBQztJQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDckIsRUFBRSxTQUFTLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFO0tBQ3JFLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZ0RBQWdELEVBQUUsR0FBUyxFQUFFO0lBQ2hFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLHNCQUFjLEVBQ2pDLHNCQUFzQixFQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFDM0IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQ3ZCLENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrREFBa0QsRUFBRSxHQUFTLEVBQUU7SUFDbEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLHFCQUFhLEVBQ2xDLHVCQUFXLENBQUMsSUFBSSxFQUNoQiw0QkFBZ0IsQ0FBQyx1QkFBVyxDQUFDLElBQUksQ0FBQyxDQUFDLHFCQUFxQixFQUN4RCxDQUFDLGtCQUFrQixFQUNuQixDQUFDLGlCQUFpQixFQUNsQixTQUFTLEVBQ1QsS0FBSyxDQUNOLENBQUM7SUFFRixNQUFNLE1BQU0sR0FBRyxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsTUFBTSxDQUFDLENBQUMsQ0FBdUIsQ0FBQztJQUV6RCxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsbUJBQW1CLENBQy9ELEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FDZCxDQUFDO0FBQ0osQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx3REFBd0QsRUFBRSxHQUFTLEVBQUU7SUFDeEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sYUFBYSxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFOUMsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLHFCQUFhLEVBQ2xDLFdBQVcsRUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFDM0IsU0FBUyxFQUNULEtBQUssQ0FDTixDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQUcsUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUV0RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQSxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvdXNlci9jbGltYm94L3BhY2thZ2VzL2FwaS9zcmMvdXRpbHMvc29mYXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTb2Zhck1vZGVscywgc29mYXJWYXJpYWJsZUlEcyB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHtcclxuICBnZXRTb2ZhckhpbmRjYXN0RGF0YSxcclxuICBnZXRTcG90dGVyRGF0YSxcclxuICBzb2ZhckhpbmRjYXN0LFxyXG4gIHNvZmFyV2F2ZURhdGEsXHJcbn0gZnJvbSAnLi9zb2Zhcic7XHJcbmltcG9ydCB7IFZhbHVlV2l0aFRpbWVzdGFtcCB9IGZyb20gJy4vc29mYXIudHlwZXMnO1xyXG5cclxudGVzdCgnSXQgcHJvY2Vzc2VzIFNvZmFyIEFQSSBmb3IgZGFpbHkgZGF0YS4nLCBhc3luYyAoKSA9PiB7XHJcbiAgamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcclxuICBjb25zdCB2YWx1ZXMgPSBhd2FpdCBnZXRTb2ZhckhpbmRjYXN0RGF0YShcclxuICAgICdOT0FBQ29yYWxSZWVmV2F0Y2gnLFxyXG4gICAgJ2FuYWx5c2VkU2VhU3VyZmFjZVRlbXBlcmF0dXJlJyxcclxuICAgIC0zLjU5NzYzMzY4MTAzMDE4ODgsXHJcbiAgICAtMTc4LjAwMDAwMDI1NTI0NzYsXHJcbiAgICBuZXcgRGF0ZSgnMjAyNC0wOC0zMScpLFxyXG4gICk7XHJcblxyXG4gIGV4cGVjdCh2YWx1ZXMpLnRvRXF1YWwoW1xyXG4gICAgeyB0aW1lc3RhbXA6ICcyMDI0LTA4LTMwVDEyOjAwOjAwLjAwMFonLCB2YWx1ZTogMjkuNTA5OTg0ODIwMjkwNzg2IH0sXHJcbiAgXSk7XHJcbn0pO1xyXG5cclxudGVzdCgnSXQgcHJvY2Vzc2VzIFNvZmFyIFNwb3R0ZXIgQVBJIGZvciBkYWlseSBkYXRhLicsIGFzeW5jICgpID0+IHtcclxuICBqZXN0LnNldFRpbWVvdXQoMzAwMDApO1xyXG4gIGNvbnN0IHZhbHVlcyA9IGF3YWl0IGdldFNwb3R0ZXJEYXRhKFxyXG4gICAgJ1NQT1QtMzAwNDM0MDYzNDUwMTIwJyxcclxuICAgIHByb2Nlc3MuZW52LlNPRkFSX0FQSV9UT0tFTixcclxuICAgIG5ldyBEYXRlKCcyMDIwLTA5LTAyJyksXHJcbiAgKTtcclxuXHJcbiAgZXhwZWN0KHZhbHVlcy5ib3R0b21UZW1wZXJhdHVyZS5sZW5ndGgpLnRvRXF1YWwoMTQ0KTtcclxuICBleHBlY3QodmFsdWVzLnRvcFRlbXBlcmF0dXJlLmxlbmd0aCkudG9FcXVhbCgxNDQpO1xyXG59KTtcclxuXHJcbnRlc3QoJ2l0IHByb2Nlc3MgU29mYXIgSGluZGNhc3QgQVBJIGZvciB3aW5kLXdhdmUgZGF0YScsIGFzeW5jICgpID0+IHtcclxuICBqZXN0LnNldFRpbWVvdXQoMzAwMDApO1xyXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgY29uc3QgeWVzdGVyZGF5RGF0ZSA9IG5ldyBEYXRlKG5vdyk7XHJcbiAgeWVzdGVyZGF5RGF0ZS5zZXREYXRlKG5vdy5nZXREYXRlKCkgLSAxKTtcclxuICBjb25zdCB0b2RheSA9IG5vdy50b0lTT1N0cmluZygpO1xyXG4gIGNvbnN0IHllc3RlcmRheSA9IHllc3RlcmRheURhdGUudG9JU09TdHJpbmcoKTtcclxuXHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzb2ZhckhpbmRjYXN0KFxyXG4gICAgU29mYXJNb2RlbHMuV2F2ZSxcclxuICAgIHNvZmFyVmFyaWFibGVJRHNbU29mYXJNb2RlbHMuV2F2ZV0uc2lnbmlmaWNhbnRXYXZlSGVpZ2h0LFxyXG4gICAgLTMuNTk3NjMzNjgxMDMwMTg4OCxcclxuICAgIC0xNzguMDAwMDAwMjU1MjQ3NixcclxuICAgIHllc3RlcmRheSxcclxuICAgIHRvZGF5LFxyXG4gICk7XHJcblxyXG4gIGNvbnN0IHZhbHVlcyA9IHJlc3BvbnNlPy52YWx1ZXNbMF0gYXMgVmFsdWVXaXRoVGltZXN0YW1wO1xyXG5cclxuICBleHBlY3QobmV3IERhdGUodmFsdWVzPy50aW1lc3RhbXApLmdldFRpbWUoKSkudG9CZUxlc3NUaGFuT3JFcXVhbChcclxuICAgIG5vdy5nZXRUaW1lKCksXHJcbiAgKTtcclxufSk7XHJcblxyXG50ZXN0KCdpdCBwcm9jZXNzIFNvZmFyIFdhdmUgRGF0ZSBBUEkgZm9yIHN1cmZhY2UgdGVtcGVyYXR1cmUnLCBhc3luYyAoKSA9PiB7XHJcbiAgamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcclxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG4gIGNvbnN0IHllc3RlcmRheURhdGUgPSBuZXcgRGF0ZShub3cpO1xyXG4gIHllc3RlcmRheURhdGUuc2V0RGF0ZShub3cuZ2V0RGF0ZSgpIC0gMSk7XHJcbiAgY29uc3QgdG9kYXkgPSBub3cudG9JU09TdHJpbmcoKTtcclxuICBjb25zdCB5ZXN0ZXJkYXkgPSB5ZXN0ZXJkYXlEYXRlLnRvSVNPU3RyaW5nKCk7XHJcblxyXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc29mYXJXYXZlRGF0YShcclxuICAgICdTUE9ULTE1MTknLFxyXG4gICAgcHJvY2Vzcy5lbnYuU09GQVJfQVBJX1RPS0VOLFxyXG4gICAgeWVzdGVyZGF5LFxyXG4gICAgdG9kYXksXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgdmFsdWVzID0gcmVzcG9uc2UgJiYgcmVzcG9uc2UuZGF0YS53YXZlcy5sZW5ndGg7XHJcblxyXG4gIGV4cGVjdCh2YWx1ZXMpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==