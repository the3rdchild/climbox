{"version":3,"names":["cov_5b489hvvq","actualCoverage","lodash_1","s","require","luxon_extensions_1","retry_axios_1","__importDefault","dates_1","constants_1","sofar_types_1","slack_utils_1","getLatestData","sofarValues","f","b","undefined","reduce","max","entry","Date","timestamp","exports","filterSofarResponse","responseData","values","filter","data","isNil","value","sofarErrorHandler","error","sensorId","sendToSlack","response","spotterMessagePart","message","status","console","includes","messageTemplate","channel","process","env","SLACK_BOT_CHANNEL","text","mrkdwn","sendSlackMessage","SLACK_BOT_TOKEN","sofarHindcast","modelId","variableID","latitude","longitude","start","end","default","get","SOFAR_MARINE_URL","params","variableIDs","token","SOFAR_API_TOKEN","then","hindcastVariables","catch","sofarSensor","SOFAR_SENSOR_DATA_URL","spotterId","startDate","endDate","sofarWaveData","SOFAR_WAVE_DATA_URL","limit","includeSurfaceTempData","includeWindData","includeBarometerData","sofarLatest","SOFAR_LATEST_DATA_URL","getSofarHindcastData","hours","getStartEndDate","getSpotterData","sofarToken","time","DateTime","fromJSDate","toString","waves","wind","barometerData","surfaceTemp","EMPTY_SOFAR_WAVE_RESPONSE","smartMooringData","sofarSpotterSurfaceTemp","map","x","degrees","sofarSignificantWaveHeight","sofarMeanPeriod","sofarMeanDirection","spotterLatitude","spotterLongitude","significantWaveHeights","meanPeriods","meanDirections","concat","significantWaveHeight","meanPeriod","meanDirection","sofarWindSpeed","sofarWindDirection","speed","direction","spotterBarometerTop","spotterBarometricTopDiff","getBarometricDiff","sofarTopTemperature","sofarBottomTemperature","sofarBottomPressure","topTemp","bottomTemp","bottomPressure","sensorPosition","unit_type","unitType","timeEnd","topTemperature","bottomTemperature","waveMeanPeriod","waveMeanDirection","windSpeed","windDirection","barometerTop","barometerBottom","barometricTopDiff","surfaceTemperature","getValueClosestToDate","utcDate","timeDiff","Math","abs","getTime","prevClosest","nextPoint","spotterBarometer","lastTowPressures","slice","valueDiff","length","spotterBarometricDiff"],"sources":["/home/user/climbox/packages/api/src/utils/sofar.ts"],"sourcesContent":["/* eslint-disable no-console */\r\n/** Utility function to access the Sofar API and retrieve relevant data. */\r\nimport { isNil } from 'lodash';\r\nimport { DateTime } from '../luxon-extensions';\r\nimport axios from './retry-axios';\r\nimport { getStartEndDate } from './dates';\r\nimport {\r\n  SOFAR_LATEST_DATA_URL,\r\n  SOFAR_MARINE_URL,\r\n  SOFAR_SENSOR_DATA_URL,\r\n  SOFAR_WAVE_DATA_URL,\r\n} from './constants';\r\nimport {\r\n  ValueWithTimestamp,\r\n  SpotterData,\r\n  HindcastResponse,\r\n  EMPTY_SOFAR_WAVE_RESPONSE,\r\n  SofarWaveDateResponse,\r\n} from './sofar.types';\r\nimport { sendSlackMessage, SlackMessage } from './slack.utils';\r\n\r\nexport const getLatestData = (\r\n  sofarValues: ValueWithTimestamp[] | undefined,\r\n): ValueWithTimestamp | undefined => {\r\n  if (!sofarValues) {\r\n    return undefined;\r\n  }\r\n\r\n  return sofarValues.reduce(\r\n    (max, entry) =>\r\n      new Date(entry.timestamp) > new Date(max.timestamp) ? entry : max,\r\n    sofarValues[0],\r\n  );\r\n};\r\n\r\nexport const filterSofarResponse = (responseData: any) => {\r\n  return (\r\n    responseData\r\n      ? responseData.values.filter(\r\n          (data: ValueWithTimestamp) =>\r\n            !isNil(data?.value) && data.value !== 9999,\r\n        )\r\n      : []\r\n  ) as ValueWithTimestamp[];\r\n};\r\n\r\nasync function sofarErrorHandler({\r\n  error,\r\n  sensorId,\r\n  sendToSlack = false,\r\n}: {\r\n  error: any;\r\n  sensorId?: string;\r\n  sendToSlack?: boolean;\r\n}) {\r\n  if (error.response) {\r\n    const spotterMessagePart = sensorId ? `for spotter ${sensorId}.` : '.';\r\n    const message = `Sofar API responded with a ${error.response.status} status ${spotterMessagePart} ${error.response.data.message}`;\r\n    console.error(message);\r\n\r\n    if (!sendToSlack) {\r\n      return;\r\n    }\r\n    if ([401, 403].includes(error.response.status)) {\r\n      const messageTemplate: SlackMessage = {\r\n        channel: process.env.SLACK_BOT_CHANNEL as string,\r\n        text: message,\r\n        mrkdwn: true,\r\n      };\r\n\r\n      await sendSlackMessage(\r\n        messageTemplate,\r\n        process.env.SLACK_BOT_TOKEN as string,\r\n      );\r\n    }\r\n  } else {\r\n    console.error(`An error occurred accessing the Sofar API - ${error}`);\r\n  }\r\n}\r\n\r\nexport async function sofarHindcast(\r\n  modelId: string,\r\n  variableID: string,\r\n  latitude: number,\r\n  longitude: number,\r\n  start: string,\r\n  end: string,\r\n) {\r\n  return axios\r\n    .get(`${SOFAR_MARINE_URL}${modelId}/hindcast/point`, {\r\n      params: {\r\n        variableIDs: [variableID],\r\n        latitude,\r\n        longitude,\r\n        start,\r\n        end,\r\n        token: process.env.SOFAR_API_TOKEN,\r\n      },\r\n    })\r\n    .then((response) => {\r\n      // The api return an array of requested variables, but since we request one, ours it's always first\r\n      if (!response.data.hindcastVariables[0]) {\r\n        console.error(\r\n          `No Hindcast variable '${variableID}' available for ${latitude}, ${longitude}`,\r\n        );\r\n        return undefined;\r\n      }\r\n      return response.data.hindcastVariables[0] as HindcastResponse;\r\n    })\r\n    .catch((error) => sofarErrorHandler({ error }));\r\n}\r\n\r\nexport function sofarSensor(\r\n  sensorId: string,\r\n  token?: string,\r\n  start?: string,\r\n  end?: string,\r\n) {\r\n  return axios\r\n    .get(SOFAR_SENSOR_DATA_URL, {\r\n      params: {\r\n        spotterId: sensorId,\r\n        startDate: start,\r\n        endDate: end,\r\n        token,\r\n      },\r\n    })\r\n    .then((response) => response.data)\r\n    .catch((error) =>\r\n      sofarErrorHandler({ error, sensorId, sendToSlack: true }),\r\n    );\r\n}\r\n\r\nexport function sofarWaveData(\r\n  sensorId: string,\r\n  token?: string,\r\n  start?: string,\r\n  end?: string,\r\n) {\r\n  return axios\r\n    .get(SOFAR_WAVE_DATA_URL, {\r\n      params: {\r\n        spotterId: sensorId,\r\n        startDate: start,\r\n        endDate: end,\r\n        limit: start && end ? 500 : 100,\r\n        token,\r\n        includeSurfaceTempData: true,\r\n        includeWindData: true,\r\n        includeBarometerData: true,\r\n      },\r\n    })\r\n    .then((response) => response.data as { data: SofarWaveDateResponse })\r\n    .catch((error) => sofarErrorHandler({ error, sensorId }));\r\n}\r\n\r\nexport async function sofarLatest({\r\n  sensorId,\r\n  token,\r\n}: {\r\n  sensorId: string;\r\n  token?: string;\r\n}) {\r\n  return axios\r\n    .get(SOFAR_LATEST_DATA_URL, {\r\n      params: {\r\n        spotterId: sensorId,\r\n        token,\r\n      },\r\n    })\r\n    .then((response) => response.data.data)\r\n    .catch((error) =>\r\n      sofarErrorHandler({ error, sensorId, sendToSlack: true }),\r\n    );\r\n}\r\n\r\nexport async function getSofarHindcastData(\r\n  modelId: string,\r\n  variableID: string,\r\n  latitude: number,\r\n  longitude: number,\r\n  endDate: Date,\r\n  hours?: number,\r\n) {\r\n  const [start, end] = getStartEndDate(endDate, hours);\r\n  // Get data for model and return values\r\n  // console.time(`getSofarHindcast ${modelId}-${variableID} for lat ${latitude}`);\r\n  const hindcastVariables = await sofarHindcast(\r\n    modelId,\r\n    variableID,\r\n    latitude,\r\n    longitude,\r\n    start,\r\n    end,\r\n  );\r\n  // console.timeEnd(\r\n  //   `getSofarHindcast ${modelId}-${variableID} for lat ${latitude}`,\r\n  // );\r\n\r\n  // Filter out unknown values\r\n  return filterSofarResponse(hindcastVariables);\r\n}\r\n\r\nexport async function getSpotterData(\r\n  sensorId: string,\r\n  sofarToken?: string,\r\n  endDate?: Date,\r\n  startDate?: Date,\r\n): Promise<SpotterData> {\r\n  console.time(`getSpotterData for sensor ${sensorId}`);\r\n  const [start, end] =\r\n    endDate && !startDate\r\n      ? getStartEndDate(endDate)\r\n      : [\r\n          startDate && DateTime.fromJSDate(startDate).toString(),\r\n          endDate && DateTime.fromJSDate(endDate).toString(),\r\n        ];\r\n\r\n  const {\r\n    data: { waves = [], wind = [], barometerData = [], surfaceTemp = [] },\r\n  } = (await sofarWaveData(sensorId, sofarToken, start, end)) || {\r\n    data: EMPTY_SOFAR_WAVE_RESPONSE,\r\n  };\r\n  const { data: smartMooringData } = (await sofarSensor(\r\n    sensorId,\r\n    sofarToken,\r\n    start,\r\n    end,\r\n  )) || { data: [] };\r\n\r\n  const sofarSpotterSurfaceTemp: ValueWithTimestamp[] = surfaceTemp.map(\r\n    (x) => ({\r\n      timestamp: x.timestamp,\r\n      value: x.degrees,\r\n    }),\r\n  );\r\n\r\n  const [\r\n    sofarSignificantWaveHeight,\r\n    sofarMeanPeriod,\r\n    sofarMeanDirection,\r\n    spotterLatitude,\r\n    spotterLongitude,\r\n  ] = waves.reduce(\r\n    (\r\n      [\r\n        significantWaveHeights,\r\n        meanPeriods,\r\n        meanDirections,\r\n        latitude,\r\n        longitude,\r\n      ],\r\n      data,\r\n    ) => {\r\n      return [\r\n        significantWaveHeights.concat({\r\n          timestamp: data.timestamp,\r\n          value: data.significantWaveHeight,\r\n        }),\r\n        meanPeriods.concat({\r\n          timestamp: data.timestamp,\r\n          value: data.meanPeriod,\r\n        }),\r\n        meanDirections.concat({\r\n          timestamp: data.timestamp,\r\n          value: data.meanDirection,\r\n        }),\r\n        latitude.concat({\r\n          timestamp: data.timestamp,\r\n          value: data.latitude,\r\n        }),\r\n        longitude.concat({\r\n          timestamp: data.timestamp,\r\n          value: data.longitude,\r\n        }),\r\n      ];\r\n    },\r\n    [[], [], [], [], []] as [\r\n      ValueWithTimestamp[],\r\n      ValueWithTimestamp[],\r\n      ValueWithTimestamp[],\r\n      ValueWithTimestamp[],\r\n      ValueWithTimestamp[],\r\n    ],\r\n  );\r\n\r\n  const [sofarWindSpeed, sofarWindDirection] = wind.reduce(\r\n    ([speed, direction], data) => {\r\n      return [\r\n        speed.concat({\r\n          timestamp: data.timestamp,\r\n          value: data.speed,\r\n        }),\r\n        direction.concat({\r\n          timestamp: data.timestamp,\r\n          value: data.direction,\r\n        }),\r\n      ];\r\n    },\r\n    [[], []] as [ValueWithTimestamp[], ValueWithTimestamp[]],\r\n  );\r\n\r\n  const spotterBarometerTop: ValueWithTimestamp[] = barometerData.map(\r\n    (data) => ({\r\n      timestamp: data.timestamp,\r\n      value: data.value,\r\n    }),\r\n  );\r\n\r\n  const spotterBarometricTopDiff = getBarometricDiff(spotterBarometerTop);\r\n\r\n  // Sofar increments sensors by distance to the spotter.\r\n  // Sensor 1 -> top and Sensor 2 -> bottom\r\n  const [sofarTopTemperature, sofarBottomTemperature, sofarBottomPressure]: [\r\n    ValueWithTimestamp[],\r\n    ValueWithTimestamp[],\r\n    ValueWithTimestamp[],\r\n  ] = smartMooringData.reduce(\r\n    ([topTemp, bottomTemp, bottomPressure], data) => {\r\n      const { sensorPosition, unit_type: unitType } = data;\r\n\r\n      if (sensorPosition === 1 && unitType === 'temperature') {\r\n        return [\r\n          topTemp.concat({\r\n            timestamp: data.timestamp,\r\n            value: data.value,\r\n          }),\r\n          bottomTemp,\r\n          bottomPressure,\r\n        ];\r\n      }\r\n      if (sensorPosition === 2 && unitType === 'temperature') {\r\n        return [\r\n          topTemp,\r\n          bottomTemp.concat({\r\n            timestamp: data.timestamp,\r\n            value: data.value,\r\n          }),\r\n          bottomPressure,\r\n        ];\r\n      }\r\n      if (sensorPosition === 2 && unitType === 'pressure') {\r\n        return [\r\n          topTemp,\r\n          bottomTemp,\r\n          bottomPressure.concat({\r\n            timestamp: data.timestamp,\r\n            // convert micro bar to hPa\r\n            value: data.value / 1000,\r\n          }),\r\n        ];\r\n      }\r\n\r\n      return [topTemp, bottomTemp, bottomPressure];\r\n    },\r\n    [[], [], []],\r\n  );\r\n\r\n  console.timeEnd(`getSpotterData for sensor ${sensorId}`);\r\n\r\n  return {\r\n    topTemperature: sofarTopTemperature.filter((data) => !isNil(data.value)),\r\n    bottomTemperature: sofarBottomTemperature.filter(\r\n      (data) => !isNil(data.value),\r\n    ),\r\n    significantWaveHeight: sofarSignificantWaveHeight,\r\n    waveMeanPeriod: sofarMeanPeriod,\r\n    waveMeanDirection: sofarMeanDirection,\r\n    windSpeed: sofarWindSpeed,\r\n    windDirection: sofarWindDirection,\r\n    barometerTop: spotterBarometerTop,\r\n    barometerBottom: sofarBottomPressure.filter((data) => !isNil(data.value)),\r\n    barometricTopDiff: spotterBarometricTopDiff\r\n      ? [spotterBarometricTopDiff]\r\n      : [],\r\n    surfaceTemperature: sofarSpotterSurfaceTemp,\r\n    latitude: spotterLatitude,\r\n    longitude: spotterLongitude,\r\n  };\r\n}\r\n\r\n/** Utility function to get the closest available data given a date in UTC. */\r\nexport function getValueClosestToDate(\r\n  sofarValues: ValueWithTimestamp[],\r\n  utcDate: Date,\r\n) {\r\n  const timeDiff = (timestamp: string) =>\r\n    Math.abs(new Date(timestamp).getTime() - utcDate.getTime());\r\n\r\n  return sofarValues.reduce((prevClosest, nextPoint) =>\r\n    timeDiff(prevClosest.timestamp) > timeDiff(nextPoint.timestamp)\r\n      ? nextPoint\r\n      : prevClosest,\r\n  ).value;\r\n}\r\n\r\nexport function getBarometricDiff(spotterBarometer: ValueWithTimestamp[]) {\r\n  const lastTowPressures = spotterBarometer?.slice(-2);\r\n  const valueDiff =\r\n    lastTowPressures?.length === 2\r\n      ? lastTowPressures[1].value - lastTowPressures[0].value\r\n      : undefined;\r\n\r\n  const spotterBarometricDiff: ValueWithTimestamp | null = valueDiff\r\n    ? {\r\n        value: valueDiff,\r\n        timestamp: lastTowPressures![1].timestamp,\r\n      }\r\n    : null;\r\n\r\n  return spotterBarometricDiff;\r\n}\r\n"],"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"}