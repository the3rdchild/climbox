f190e87fea937194e633185394b69397
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_service_1 = require("./test.service");
const health_check_spec_1 = require("../src/health-check/health-check.spec");
const users_spec_1 = require("../src/users/users.spec");
const collections_spec_1 = require("../src/collections/collections.spec");
const time_series_spec_1 = require("../src/time-series/time-series.spec");
const regions_spec_1 = require("../src/regions/regions.spec");
const site_survey_points_spec_1 = require("../src/site-survey-points/site-survey-points.spec");
const site_application_spec_1 = require("../src/site-applications/site-application.spec");
const surveys_spec_1 = require("../src/surveys/surveys.spec");
const sites_spec_1 = require("../src/sites/sites.spec");
const sensors_spec_1 = require("../src/sensors/sensors.spec");
const monitoring_spec_1 = require("../src/monitoring/monitoring.spec");
describe('AppController (e2e)', () => {
    const testService = test_service_1.TestService.getInstance();
    let app;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        // Initialize app
        app = yield testService.getApp();
    }));
    it('timezone should always be UTC', () => {
        expect(new Date().getTimezoneOffset()).toBe(0);
    });
    it('App is defined', () => {
        expect(app).toBeDefined();
    });
    describe('HealthCheck (e2e) /health-check', health_check_spec_1.healthCheckTests);
    describe('User (e2e) /users', users_spec_1.userTests);
    describe('Site SurveyPoints (e2e) /site-survey-points', site_survey_points_spec_1.surveyPointTests);
    describe('Collection (e2e) /collections', collections_spec_1.collectionTests);
    describe('Time Series (e2e) /time-series', time_series_spec_1.timeSeriesTests);
    describe('Region (e2e) /regions', regions_spec_1.regionTests);
    describe('Site Application {e2e) /site-applications', site_application_spec_1.siteApplicationTests);
    describe('Survey (e2e) /sites/:id/surveys', surveys_spec_1.surveyTests);
    describe('Sites (e2e) /sites', sites_spec_1.siteTests);
    describe('Sensors (e2e) /sensors', sensors_spec_1.sensorTests);
    describe('Monitoring (e2e) /monitoring', monitoring_spec_1.monitoringTests);
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield testService.cleanUpApp();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdXNlci9jbGltYm94L3BhY2thZ2VzL2FwaS90ZXN0L2FwcC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsaURBQTZDO0FBQzdDLDZFQUF5RTtBQUN6RSx3REFBb0Q7QUFDcEQsMEVBQXNFO0FBQ3RFLDBFQUFzRTtBQUN0RSw4REFBMEQ7QUFDMUQsK0ZBQXFGO0FBQ3JGLDBGQUFzRjtBQUN0Riw4REFBMEQ7QUFDMUQsd0RBQW9EO0FBQ3BELDhEQUEwRDtBQUMxRCx1RUFBb0U7QUFFcEUsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLFdBQVcsR0FBRywwQkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlDLElBQUksR0FBcUIsQ0FBQztJQUUxQixTQUFTLENBQUMsR0FBUyxFQUFFO1FBQ25CLGlCQUFpQjtRQUNqQixHQUFHLEdBQUcsTUFBTSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDdkMsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGlDQUFpQyxFQUFFLG9DQUFnQixDQUFDLENBQUM7SUFFOUQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLHNCQUFTLENBQUMsQ0FBQztJQUV6QyxRQUFRLENBQUMsNkNBQTZDLEVBQUUsMENBQWdCLENBQUMsQ0FBQztJQUUxRSxRQUFRLENBQUMsK0JBQStCLEVBQUUsa0NBQWUsQ0FBQyxDQUFDO0lBRTNELFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxrQ0FBZSxDQUFDLENBQUM7SUFFNUQsUUFBUSxDQUFDLHVCQUF1QixFQUFFLDBCQUFXLENBQUMsQ0FBQztJQUUvQyxRQUFRLENBQUMsMkNBQTJDLEVBQUUsNENBQW9CLENBQUMsQ0FBQztJQUU1RSxRQUFRLENBQUMsaUNBQWlDLEVBQUUsMEJBQVcsQ0FBQyxDQUFDO0lBRXpELFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxzQkFBUyxDQUFDLENBQUM7SUFFMUMsUUFBUSxDQUFDLHdCQUF3QixFQUFFLDBCQUFXLENBQUMsQ0FBQztJQUVoRCxRQUFRLENBQUMsOEJBQThCLEVBQUUsaUNBQWUsQ0FBQyxDQUFDO0lBRTFELFFBQVEsQ0FBQyxHQUFTLEVBQUU7UUFDbEIsTUFBTSxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvY2xpbWJveC9wYWNrYWdlcy9hcGkvdGVzdC9hcHAuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTmVzdEFwcGxpY2F0aW9uIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xyXG5pbXBvcnQgeyBUZXN0U2VydmljZSB9IGZyb20gJy4vdGVzdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgaGVhbHRoQ2hlY2tUZXN0cyB9IGZyb20gJy4uL3NyYy9oZWFsdGgtY2hlY2svaGVhbHRoLWNoZWNrLnNwZWMnO1xyXG5pbXBvcnQgeyB1c2VyVGVzdHMgfSBmcm9tICcuLi9zcmMvdXNlcnMvdXNlcnMuc3BlYyc7XHJcbmltcG9ydCB7IGNvbGxlY3Rpb25UZXN0cyB9IGZyb20gJy4uL3NyYy9jb2xsZWN0aW9ucy9jb2xsZWN0aW9ucy5zcGVjJztcclxuaW1wb3J0IHsgdGltZVNlcmllc1Rlc3RzIH0gZnJvbSAnLi4vc3JjL3RpbWUtc2VyaWVzL3RpbWUtc2VyaWVzLnNwZWMnO1xyXG5pbXBvcnQgeyByZWdpb25UZXN0cyB9IGZyb20gJy4uL3NyYy9yZWdpb25zL3JlZ2lvbnMuc3BlYyc7XHJcbmltcG9ydCB7IHN1cnZleVBvaW50VGVzdHMgfSBmcm9tICcuLi9zcmMvc2l0ZS1zdXJ2ZXktcG9pbnRzL3NpdGUtc3VydmV5LXBvaW50cy5zcGVjJztcclxuaW1wb3J0IHsgc2l0ZUFwcGxpY2F0aW9uVGVzdHMgfSBmcm9tICcuLi9zcmMvc2l0ZS1hcHBsaWNhdGlvbnMvc2l0ZS1hcHBsaWNhdGlvbi5zcGVjJztcclxuaW1wb3J0IHsgc3VydmV5VGVzdHMgfSBmcm9tICcuLi9zcmMvc3VydmV5cy9zdXJ2ZXlzLnNwZWMnO1xyXG5pbXBvcnQgeyBzaXRlVGVzdHMgfSBmcm9tICcuLi9zcmMvc2l0ZXMvc2l0ZXMuc3BlYyc7XHJcbmltcG9ydCB7IHNlbnNvclRlc3RzIH0gZnJvbSAnLi4vc3JjL3NlbnNvcnMvc2Vuc29ycy5zcGVjJztcclxuaW1wb3J0IHsgbW9uaXRvcmluZ1Rlc3RzIH0gZnJvbSAnLi4vc3JjL21vbml0b3JpbmcvbW9uaXRvcmluZy5zcGVjJztcclxuXHJcbmRlc2NyaWJlKCdBcHBDb250cm9sbGVyIChlMmUpJywgKCkgPT4ge1xyXG4gIGNvbnN0IHRlc3RTZXJ2aWNlID0gVGVzdFNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuICBsZXQgYXBwOiBJTmVzdEFwcGxpY2F0aW9uO1xyXG5cclxuICBiZWZvcmVBbGwoYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gSW5pdGlhbGl6ZSBhcHBcclxuICAgIGFwcCA9IGF3YWl0IHRlc3RTZXJ2aWNlLmdldEFwcCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgndGltZXpvbmUgc2hvdWxkIGFsd2F5cyBiZSBVVEMnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QobmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpKS50b0JlKDApO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnQXBwIGlzIGRlZmluZWQnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoYXBwKS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnSGVhbHRoQ2hlY2sgKGUyZSkgL2hlYWx0aC1jaGVjaycsIGhlYWx0aENoZWNrVGVzdHMpO1xyXG5cclxuICBkZXNjcmliZSgnVXNlciAoZTJlKSAvdXNlcnMnLCB1c2VyVGVzdHMpO1xyXG5cclxuICBkZXNjcmliZSgnU2l0ZSBTdXJ2ZXlQb2ludHMgKGUyZSkgL3NpdGUtc3VydmV5LXBvaW50cycsIHN1cnZleVBvaW50VGVzdHMpO1xyXG5cclxuICBkZXNjcmliZSgnQ29sbGVjdGlvbiAoZTJlKSAvY29sbGVjdGlvbnMnLCBjb2xsZWN0aW9uVGVzdHMpO1xyXG5cclxuICBkZXNjcmliZSgnVGltZSBTZXJpZXMgKGUyZSkgL3RpbWUtc2VyaWVzJywgdGltZVNlcmllc1Rlc3RzKTtcclxuXHJcbiAgZGVzY3JpYmUoJ1JlZ2lvbiAoZTJlKSAvcmVnaW9ucycsIHJlZ2lvblRlc3RzKTtcclxuXHJcbiAgZGVzY3JpYmUoJ1NpdGUgQXBwbGljYXRpb24ge2UyZSkgL3NpdGUtYXBwbGljYXRpb25zJywgc2l0ZUFwcGxpY2F0aW9uVGVzdHMpO1xyXG5cclxuICBkZXNjcmliZSgnU3VydmV5IChlMmUpIC9zaXRlcy86aWQvc3VydmV5cycsIHN1cnZleVRlc3RzKTtcclxuXHJcbiAgZGVzY3JpYmUoJ1NpdGVzIChlMmUpIC9zaXRlcycsIHNpdGVUZXN0cyk7XHJcblxyXG4gIGRlc2NyaWJlKCdTZW5zb3JzIChlMmUpIC9zZW5zb3JzJywgc2Vuc29yVGVzdHMpO1xyXG5cclxuICBkZXNjcmliZSgnTW9uaXRvcmluZyAoZTJlKSAvbW9uaXRvcmluZycsIG1vbml0b3JpbmdUZXN0cyk7XHJcblxyXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHRlc3RTZXJ2aWNlLmNsZWFuVXBBcHAoKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==