{"version":3,"names":["common_1","cov_1twg5n4q69","s","require","typeorm_1","typeorm_2","site_utils_1","reef_check_surveys_entity_1","ReefCheckSurveysService","ReefCheckSurveysService_1","constructor","reefCheckSurveyRepository","f","logger","Logger","name","find","siteId","where","relations","findOne","id","reefCheckSurvey","select","getAllColumns","b","NotFoundException","__decorate","Injectable","__param","InjectRepository","ReefCheckSurvey","Repository","exports"],"sources":["/home/user/climbox/packages/api/src/reef-check-surveys/reef-check-surveys.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { getAllColumns } from 'utils/site.utils';\r\nimport { ReefCheckSurvey } from './reef-check-surveys.entity';\r\n\r\n@Injectable()\r\nexport class ReefCheckSurveysService {\r\n  private readonly logger = new Logger(ReefCheckSurveysService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(ReefCheckSurvey)\r\n    private reefCheckSurveyRepository: Repository<ReefCheckSurvey>,\r\n  ) {}\r\n\r\n  async find(siteId: number): Promise<ReefCheckSurvey[]> {\r\n    return this.reefCheckSurveyRepository.find({\r\n      where: { siteId },\r\n      relations: ['organisms', 'substrates', 'reefCheckSite'],\r\n    });\r\n  }\r\n\r\n  async findOne(id: string): Promise<ReefCheckSurvey> {\r\n    const reefCheckSurvey = await this.reefCheckSurveyRepository.findOne({\r\n      where: { id },\r\n      relations: ['organisms', 'substrates', 'reefCheckSite'],\r\n      // Using getAllColumns to include VirtualColumns - they are not included by default\r\n      select: getAllColumns(this.reefCheckSurveyRepository),\r\n    });\r\n\r\n    if (!reefCheckSurvey) {\r\n      throw new NotFoundException(`No site was found with the specified id`);\r\n    }\r\n\r\n    return reefCheckSurvey;\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}