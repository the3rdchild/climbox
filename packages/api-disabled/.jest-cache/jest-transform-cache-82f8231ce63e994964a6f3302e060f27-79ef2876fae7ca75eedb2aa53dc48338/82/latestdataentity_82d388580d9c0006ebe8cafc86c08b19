3ff4c4eac5ac38df39a472f8d4734c70
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LatestData = void 0;
const swagger_1 = require("@nestjs/swagger");
const typeorm_1 = require("typeorm");
const site_survey_points_entity_1 = require("../site-survey-points/site-survey-points.entity");
const sites_entity_1 = require("../sites/sites.entity");
const source_type_enum_1 = require("../sites/schemas/source-type.enum");
const time_series_entity_1 = require("./time-series.entity");
const metrics_enum_1 = require("./metrics.enum");
let LatestData = class LatestData {
};
__decorate([
    (0, swagger_1.ApiProperty)({ example: 1 }),
    (0, typeorm_1.PrimaryGeneratedColumn)(),
    __metadata("design:type", Number)
], LatestData.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: false }),
    __metadata("design:type", Date)
], LatestData.prototype, "timestamp", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ example: 11.05 }),
    (0, typeorm_1.Column)({ type: 'float', nullable: false }),
    __metadata("design:type", Number)
], LatestData.prototype, "value", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => sites_entity_1.Site, { onDelete: 'CASCADE', nullable: false }),
    __metadata("design:type", sites_entity_1.Site)
], LatestData.prototype, "site", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ example: 15 }),
    (0, typeorm_1.RelationId)((latestData) => latestData.site),
    __metadata("design:type", Number)
], LatestData.prototype, "siteId", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => site_survey_points_entity_1.SiteSurveyPoint, { onDelete: 'CASCADE', nullable: true }),
    __metadata("design:type", Object)
], LatestData.prototype, "surveyPoint", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'enum', enum: source_type_enum_1.SourceType }),
    __metadata("design:type", String)
], LatestData.prototype, "source", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'enum', enum: metrics_enum_1.Metric }),
    __metadata("design:type", String)
], LatestData.prototype, "metric", void 0);
LatestData = __decorate([
    (0, typeorm_1.ViewEntity)({
        expression: (dataSource) => {
            return (dataSource
                .createQueryBuilder()
                .select('DISTINCT ON (metric, type, site_id, survey_point_id) time_series.id')
                .addSelect('metric')
                .addSelect('timestamp')
                .addSelect('value')
                .addSelect('type', 'source')
                .addSelect('site_id')
                .addSelect('survey_point_id')
                .from(time_series_entity_1.TimeSeries, 'time_series')
                .innerJoin('sources', 'sources', 'sources.id = time_series.source_id')
                // Limit data to the past week. Bonus, it makes view refreshes a lot faster.
                .where("timestamp >= current_date - INTERVAL '7 days'")
                // Look a bit further in the past for sonde data
                .orWhere("type IN ('sonde') AND (timestamp >= current_date - INTERVAL '2 years')")
                .orWhere("type IN ('hui') AND (timestamp >= current_date - INTERVAL '2 years')")
                .orWhere("type IN ('sheet_data') AND (timestamp >= current_date - INTERVAL '2 years')")
                .orderBy('metric, type, site_id, survey_point_id, timestamp', 'DESC'));
        },
        materialized: true,
    })
], LatestData);
exports.LatestData = LatestData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdXNlci9jbGltYm94L3BhY2thZ2VzL2FwaS9zcmMvdGltZS1zZXJpZXMvbGF0ZXN0LWRhdGEuZW50aXR5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZDQUE4QztBQUM5QyxxQ0FPaUI7QUFDakIsK0ZBQWtGO0FBQ2xGLHdEQUE2QztBQUM3Qyx3RUFBK0Q7QUFDL0QsNkRBQWtEO0FBQ2xELGlEQUF3QztBQW1DakMsSUFBTSxVQUFVLEdBQWhCLE1BQU0sVUFBVTtDQTJCdEIsQ0FBQTtBQTFCQztJQUFDLElBQUEscUJBQVcsRUFBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUMzQixJQUFBLGdDQUFzQixHQUFFOztzQ0FDZDtBQUVYO0lBQUMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDOzhCQUNqQixJQUFJOzZDQUFDO0FBRWhCO0lBQUMsSUFBQSxxQkFBVyxFQUFDLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQy9CLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDOzt5Q0FDN0I7QUFFZDtJQUFDLElBQUEsbUJBQVMsRUFBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7OEJBQzFELG1CQUFJO3dDQUFDO0FBRVg7SUFBQyxJQUFBLHFCQUFXLEVBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDNUIsSUFBQSxvQkFBVSxFQUFDLENBQUMsVUFBc0IsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQzs7MENBQ3pDO0FBRWY7SUFBQyxJQUFBLG1CQUFTLEVBQUMsR0FBRyxFQUFFLENBQUMsMkNBQWUsRUFBRSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDOzsrQ0FDdEM7QUFFcEM7SUFBQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSw2QkFBVSxFQUFFLENBQUM7OzBDQUN4QjtBQUVuQjtJQUFDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLHFCQUFNLEVBQUUsQ0FBQzs7MENBQ3hCO0FBMUJKLFVBQVU7SUFqQ3RCLElBQUEsb0JBQVUsRUFBQztRQUNWLFVBQVUsRUFBRSxDQUFDLFVBQXNCLEVBQUUsRUFBRTtZQUNyQyxPQUFPLENBQ0wsVUFBVTtpQkFDUCxrQkFBa0IsRUFBRTtpQkFDcEIsTUFBTSxDQUNMLHFFQUFxRSxDQUN0RTtpQkFDQSxTQUFTLENBQUMsUUFBUSxDQUFDO2lCQUNuQixTQUFTLENBQUMsV0FBVyxDQUFDO2lCQUN0QixTQUFTLENBQUMsT0FBTyxDQUFDO2lCQUNsQixTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQztpQkFDM0IsU0FBUyxDQUFDLFNBQVMsQ0FBQztpQkFDcEIsU0FBUyxDQUFDLGlCQUFpQixDQUFDO2lCQUM1QixJQUFJLENBQUMsK0JBQVUsRUFBRSxhQUFhLENBQUM7aUJBQy9CLFNBQVMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLG9DQUFvQyxDQUFDO2dCQUN0RSw0RUFBNEU7aUJBQzNFLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQztnQkFDdkQsZ0RBQWdEO2lCQUMvQyxPQUFPLENBQ04sd0VBQXdFLENBQ3pFO2lCQUNBLE9BQU8sQ0FDTixzRUFBc0UsQ0FDdkU7aUJBQ0EsT0FBTyxDQUNOLDZFQUE2RSxDQUM5RTtpQkFDQSxPQUFPLENBQUMsbURBQW1ELEVBQUUsTUFBTSxDQUFDLENBQ3hFLENBQUM7UUFDSixDQUFDO1FBQ0QsWUFBWSxFQUFFLElBQUk7S0FDbkIsQ0FBQztHQUNXLFVBQVUsQ0EyQnRCO0FBM0JZLGdDQUFVIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvY2xpbWJveC9wYWNrYWdlcy9hcGkvc3JjL3RpbWUtc2VyaWVzL2xhdGVzdC1kYXRhLmVudGl0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcGlQcm9wZXJ0eSB9IGZyb20gJ0BuZXN0anMvc3dhZ2dlcic7XHJcbmltcG9ydCB7XHJcbiAgQ29sdW1uLFxyXG4gIERhdGFTb3VyY2UsXHJcbiAgTWFueVRvT25lLFxyXG4gIFByaW1hcnlHZW5lcmF0ZWRDb2x1bW4sXHJcbiAgUmVsYXRpb25JZCxcclxuICBWaWV3RW50aXR5LFxyXG59IGZyb20gJ3R5cGVvcm0nO1xyXG5pbXBvcnQgeyBTaXRlU3VydmV5UG9pbnQgfSBmcm9tICcuLi9zaXRlLXN1cnZleS1wb2ludHMvc2l0ZS1zdXJ2ZXktcG9pbnRzLmVudGl0eSc7XHJcbmltcG9ydCB7IFNpdGUgfSBmcm9tICcuLi9zaXRlcy9zaXRlcy5lbnRpdHknO1xyXG5pbXBvcnQgeyBTb3VyY2VUeXBlIH0gZnJvbSAnLi4vc2l0ZXMvc2NoZW1hcy9zb3VyY2UtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVGltZVNlcmllcyB9IGZyb20gJy4vdGltZS1zZXJpZXMuZW50aXR5JztcclxuaW1wb3J0IHsgTWV0cmljIH0gZnJvbSAnLi9tZXRyaWNzLmVudW0nO1xyXG5cclxuQFZpZXdFbnRpdHkoe1xyXG4gIGV4cHJlc3Npb246IChkYXRhU291cmNlOiBEYXRhU291cmNlKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBkYXRhU291cmNlXHJcbiAgICAgICAgLmNyZWF0ZVF1ZXJ5QnVpbGRlcigpXHJcbiAgICAgICAgLnNlbGVjdChcclxuICAgICAgICAgICdESVNUSU5DVCBPTiAobWV0cmljLCB0eXBlLCBzaXRlX2lkLCBzdXJ2ZXlfcG9pbnRfaWQpIHRpbWVfc2VyaWVzLmlkJyxcclxuICAgICAgICApXHJcbiAgICAgICAgLmFkZFNlbGVjdCgnbWV0cmljJylcclxuICAgICAgICAuYWRkU2VsZWN0KCd0aW1lc3RhbXAnKVxyXG4gICAgICAgIC5hZGRTZWxlY3QoJ3ZhbHVlJylcclxuICAgICAgICAuYWRkU2VsZWN0KCd0eXBlJywgJ3NvdXJjZScpXHJcbiAgICAgICAgLmFkZFNlbGVjdCgnc2l0ZV9pZCcpXHJcbiAgICAgICAgLmFkZFNlbGVjdCgnc3VydmV5X3BvaW50X2lkJylcclxuICAgICAgICAuZnJvbShUaW1lU2VyaWVzLCAndGltZV9zZXJpZXMnKVxyXG4gICAgICAgIC5pbm5lckpvaW4oJ3NvdXJjZXMnLCAnc291cmNlcycsICdzb3VyY2VzLmlkID0gdGltZV9zZXJpZXMuc291cmNlX2lkJylcclxuICAgICAgICAvLyBMaW1pdCBkYXRhIHRvIHRoZSBwYXN0IHdlZWsuIEJvbnVzLCBpdCBtYWtlcyB2aWV3IHJlZnJlc2hlcyBhIGxvdCBmYXN0ZXIuXHJcbiAgICAgICAgLndoZXJlKFwidGltZXN0YW1wID49IGN1cnJlbnRfZGF0ZSAtIElOVEVSVkFMICc3IGRheXMnXCIpXHJcbiAgICAgICAgLy8gTG9vayBhIGJpdCBmdXJ0aGVyIGluIHRoZSBwYXN0IGZvciBzb25kZSBkYXRhXHJcbiAgICAgICAgLm9yV2hlcmUoXHJcbiAgICAgICAgICBcInR5cGUgSU4gKCdzb25kZScpIEFORCAodGltZXN0YW1wID49IGN1cnJlbnRfZGF0ZSAtIElOVEVSVkFMICcyIHllYXJzJylcIixcclxuICAgICAgICApXHJcbiAgICAgICAgLm9yV2hlcmUoXHJcbiAgICAgICAgICBcInR5cGUgSU4gKCdodWknKSBBTkQgKHRpbWVzdGFtcCA+PSBjdXJyZW50X2RhdGUgLSBJTlRFUlZBTCAnMiB5ZWFycycpXCIsXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5vcldoZXJlKFxyXG4gICAgICAgICAgXCJ0eXBlIElOICgnc2hlZXRfZGF0YScpIEFORCAodGltZXN0YW1wID49IGN1cnJlbnRfZGF0ZSAtIElOVEVSVkFMICcyIHllYXJzJylcIixcclxuICAgICAgICApXHJcbiAgICAgICAgLm9yZGVyQnkoJ21ldHJpYywgdHlwZSwgc2l0ZV9pZCwgc3VydmV5X3BvaW50X2lkLCB0aW1lc3RhbXAnLCAnREVTQycpXHJcbiAgICApO1xyXG4gIH0sXHJcbiAgbWF0ZXJpYWxpemVkOiB0cnVlLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTGF0ZXN0RGF0YSB7XHJcbiAgQEFwaVByb3BlcnR5KHsgZXhhbXBsZTogMSB9KVxyXG4gIEBQcmltYXJ5R2VuZXJhdGVkQ29sdW1uKClcclxuICBpZDogbnVtYmVyO1xyXG5cclxuICBAQ29sdW1uKHsgbnVsbGFibGU6IGZhbHNlIH0pXHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG5cclxuICBAQXBpUHJvcGVydHkoeyBleGFtcGxlOiAxMS4wNSB9KVxyXG4gIEBDb2x1bW4oeyB0eXBlOiAnZmxvYXQnLCBudWxsYWJsZTogZmFsc2UgfSlcclxuICB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICBATWFueVRvT25lKCgpID0+IFNpdGUsIHsgb25EZWxldGU6ICdDQVNDQURFJywgbnVsbGFibGU6IGZhbHNlIH0pXHJcbiAgc2l0ZTogU2l0ZTtcclxuXHJcbiAgQEFwaVByb3BlcnR5KHsgZXhhbXBsZTogMTUgfSlcclxuICBAUmVsYXRpb25JZCgobGF0ZXN0RGF0YTogTGF0ZXN0RGF0YSkgPT4gbGF0ZXN0RGF0YS5zaXRlKVxyXG4gIHNpdGVJZDogbnVtYmVyO1xyXG5cclxuICBATWFueVRvT25lKCgpID0+IFNpdGVTdXJ2ZXlQb2ludCwgeyBvbkRlbGV0ZTogJ0NBU0NBREUnLCBudWxsYWJsZTogdHJ1ZSB9KVxyXG4gIHN1cnZleVBvaW50OiBTaXRlU3VydmV5UG9pbnQgfCBudWxsO1xyXG5cclxuICBAQ29sdW1uKHsgdHlwZTogJ2VudW0nLCBlbnVtOiBTb3VyY2VUeXBlIH0pXHJcbiAgc291cmNlOiBTb3VyY2VUeXBlO1xyXG5cclxuICBAQ29sdW1uKHsgdHlwZTogJ2VudW0nLCBlbnVtOiBNZXRyaWMgfSlcclxuICBtZXRyaWM6IE1ldHJpYztcclxufVxyXG4iXSwidmVyc2lvbiI6M30=