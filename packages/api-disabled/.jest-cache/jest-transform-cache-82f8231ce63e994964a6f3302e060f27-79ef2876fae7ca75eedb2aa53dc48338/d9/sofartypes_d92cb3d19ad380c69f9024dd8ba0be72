ca100bd308f3954be11e516061824116
"use strict";

/* istanbul ignore next */
function cov_24p5uz5boo() {
  var path = "/home/user/climbox/packages/api/src/utils/sofar.types.ts";
  var hash = "004de641a8c1bf11213aea0f64de8bb52c198dbf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/user/climbox/packages/api/src/utils/sofar.types.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 80
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "3": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 23,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {},
    b: {},
    inputSourceMap: {
      file: "/home/user/climbox/packages/api/src/utils/sofar.types.ts",
      mappings: ";;;AA8Ba,QAAA,0BAA0B,GAAgB;IACrD,cAAc,EAAE,EAAE;IAClB,iBAAiB,EAAE,EAAE;IACrB,qBAAqB,EAAE,EAAE;IACzB,cAAc,EAAE,EAAE;IAClB,iBAAiB,EAAE,EAAE;IACrB,SAAS,EAAE,EAAE;IACb,aAAa,EAAE,EAAE;IACjB,YAAY,EAAE,EAAE;IAChB,eAAe,EAAE,EAAE;IACnB,iBAAiB,EAAE,EAAE;IACrB,kBAAkB,EAAE,EAAE;CACvB,CAAC;AA+CW,QAAA,yBAAyB,GAA0B;IAC9D,SAAS,EAAE,EAAE;IACb,KAAK,EAAE,EAAE;IACT,IAAI,EAAE,EAAE;IACR,WAAW,EAAE,EAAE;IACf,aAAa,EAAE,EAAE;CAClB,CAAC",
      names: [],
      sources: ["/home/user/climbox/packages/api/src/utils/sofar.types.ts"],
      sourcesContent: ["export interface ValueWithTimestamp {\r\n  timestamp: string;\r\n  value: number;\r\n}\r\n\r\nexport interface SofarDailyData {\r\n  site: { id: number };\r\n  date: Date;\r\n  dailyAlertLevel?: number;\r\n  weeklyAlertLevel?: number;\r\n  satelliteTemperature?: number;\r\n  degreeHeatingDays?: number;\r\n}\r\n\r\nexport interface SpotterData {\r\n  topTemperature: ValueWithTimestamp[];\r\n  bottomTemperature: ValueWithTimestamp[];\r\n  significantWaveHeight: ValueWithTimestamp[];\r\n  waveMeanPeriod: ValueWithTimestamp[];\r\n  waveMeanDirection: ValueWithTimestamp[];\r\n  windSpeed: ValueWithTimestamp[];\r\n  windDirection: ValueWithTimestamp[];\r\n  barometerTop: ValueWithTimestamp[];\r\n  barometerBottom: ValueWithTimestamp[];\r\n  barometricTopDiff: ValueWithTimestamp[];\r\n  surfaceTemperature: ValueWithTimestamp[];\r\n  latitude?: ValueWithTimestamp[];\r\n  longitude?: ValueWithTimestamp[];\r\n}\r\n\r\nexport const DEFAULT_SPOTTER_DATA_VALUE: SpotterData = {\r\n  topTemperature: [],\r\n  bottomTemperature: [],\r\n  significantWaveHeight: [],\r\n  waveMeanPeriod: [],\r\n  waveMeanDirection: [],\r\n  windSpeed: [],\r\n  windDirection: [],\r\n  barometerTop: [],\r\n  barometerBottom: [],\r\n  barometricTopDiff: [],\r\n  surfaceTemperature: [],\r\n};\r\n\r\nexport interface HindcastResponse {\r\n  variableID: string;\r\n  variableName: string;\r\n  dataCategory: string;\r\n  physicalUnit: string;\r\n  values: ValueWithTimestamp[];\r\n}\r\n\r\nexport interface SofarWaveDateResponse {\r\n  spotterId: string;\r\n  waves: {\r\n    significantWaveHeight: number;\r\n    peakPeriod: number;\r\n    meanPeriod: number;\r\n    peakDirection: number;\r\n    peakDirectionalSpread: number;\r\n    meanDirection: number;\r\n    meanDirectionalSpread: number;\r\n    timestamp: string;\r\n    latitude: number;\r\n    longitude: number;\r\n  }[];\r\n  wind: {\r\n    speed: number;\r\n    direction: number;\r\n    seasurfaceId: number;\r\n    latitude: number;\r\n    longitude: number;\r\n    timestamp: string;\r\n  }[];\r\n  surfaceTemp: {\r\n    degrees: number;\r\n    latitude: number;\r\n    longitude: number;\r\n    timestamp: string;\r\n  }[];\r\n  barometerData: {\r\n    latitude: number;\r\n    longitude: number;\r\n    timestamp: string;\r\n    units: string;\r\n    value: number;\r\n  }[];\r\n}\r\n\r\nexport const EMPTY_SOFAR_WAVE_RESPONSE: SofarWaveDateResponse = {\r\n  spotterId: '',\r\n  waves: [],\r\n  wind: [],\r\n  surfaceTemp: [],\r\n  barometerData: [],\r\n};\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "004de641a8c1bf11213aea0f64de8bb52c198dbf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_24p5uz5boo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_24p5uz5boo();
cov_24p5uz5boo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_24p5uz5boo().s[1]++;
exports.EMPTY_SOFAR_WAVE_RESPONSE = exports.DEFAULT_SPOTTER_DATA_VALUE = void 0;
/* istanbul ignore next */
cov_24p5uz5boo().s[2]++;
exports.DEFAULT_SPOTTER_DATA_VALUE = {
  topTemperature: [],
  bottomTemperature: [],
  significantWaveHeight: [],
  waveMeanPeriod: [],
  waveMeanDirection: [],
  windSpeed: [],
  windDirection: [],
  barometerTop: [],
  barometerBottom: [],
  barometricTopDiff: [],
  surfaceTemperature: []
};
/* istanbul ignore next */
cov_24p5uz5boo().s[3]++;
exports.EMPTY_SOFAR_WAVE_RESPONSE = {
  spotterId: '',
  waves: [],
  wind: [],
  surfaceTemp: [],
  barometerData: []
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjRwNXV6NWJvbyIsImFjdHVhbENvdmVyYWdlIiwicyIsImV4cG9ydHMiLCJERUZBVUxUX1NQT1RURVJfREFUQV9WQUxVRSIsInRvcFRlbXBlcmF0dXJlIiwiYm90dG9tVGVtcGVyYXR1cmUiLCJzaWduaWZpY2FudFdhdmVIZWlnaHQiLCJ3YXZlTWVhblBlcmlvZCIsIndhdmVNZWFuRGlyZWN0aW9uIiwid2luZFNwZWVkIiwid2luZERpcmVjdGlvbiIsImJhcm9tZXRlclRvcCIsImJhcm9tZXRlckJvdHRvbSIsImJhcm9tZXRyaWNUb3BEaWZmIiwic3VyZmFjZVRlbXBlcmF0dXJlIiwiRU1QVFlfU09GQVJfV0FWRV9SRVNQT05TRSIsInNwb3R0ZXJJZCIsIndhdmVzIiwid2luZCIsInN1cmZhY2VUZW1wIiwiYmFyb21ldGVyRGF0YSJdLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvY2xpbWJveC9wYWNrYWdlcy9hcGkvc3JjL3V0aWxzL3NvZmFyLnR5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgVmFsdWVXaXRoVGltZXN0YW1wIHtcclxuICB0aW1lc3RhbXA6IHN0cmluZztcclxuICB2YWx1ZTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNvZmFyRGFpbHlEYXRhIHtcclxuICBzaXRlOiB7IGlkOiBudW1iZXIgfTtcclxuICBkYXRlOiBEYXRlO1xyXG4gIGRhaWx5QWxlcnRMZXZlbD86IG51bWJlcjtcclxuICB3ZWVrbHlBbGVydExldmVsPzogbnVtYmVyO1xyXG4gIHNhdGVsbGl0ZVRlbXBlcmF0dXJlPzogbnVtYmVyO1xyXG4gIGRlZ3JlZUhlYXRpbmdEYXlzPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNwb3R0ZXJEYXRhIHtcclxuICB0b3BUZW1wZXJhdHVyZTogVmFsdWVXaXRoVGltZXN0YW1wW107XHJcbiAgYm90dG9tVGVtcGVyYXR1cmU6IFZhbHVlV2l0aFRpbWVzdGFtcFtdO1xyXG4gIHNpZ25pZmljYW50V2F2ZUhlaWdodDogVmFsdWVXaXRoVGltZXN0YW1wW107XHJcbiAgd2F2ZU1lYW5QZXJpb2Q6IFZhbHVlV2l0aFRpbWVzdGFtcFtdO1xyXG4gIHdhdmVNZWFuRGlyZWN0aW9uOiBWYWx1ZVdpdGhUaW1lc3RhbXBbXTtcclxuICB3aW5kU3BlZWQ6IFZhbHVlV2l0aFRpbWVzdGFtcFtdO1xyXG4gIHdpbmREaXJlY3Rpb246IFZhbHVlV2l0aFRpbWVzdGFtcFtdO1xyXG4gIGJhcm9tZXRlclRvcDogVmFsdWVXaXRoVGltZXN0YW1wW107XHJcbiAgYmFyb21ldGVyQm90dG9tOiBWYWx1ZVdpdGhUaW1lc3RhbXBbXTtcclxuICBiYXJvbWV0cmljVG9wRGlmZjogVmFsdWVXaXRoVGltZXN0YW1wW107XHJcbiAgc3VyZmFjZVRlbXBlcmF0dXJlOiBWYWx1ZVdpdGhUaW1lc3RhbXBbXTtcclxuICBsYXRpdHVkZT86IFZhbHVlV2l0aFRpbWVzdGFtcFtdO1xyXG4gIGxvbmdpdHVkZT86IFZhbHVlV2l0aFRpbWVzdGFtcFtdO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TUE9UVEVSX0RBVEFfVkFMVUU6IFNwb3R0ZXJEYXRhID0ge1xyXG4gIHRvcFRlbXBlcmF0dXJlOiBbXSxcclxuICBib3R0b21UZW1wZXJhdHVyZTogW10sXHJcbiAgc2lnbmlmaWNhbnRXYXZlSGVpZ2h0OiBbXSxcclxuICB3YXZlTWVhblBlcmlvZDogW10sXHJcbiAgd2F2ZU1lYW5EaXJlY3Rpb246IFtdLFxyXG4gIHdpbmRTcGVlZDogW10sXHJcbiAgd2luZERpcmVjdGlvbjogW10sXHJcbiAgYmFyb21ldGVyVG9wOiBbXSxcclxuICBiYXJvbWV0ZXJCb3R0b206IFtdLFxyXG4gIGJhcm9tZXRyaWNUb3BEaWZmOiBbXSxcclxuICBzdXJmYWNlVGVtcGVyYXR1cmU6IFtdLFxyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIaW5kY2FzdFJlc3BvbnNlIHtcclxuICB2YXJpYWJsZUlEOiBzdHJpbmc7XHJcbiAgdmFyaWFibGVOYW1lOiBzdHJpbmc7XHJcbiAgZGF0YUNhdGVnb3J5OiBzdHJpbmc7XHJcbiAgcGh5c2ljYWxVbml0OiBzdHJpbmc7XHJcbiAgdmFsdWVzOiBWYWx1ZVdpdGhUaW1lc3RhbXBbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTb2ZhcldhdmVEYXRlUmVzcG9uc2Uge1xyXG4gIHNwb3R0ZXJJZDogc3RyaW5nO1xyXG4gIHdhdmVzOiB7XHJcbiAgICBzaWduaWZpY2FudFdhdmVIZWlnaHQ6IG51bWJlcjtcclxuICAgIHBlYWtQZXJpb2Q6IG51bWJlcjtcclxuICAgIG1lYW5QZXJpb2Q6IG51bWJlcjtcclxuICAgIHBlYWtEaXJlY3Rpb246IG51bWJlcjtcclxuICAgIHBlYWtEaXJlY3Rpb25hbFNwcmVhZDogbnVtYmVyO1xyXG4gICAgbWVhbkRpcmVjdGlvbjogbnVtYmVyO1xyXG4gICAgbWVhbkRpcmVjdGlvbmFsU3ByZWFkOiBudW1iZXI7XHJcbiAgICB0aW1lc3RhbXA6IHN0cmluZztcclxuICAgIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcclxuICB9W107XHJcbiAgd2luZDoge1xyXG4gICAgc3BlZWQ6IG51bWJlcjtcclxuICAgIGRpcmVjdGlvbjogbnVtYmVyO1xyXG4gICAgc2Vhc3VyZmFjZUlkOiBudW1iZXI7XHJcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgICB0aW1lc3RhbXA6IHN0cmluZztcclxuICB9W107XHJcbiAgc3VyZmFjZVRlbXA6IHtcclxuICAgIGRlZ3JlZXM6IG51bWJlcjtcclxuICAgIGxhdGl0dWRlOiBudW1iZXI7XHJcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcclxuICAgIHRpbWVzdGFtcDogc3RyaW5nO1xyXG4gIH1bXTtcclxuICBiYXJvbWV0ZXJEYXRhOiB7XHJcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgICB0aW1lc3RhbXA6IHN0cmluZztcclxuICAgIHVuaXRzOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogbnVtYmVyO1xyXG4gIH1bXTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEVNUFRZX1NPRkFSX1dBVkVfUkVTUE9OU0U6IFNvZmFyV2F2ZURhdGVSZXNwb25zZSA9IHtcclxuICBzcG90dGVySWQ6ICcnLFxyXG4gIHdhdmVzOiBbXSxcclxuICB3aW5kOiBbXSxcclxuICBzdXJmYWNlVGVtcDogW10sXHJcbiAgYmFyb21ldGVyRGF0YTogW10sXHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQTBDRTtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBQUFBLGNBQUEsR0FBQUUsQ0FBQTs7Ozs7Ozs7O0FBWldDLE9BQUEsQ0FBQUMsMEJBQTBCLEdBQWdCO0VBQ3JEQyxjQUFjLEVBQUUsRUFBRTtFQUNsQkMsaUJBQWlCLEVBQUUsRUFBRTtFQUNyQkMscUJBQXFCLEVBQUUsRUFBRTtFQUN6QkMsY0FBYyxFQUFFLEVBQUU7RUFDbEJDLGlCQUFpQixFQUFFLEVBQUU7RUFDckJDLFNBQVMsRUFBRSxFQUFFO0VBQ2JDLGFBQWEsRUFBRSxFQUFFO0VBQ2pCQyxZQUFZLEVBQUUsRUFBRTtFQUNoQkMsZUFBZSxFQUFFLEVBQUU7RUFDbkJDLGlCQUFpQixFQUFFLEVBQUU7RUFDckJDLGtCQUFrQixFQUFFO0NBQ3JCO0FBQUM7QUFBQWYsY0FBQSxHQUFBRSxDQUFBO0FBK0NXQyxPQUFBLENBQUFhLHlCQUF5QixHQUEwQjtFQUM5REMsU0FBUyxFQUFFLEVBQUU7RUFDYkMsS0FBSyxFQUFFLEVBQUU7RUFDVEMsSUFBSSxFQUFFLEVBQUU7RUFDUkMsV0FBVyxFQUFFLEVBQUU7RUFDZkMsYUFBYSxFQUFFO0NBQ2hCIn0=