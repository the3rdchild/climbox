{"file":"/home/user/climbox/packages/api/src/config/config.service.ts","mappings":";;;AAAA,6CAIyB;AAEzB,+CAAoD;AACpD,sGAAgG;AAChG,gHAAyG;AACzG,kEAGsC;AACtC,wDAA6C;AAC7C,oFAA2E;AAE3E,kFAAkF;AAClF,IAAI;IACF,6EAA6E;IAC7E,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;CAC5B;AAAC,WAAM;IACN,OAAO;CACR;AAED,MAAM,aAAa;IACjB,YAAoB,GAAwC;QAAxC,QAAG,GAAH,GAAG,CAAqC;QAe5D,YAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAfa,CAAC;IAExD,QAAQ,CAAC,GAAW,EAAE,cAAc,GAAG,IAAI;QACjD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,cAAc,EAAE;gBAClB,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,EAAE,CAAC,CAAC;aACtD;iBAAM;gBACL,OAAO,EAAE,CAAC;aACX;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAIM,YAAY,CAAC,IAAc;QAChC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,OAAO;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAEM,YAAY;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC9C,OAAO,IAAI,KAAK,aAAa,CAAC;IAChC,CAAC;IAED,kDAAkD;IAC3C,gBAAgB;QACrB,yBACK,6BAAiB,EACpB;IACJ,CAAC;IAED,kDAAkD;IAC3C,gBAAgB;QACrB,MAAM,MAAM,GAAG,IAAI,yBAAe,EAAE;aACjC,QAAQ,CAAC,4BAA4B,CAAC;aACtC,cAAc,CAAC,uCAAuC,CAAC;aACvD,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;aACvB,aAAa,EAAE;aACf,KAAK,EAAE,CAAC;QAEX,MAAM,eAAe,GAA2B;YAC9C,WAAW,EAAE;gBACX,+DAA4B;gBAC5B,sDAAwB;gBACxB,+BAAa;gBACb,0CAAwB;gBACxB,mBAAI;gBACJ,uCAAe;aAChB;SACF,CAAC;QAEF,+EAA+E;QAC/E,mEAAmE;QACnE,MAAM,aAAa,GAAyB;YAC1C,cAAc,EAAE;gBACd,OAAO,EAAE;oBACP,YAAY,EAAE;wBACZ,IAAI,EAAE,EAAE,aAAa,EAAE,EAAE,gBAAgB,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,EAAE;qBACjE;iBACF;aACF;SACF,CAAC;QAEF,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,aAAa,EAAE,CAAC;IACpD,CAAC;CACF;AAED,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAE5C,sCAAa","names":[],"sources":["/home/user/climbox/packages/api/src/config/config.service.ts"],"sourcesContent":["import {\r\n  DocumentBuilder,\r\n  SwaggerCustomOptions,\r\n  SwaggerDocumentOptions,\r\n} from '@nestjs/swagger';\r\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\r\nimport { dataSourceOptions } from '../../ormconfig';\r\nimport { UpdateSiteApplicationDto } from '../site-applications/dto/update-site-application.dto';\r\nimport { UpdateSiteWithApplicationDto } from '../site-applications/dto/update-site-with-application.dto';\r\nimport {\r\n  CreateSiteApplicationDto,\r\n  CreateSiteDto,\r\n} from '../sites/dto/create-site.dto';\r\nimport { Site } from '../sites/sites.entity';\r\nimport { TimeSeriesPoint } from '../time-series/dto/time-series-point.dto';\r\n\r\n// dotenv is a dev dependency, so conditionally import it (don't need it in Prod).\r\ntry {\r\n  // eslint-disable-next-line import/no-extraneous-dependencies, global-require\r\n  require('dotenv').config();\r\n} catch {\r\n  // Pass\r\n}\r\n\r\nclass ConfigService {\r\n  constructor(private env: { [k: string]: string | undefined }) {}\r\n\r\n  private getValue(key: string, throwOnMissing = true): string {\r\n    const value = this.env[key];\r\n    if (!value) {\r\n      if (throwOnMissing) {\r\n        throw new Error(`config error - missing env.${key}`);\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  API_URL = this.getValue('BACKEND_BASE_URL', true);\r\n\r\n  public ensureValues(keys: string[]) {\r\n    keys.forEach((k) => this.getValue(k, true));\r\n    return this;\r\n  }\r\n\r\n  public getPort() {\r\n    return this.getValue('PORT', true);\r\n  }\r\n\r\n  public isProduction() {\r\n    const mode = this.getValue('NODE_ENV', false);\r\n    return mode !== 'development';\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public getTypeOrmConfig(): TypeOrmModuleOptions {\r\n    return {\r\n      ...dataSourceOptions,\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  public getSwaggerConfig() {\r\n    const config = new DocumentBuilder()\r\n      .setTitle('Aqualink API documentation')\r\n      .setDescription('The Aqualink public API documentation')\r\n      .addServer(this.API_URL)\r\n      .addBearerAuth()\r\n      .build();\r\n\r\n    const documentOptions: SwaggerDocumentOptions = {\r\n      extraModels: [\r\n        UpdateSiteWithApplicationDto,\r\n        UpdateSiteApplicationDto,\r\n        CreateSiteDto,\r\n        CreateSiteApplicationDto,\r\n        Site,\r\n        TimeSeriesPoint,\r\n      ],\r\n    };\r\n\r\n    // Disable 'try it out' option as it will only add extra workload to the server\r\n    // Reference: https://github.com/swagger-api/swagger-ui/issues/3725\r\n    const customOptions: SwaggerCustomOptions = {\r\n      swaggerOptions: {\r\n        plugins: {\r\n          statePlugins: {\r\n            spec: { wrapSelectors: { allowTryItOutFor: () => () => false } },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    return { config, documentOptions, customOptions };\r\n  }\r\n}\r\n\r\nconst configService = new ConfigService(process.env);\r\n\r\nexport { configService };\r\n"],"version":3}