88684a48bdf78bf5b556eb93c0b7c924
"use strict";

/* istanbul ignore next */
function cov_15ow0hwg4() {
  var path = "/home/user/climbox/packages/api/src/utils/csv-utils.ts";
  var hash = "75caaa416b0218259a131df3d6d0516d244d5778";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/user/climbox/packages/api/src/utils/csv-utils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "13": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "14": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 30
        }
      },
      "15": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 44
        }
      },
      "16": {
        start: {
          line: 17,
          column: 13
        },
        end: {
          line: 17,
          column: 26
        }
      },
      "17": {
        start: {
          line: 18,
          column: 16
        },
        end: {
          line: 18,
          column: 32
        }
      },
      "18": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "19": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 68,
          column: 7
        }
      },
      "20": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 9
        }
      },
      "21": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "22": {
        start: {
          line: 27,
          column: 24
        },
        end: {
          line: 27,
          column: 78
        }
      },
      "23": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 76
        }
      },
      "24": {
        start: {
          line: 29,
          column: 31
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "25": {
        start: {
          line: 30,
          column: 29
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "26": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 32,
          column: 90
        }
      },
      "27": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 90
        }
      },
      "28": {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "29": {
        start: {
          line: 34,
          column: 25
        },
        end: {
          line: 34,
          column: 78
        }
      },
      "30": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 54
        }
      },
      "31": {
        start: {
          line: 37,
          column: 23
        },
        end: {
          line: 37,
          column: 48
        }
      },
      "32": {
        start: {
          line: 38,
          column: 29
        },
        end: {
          line: 38,
          column: 106
        }
      },
      "33": {
        start: {
          line: 39,
          column: 19
        },
        end: {
          line: 39,
          column: 56
        }
      },
      "34": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "35": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "36": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 26
        }
      },
      "37": {
        start: {
          line: 43,
          column: 30
        },
        end: {
          line: 43,
          column: 37
        }
      },
      "38": {
        start: {
          line: 46,
          column: 29
        },
        end: {
          line: 46,
          column: 96
        }
      },
      "39": {
        start: {
          line: 47,
          column: 33
        },
        end: {
          line: 47,
          column: 79
        }
      },
      "40": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 50
        }
      },
      "41": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 36
        }
      },
      "42": {
        start: {
          line: 51,
          column: 31
        },
        end: {
          line: 51,
          column: 71
        }
      },
      "43": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 15
        }
      },
      "44": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "45": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 33
        }
      },
      "46": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "47": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 51
        }
      },
      "48": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 33
        }
      },
      "49": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 47
        }
      },
      "50": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 35
        }
      },
      "51": {
        start: {
          line: 70,
          column: 0
        },
        end: {
          line: 70,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "ReturnCSV",
        decl: {
          start: {
            line: 20,
            column: 9
          },
          end: {
            line: 20,
            column: 18
          }
        },
        loc: {
          start: {
            line: 20,
            column: 68
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 21,
            column: 43
          },
          end: {
            line: 21,
            column: 44
          }
        },
        loc: {
          start: {
            line: 21,
            column: 56
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 21
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 30,
            column: 29
          },
          end: {
            line: 30,
            column: 30
          }
        },
        loc: {
          start: {
            line: 30,
            column: 44
          },
          end: {
            line: 36,
            column: 9
          }
        },
        line: 30
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 59,
            column: 33
          },
          end: {
            line: 59,
            column: 34
          }
        },
        loc: {
          start: {
            line: 59,
            column: 39
          },
          end: {
            line: 61,
            column: 13
          }
        },
        line: 59
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 26,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "6": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 32,
            column: 90
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 32,
            column: 90
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "/home/user/climbox/packages/api/src/utils/csv-utils.ts",
      mappings: "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",
      names: [],
      sources: ["/home/user/climbox/packages/api/src/utils/csv-utils.ts"],
      sourcesContent: ["import { join } from 'path';\r\n// https://github.com/adaltas/node-csv/issues/372\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { stringify } from 'csv-stringify/sync';\r\nimport {\r\n  closeSync,\r\n  createReadStream,\r\n  openSync,\r\n  unlinkSync,\r\n  writeSync,\r\n} from 'fs';\r\nimport type { Response } from 'express';\r\nimport { DateTime } from 'luxon';\r\nimport { randomBytes } from 'crypto';\r\n\r\ninterface ReturnCSVProps {\r\n  res: Response;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  getRows: (startDate: Date, endDate: Date) => Promise<any>;\r\n  filename: string;\r\n}\r\n\r\nexport async function ReturnCSV({\r\n  res,\r\n  startDate,\r\n  endDate,\r\n  getRows,\r\n  filename,\r\n}: ReturnCSVProps) {\r\n  // Make sure filename contains only valid ascii characters and not \" or <\r\n  // for using in 'Content-Disposition' header\r\n  if (!/^(?!.*[\"<])[\\x20-\\x7F]*$/.test(filename)) {\r\n    throw new Error('Invalid filename');\r\n  }\r\n\r\n  const minDate = DateTime.fromJSDate(startDate).startOf('hour');\r\n  const maxDate = DateTime.fromJSDate(endDate).startOf('hour');\r\n\r\n  const monthChunkSize = 6;\r\n\r\n  const createChunks = (\r\n    curr: DateTime,\r\n    acc: { start: DateTime; end: DateTime }[],\r\n  ): { start: DateTime; end: DateTime }[] => {\r\n    if (curr.diff(minDate, 'months').months < monthChunkSize)\r\n      return [...acc, { end: curr.minus({ milliseconds: 1 }), start: minDate }];\r\n\r\n    const next = curr.minus({ months: monthChunkSize });\r\n    const item = { end: curr.minus({ milliseconds: 1 }), start: next };\r\n\r\n    return createChunks(next, [...acc, item]);\r\n  };\r\n\r\n  const chunks = createChunks(maxDate, []);\r\n\r\n  const tempFileName = join(process.cwd(), randomBytes(8).toString('hex'));\r\n\r\n  const fd = openSync(tempFileName, 'w');\r\n\r\n  try {\r\n    // eslint-disable-next-line fp/no-mutation, no-plusplus\r\n    for (let i = 0; i < chunks.length; i++) {\r\n      const first = i === 0;\r\n\r\n      // we want this not to run in parallel, that's why it is ok here to disable no-await-in-loop\r\n      // eslint-disable-next-line no-await-in-loop\r\n      const rows = await getRows(\r\n        chunks[i].start.toJSDate(),\r\n        chunks[i].end.toJSDate(),\r\n      );\r\n\r\n      const csvLines = stringify(rows, { header: first });\r\n\r\n      writeSync(fd, csvLines);\r\n    }\r\n\r\n    closeSync(fd);\r\n\r\n    const readStream = createReadStream(tempFileName);\r\n\r\n    res.set({\r\n      'Content-Disposition': `attachment; filename=${filename}`,\r\n    });\r\n\r\n    res.set({\r\n      'Access-Control-Expose-Headers': 'Content-Disposition',\r\n    });\r\n\r\n    readStream.pipe(res);\r\n\r\n    readStream.on('end', () => {\r\n      unlinkSync(tempFileName);\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    unlinkSync(tempFileName);\r\n    res.status(500).send();\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "75caaa416b0218259a131df3d6d0516d244d5778"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15ow0hwg4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15ow0hwg4();
var __awaiter =
/* istanbul ignore next */
(cov_15ow0hwg4().s[0]++,
/* istanbul ignore next */
(cov_15ow0hwg4().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_15ow0hwg4().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_15ow0hwg4().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_15ow0hwg4().f[0]++;
  function adopt(value) {
    /* istanbul ignore next */
    cov_15ow0hwg4().f[1]++;
    cov_15ow0hwg4().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_15ow0hwg4().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_15ow0hwg4().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_15ow0hwg4().f[2]++;
      cov_15ow0hwg4().s[2]++;
      resolve(value);
    }));
  }
  /* istanbul ignore next */
  cov_15ow0hwg4().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_15ow0hwg4().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_15ow0hwg4().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_15ow0hwg4().f[3]++;
    function fulfilled(value) {
      /* istanbul ignore next */
      cov_15ow0hwg4().f[4]++;
      cov_15ow0hwg4().s[4]++;
      try {
        /* istanbul ignore next */
        cov_15ow0hwg4().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_15ow0hwg4().s[6]++;
        reject(e);
      }
    }
    function rejected(value) {
      /* istanbul ignore next */
      cov_15ow0hwg4().f[5]++;
      cov_15ow0hwg4().s[7]++;
      try {
        /* istanbul ignore next */
        cov_15ow0hwg4().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_15ow0hwg4().s[9]++;
        reject(e);
      }
    }
    function step(result) {
      /* istanbul ignore next */
      cov_15ow0hwg4().f[6]++;
      cov_15ow0hwg4().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_15ow0hwg4().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_15ow0hwg4().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }
    /* istanbul ignore next */
    cov_15ow0hwg4().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_15ow0hwg4().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_15ow0hwg4().b[4][1]++, []))).next());
  });
}));
/* istanbul ignore next */
cov_15ow0hwg4().s[12]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_15ow0hwg4().s[13]++;
exports.ReturnCSV = void 0;
const path_1 =
/* istanbul ignore next */
(cov_15ow0hwg4().s[14]++, require("path"));
// https://github.com/adaltas/node-csv/issues/372
// eslint-disable-next-line import/no-unresolved
const sync_1 =
/* istanbul ignore next */
(cov_15ow0hwg4().s[15]++, require("csv-stringify/sync"));
const fs_1 =
/* istanbul ignore next */
(cov_15ow0hwg4().s[16]++, require("fs"));
const luxon_1 =
/* istanbul ignore next */
(cov_15ow0hwg4().s[17]++, require("luxon"));
const crypto_1 =
/* istanbul ignore next */
(cov_15ow0hwg4().s[18]++, require("crypto"));
function ReturnCSV({
  res,
  startDate,
  endDate,
  getRows,
  filename
}) {
  /* istanbul ignore next */
  cov_15ow0hwg4().f[7]++;
  cov_15ow0hwg4().s[19]++;
  return __awaiter(this, void 0, void 0, function* () {
    /* istanbul ignore next */
    cov_15ow0hwg4().f[8]++;
    cov_15ow0hwg4().s[20]++;
    // Make sure filename contains only valid ascii characters and not " or <
    // for using in 'Content-Disposition' header
    if (!/^(?!.*["<])[\x20-\x7F]*$/.test(filename)) {
      /* istanbul ignore next */
      cov_15ow0hwg4().b[5][0]++;
      cov_15ow0hwg4().s[21]++;
      throw new Error('Invalid filename');
    } else
    /* istanbul ignore next */
    {
      cov_15ow0hwg4().b[5][1]++;
    }
    const minDate =
    /* istanbul ignore next */
    (cov_15ow0hwg4().s[22]++, luxon_1.DateTime.fromJSDate(startDate).startOf('hour'));
    const maxDate =
    /* istanbul ignore next */
    (cov_15ow0hwg4().s[23]++, luxon_1.DateTime.fromJSDate(endDate).startOf('hour'));
    const monthChunkSize =
    /* istanbul ignore next */
    (cov_15ow0hwg4().s[24]++, 6);
    /* istanbul ignore next */
    cov_15ow0hwg4().s[25]++;
    const createChunks = (curr, acc) => {
      /* istanbul ignore next */
      cov_15ow0hwg4().f[9]++;
      cov_15ow0hwg4().s[26]++;
      if (curr.diff(minDate, 'months').months < monthChunkSize) {
        /* istanbul ignore next */
        cov_15ow0hwg4().b[6][0]++;
        cov_15ow0hwg4().s[27]++;
        return [...acc, {
          end: curr.minus({
            milliseconds: 1
          }),
          start: minDate
        }];
      } else
      /* istanbul ignore next */
      {
        cov_15ow0hwg4().b[6][1]++;
      }
      const next =
      /* istanbul ignore next */
      (cov_15ow0hwg4().s[28]++, curr.minus({
        months: monthChunkSize
      }));
      const item =
      /* istanbul ignore next */
      (cov_15ow0hwg4().s[29]++, {
        end: curr.minus({
          milliseconds: 1
        }),
        start: next
      });
      /* istanbul ignore next */
      cov_15ow0hwg4().s[30]++;
      return createChunks(next, [...acc, item]);
    };
    const chunks =
    /* istanbul ignore next */
    (cov_15ow0hwg4().s[31]++, createChunks(maxDate, []));
    const tempFileName =
    /* istanbul ignore next */
    (cov_15ow0hwg4().s[32]++, (0, path_1.join)(process.cwd(), (0, crypto_1.randomBytes)(8).toString('hex')));
    const fd =
    /* istanbul ignore next */
    (cov_15ow0hwg4().s[33]++, (0, fs_1.openSync)(tempFileName, 'w'));
    /* istanbul ignore next */
    cov_15ow0hwg4().s[34]++;
    try {
      /* istanbul ignore next */
      cov_15ow0hwg4().s[35]++;
      // eslint-disable-next-line fp/no-mutation, no-plusplus
      for (let i =
      /* istanbul ignore next */
      (cov_15ow0hwg4().s[36]++, 0); i < chunks.length; i++) {
        const first =
        /* istanbul ignore next */
        (cov_15ow0hwg4().s[37]++, i === 0);
        // we want this not to run in parallel, that's why it is ok here to disable no-await-in-loop
        // eslint-disable-next-line no-await-in-loop
        const rows =
        /* istanbul ignore next */
        (cov_15ow0hwg4().s[38]++, yield getRows(chunks[i].start.toJSDate(), chunks[i].end.toJSDate()));
        const csvLines =
        /* istanbul ignore next */
        (cov_15ow0hwg4().s[39]++, (0, sync_1.stringify)(rows, {
          header: first
        }));
        /* istanbul ignore next */
        cov_15ow0hwg4().s[40]++;
        (0, fs_1.writeSync)(fd, csvLines);
      }
      /* istanbul ignore next */
      cov_15ow0hwg4().s[41]++;
      (0, fs_1.closeSync)(fd);
      const readStream =
      /* istanbul ignore next */
      (cov_15ow0hwg4().s[42]++, (0, fs_1.createReadStream)(tempFileName));
      /* istanbul ignore next */
      cov_15ow0hwg4().s[43]++;
      res.set({
        'Content-Disposition': `attachment; filename=${filename}`
      });
      /* istanbul ignore next */
      cov_15ow0hwg4().s[44]++;
      res.set({
        'Access-Control-Expose-Headers': 'Content-Disposition'
      });
      /* istanbul ignore next */
      cov_15ow0hwg4().s[45]++;
      readStream.pipe(res);
      /* istanbul ignore next */
      cov_15ow0hwg4().s[46]++;
      readStream.on('end', () => {
        /* istanbul ignore next */
        cov_15ow0hwg4().f[10]++;
        cov_15ow0hwg4().s[47]++;
        (0, fs_1.unlinkSync)(tempFileName);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_15ow0hwg4().s[48]++;
      console.error(error);
      /* istanbul ignore next */
      cov_15ow0hwg4().s[49]++;
      (0, fs_1.unlinkSync)(tempFileName);
      /* istanbul ignore next */
      cov_15ow0hwg4().s[50]++;
      res.status(500).send();
    }
  });
}
/* istanbul ignore next */
cov_15ow0hwg4().s[51]++;
exports.ReturnCSV = ReturnCSV;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,