51eb3b21b9e9e16069ed2cc36314a7ba
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataSourceOptions = void 0;
const typeorm_naming_strategies_1 = require("typeorm-naming-strategies");
const path_1 = require("path");
const typeorm_1 = require("typeorm");
const constants_1 = require("./src/utils/constants");
// If we have a DATABASE_URL, use that
// If the node_env is set to test then use the TEST_DATABASE_URL instead.
// If no TEST_DATABASE_URL is defined then use the same connection as on development but use database TEST_POSTGRES_DATABASE
const prefix = constants_1.isTestEnv ? 'TEST_' : '';
const databaseUrl = process.env[`${prefix}DATABASE_URL`];
const dataSourceInfo = databaseUrl
    ? { url: databaseUrl }
    : Object.assign(Object.assign({ host: process.env.POSTGRES_HOST || 'localhost', port: (process.env.POSTGRES_PORT &&
            parseInt(process.env.POSTGRES_PORT, 10)) ||
            5432, database: process.env[`${prefix}POSTGRES_DATABASE`] || 'postgres' }, (process.env.POSTGRES_USER && {
        username: process.env.POSTGRES_USER,
    })), (process.env.POSTGRES_PASSWORD && {
        password: process.env.POSTGRES_PASSWORD,
    }));
exports.dataSourceOptions = Object.assign(Object.assign({ type: 'postgres' }, dataSourceInfo), { 
    // We don't want to auto-synchronize production data - we should deliberately run migrations.
    synchronize: false, logging: false, logger: 'advanced-console', namingStrategy: new typeorm_naming_strategies_1.SnakeNamingStrategy(), entities: [
        // Needed to get a TS context on entity imports.
        // See
        // https://stackoverflow.com/questions/59435293/typeorm-entity-in-nestjs-cannot-use-import-statement-outside-a-module
        (0, path_1.join)(__dirname, 'src/**', '*.entity.ts'),
        (0, path_1.join)(__dirname, 'src/**', '*.entity.js'),
    ], migrations: [(0, path_1.join)(__dirname, 'migration/**', '*.ts')] });
exports.default = new typeorm_1.DataSource(exports.dataSourceOptions);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdXNlci9jbGltYm94L3BhY2thZ2VzL2FwaS9vcm1jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUVBQWdFO0FBQ2hFLCtCQUE0QjtBQUM1QixxQ0FBcUM7QUFFckMscURBQWtEO0FBRWxELHNDQUFzQztBQUN0Qyx5RUFBeUU7QUFDekUsNEhBQTRIO0FBQzVILE1BQU0sTUFBTSxHQUFHLHFCQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLGNBQWMsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sY0FBYyxHQUFHLFdBQVc7SUFDaEMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRTtJQUN0QixDQUFDLCtCQUNHLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSSxXQUFXLEVBQzlDLElBQUksRUFDRixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYTtZQUN4QixRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUMsSUFBSSxFQUNOLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxJQUFJLFVBQVUsSUFDOUQsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsSUFBSTtRQUMvQixRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhO0tBQ3BDLENBQUMsR0FDQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUk7UUFDbkMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCO0tBQ3hDLENBQUMsQ0FDSCxDQUFDO0FBRU8sUUFBQSxpQkFBaUIsaUNBQzVCLElBQUksRUFBRSxVQUFVLElBQ2IsY0FBYztJQUNqQiw2RkFBNkY7SUFDN0YsV0FBVyxFQUFFLEtBQUssRUFDbEIsT0FBTyxFQUFFLEtBQUssRUFDZCxNQUFNLEVBQUUsa0JBQWtCLEVBQzFCLGNBQWMsRUFBRSxJQUFJLCtDQUFtQixFQUFFLEVBQ3pDLFFBQVEsRUFBRTtRQUNSLGdEQUFnRDtRQUNoRCxNQUFNO1FBQ04scUhBQXFIO1FBQ3JILElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDO1FBQ3hDLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDO0tBQ3pDLEVBQ0QsVUFBVSxFQUFFLENBQUMsSUFBQSxXQUFJLEVBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxJQUNyRDtBQUVGLGtCQUFlLElBQUksb0JBQVUsQ0FBQyx5QkFBaUIsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvY2xpbWJveC9wYWNrYWdlcy9hcGkvb3JtY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNuYWtlTmFtaW5nU3RyYXRlZ3kgfSBmcm9tICd0eXBlb3JtLW5hbWluZy1zdHJhdGVnaWVzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAndHlwZW9ybSc7XHJcbmltcG9ydCB7IFBvc3RncmVzQ29ubmVjdGlvbk9wdGlvbnMgfSBmcm9tICd0eXBlb3JtL2RyaXZlci9wb3N0Z3Jlcy9Qb3N0Z3Jlc0Nvbm5lY3Rpb25PcHRpb25zJztcclxuaW1wb3J0IHsgaXNUZXN0RW52IH0gZnJvbSAnLi9zcmMvdXRpbHMvY29uc3RhbnRzJztcclxuXHJcbi8vIElmIHdlIGhhdmUgYSBEQVRBQkFTRV9VUkwsIHVzZSB0aGF0XHJcbi8vIElmIHRoZSBub2RlX2VudiBpcyBzZXQgdG8gdGVzdCB0aGVuIHVzZSB0aGUgVEVTVF9EQVRBQkFTRV9VUkwgaW5zdGVhZC5cclxuLy8gSWYgbm8gVEVTVF9EQVRBQkFTRV9VUkwgaXMgZGVmaW5lZCB0aGVuIHVzZSB0aGUgc2FtZSBjb25uZWN0aW9uIGFzIG9uIGRldmVsb3BtZW50IGJ1dCB1c2UgZGF0YWJhc2UgVEVTVF9QT1NUR1JFU19EQVRBQkFTRVxyXG5jb25zdCBwcmVmaXggPSBpc1Rlc3RFbnYgPyAnVEVTVF8nIDogJyc7XHJcbmNvbnN0IGRhdGFiYXNlVXJsID0gcHJvY2Vzcy5lbnZbYCR7cHJlZml4fURBVEFCQVNFX1VSTGBdO1xyXG5jb25zdCBkYXRhU291cmNlSW5mbyA9IGRhdGFiYXNlVXJsXHJcbiAgPyB7IHVybDogZGF0YWJhc2VVcmwgfVxyXG4gIDoge1xyXG4gICAgICBob3N0OiBwcm9jZXNzLmVudi5QT1NUR1JFU19IT1NUIHx8ICdsb2NhbGhvc3QnLFxyXG4gICAgICBwb3J0OlxyXG4gICAgICAgIChwcm9jZXNzLmVudi5QT1NUR1JFU19QT1JUICYmXHJcbiAgICAgICAgICBwYXJzZUludChwcm9jZXNzLmVudi5QT1NUR1JFU19QT1JULCAxMCkpIHx8XHJcbiAgICAgICAgNTQzMixcclxuICAgICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52W2Ake3ByZWZpeH1QT1NUR1JFU19EQVRBQkFTRWBdIHx8ICdwb3N0Z3JlcycsXHJcbiAgICAgIC4uLihwcm9jZXNzLmVudi5QT1NUR1JFU19VU0VSICYmIHtcclxuICAgICAgICB1c2VybmFtZTogcHJvY2Vzcy5lbnYuUE9TVEdSRVNfVVNFUixcclxuICAgICAgfSksXHJcbiAgICAgIC4uLihwcm9jZXNzLmVudi5QT1NUR1JFU19QQVNTV09SRCAmJiB7XHJcbiAgICAgICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LlBPU1RHUkVTX1BBU1NXT1JELFxyXG4gICAgICB9KSxcclxuICAgIH07XHJcblxyXG5leHBvcnQgY29uc3QgZGF0YVNvdXJjZU9wdGlvbnM6IFBvc3RncmVzQ29ubmVjdGlvbk9wdGlvbnMgPSB7XHJcbiAgdHlwZTogJ3Bvc3RncmVzJyxcclxuICAuLi5kYXRhU291cmNlSW5mbyxcclxuICAvLyBXZSBkb24ndCB3YW50IHRvIGF1dG8tc3luY2hyb25pemUgcHJvZHVjdGlvbiBkYXRhIC0gd2Ugc2hvdWxkIGRlbGliZXJhdGVseSBydW4gbWlncmF0aW9ucy5cclxuICBzeW5jaHJvbml6ZTogZmFsc2UsXHJcbiAgbG9nZ2luZzogZmFsc2UsXHJcbiAgbG9nZ2VyOiAnYWR2YW5jZWQtY29uc29sZScsXHJcbiAgbmFtaW5nU3RyYXRlZ3k6IG5ldyBTbmFrZU5hbWluZ1N0cmF0ZWd5KCksXHJcbiAgZW50aXRpZXM6IFtcclxuICAgIC8vIE5lZWRlZCB0byBnZXQgYSBUUyBjb250ZXh0IG9uIGVudGl0eSBpbXBvcnRzLlxyXG4gICAgLy8gU2VlXHJcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81OTQzNTI5My90eXBlb3JtLWVudGl0eS1pbi1uZXN0anMtY2Fubm90LXVzZS1pbXBvcnQtc3RhdGVtZW50LW91dHNpZGUtYS1tb2R1bGVcclxuICAgIGpvaW4oX19kaXJuYW1lLCAnc3JjLyoqJywgJyouZW50aXR5LnRzJyksXHJcbiAgICBqb2luKF9fZGlybmFtZSwgJ3NyYy8qKicsICcqLmVudGl0eS5qcycpLFxyXG4gIF0sXHJcbiAgbWlncmF0aW9uczogW2pvaW4oX19kaXJuYW1lLCAnbWlncmF0aW9uLyoqJywgJyoudHMnKV0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgRGF0YVNvdXJjZShkYXRhU291cmNlT3B0aW9ucyk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==