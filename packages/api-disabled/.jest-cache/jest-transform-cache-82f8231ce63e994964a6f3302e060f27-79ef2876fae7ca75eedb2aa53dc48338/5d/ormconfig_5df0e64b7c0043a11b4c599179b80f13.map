{"file":"/home/user/climbox/packages/api/ormconfig.ts","mappings":";;;AAAA,yEAAgE;AAChE,+BAA4B;AAC5B,qCAAqC;AAErC,qDAAkD;AAElD,sCAAsC;AACtC,yEAAyE;AACzE,4HAA4H;AAC5H,MAAM,MAAM,GAAG,qBAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;AACxC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,cAAc,CAAC,CAAC;AACzD,MAAM,cAAc,GAAG,WAAW;IAChC,CAAC,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE;IACtB,CAAC,+BACG,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,WAAW,EAC9C,IAAI,EACF,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa;YACxB,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;YAC1C,IAAI,EACN,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,mBAAmB,CAAC,IAAI,UAAU,IAC9D,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI;QAC/B,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa;KACpC,CAAC,GACC,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI;QACnC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;KACxC,CAAC,CACH,CAAC;AAEO,QAAA,iBAAiB,iCAC5B,IAAI,EAAE,UAAU,IACb,cAAc;IACjB,6FAA6F;IAC7F,WAAW,EAAE,KAAK,EAClB,OAAO,EAAE,KAAK,EACd,MAAM,EAAE,kBAAkB,EAC1B,cAAc,EAAE,IAAI,+CAAmB,EAAE,EACzC,QAAQ,EAAE;QACR,gDAAgD;QAChD,MAAM;QACN,qHAAqH;QACrH,IAAA,WAAI,EAAC,SAAS,EAAE,QAAQ,EAAE,aAAa,CAAC;QACxC,IAAA,WAAI,EAAC,SAAS,EAAE,QAAQ,EAAE,aAAa,CAAC;KACzC,EACD,UAAU,EAAE,CAAC,IAAA,WAAI,EAAC,SAAS,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC,IACrD;AAEF,kBAAe,IAAI,oBAAU,CAAC,yBAAiB,CAAC,CAAC","names":[],"sources":["/home/user/climbox/packages/api/ormconfig.ts"],"sourcesContent":["import { SnakeNamingStrategy } from 'typeorm-naming-strategies';\r\nimport { join } from 'path';\r\nimport { DataSource } from 'typeorm';\r\nimport { PostgresConnectionOptions } from 'typeorm/driver/postgres/PostgresConnectionOptions';\r\nimport { isTestEnv } from './src/utils/constants';\r\n\r\n// If we have a DATABASE_URL, use that\r\n// If the node_env is set to test then use the TEST_DATABASE_URL instead.\r\n// If no TEST_DATABASE_URL is defined then use the same connection as on development but use database TEST_POSTGRES_DATABASE\r\nconst prefix = isTestEnv ? 'TEST_' : '';\r\nconst databaseUrl = process.env[`${prefix}DATABASE_URL`];\r\nconst dataSourceInfo = databaseUrl\r\n  ? { url: databaseUrl }\r\n  : {\r\n      host: process.env.POSTGRES_HOST || 'localhost',\r\n      port:\r\n        (process.env.POSTGRES_PORT &&\r\n          parseInt(process.env.POSTGRES_PORT, 10)) ||\r\n        5432,\r\n      database: process.env[`${prefix}POSTGRES_DATABASE`] || 'postgres',\r\n      ...(process.env.POSTGRES_USER && {\r\n        username: process.env.POSTGRES_USER,\r\n      }),\r\n      ...(process.env.POSTGRES_PASSWORD && {\r\n        password: process.env.POSTGRES_PASSWORD,\r\n      }),\r\n    };\r\n\r\nexport const dataSourceOptions: PostgresConnectionOptions = {\r\n  type: 'postgres',\r\n  ...dataSourceInfo,\r\n  // We don't want to auto-synchronize production data - we should deliberately run migrations.\r\n  synchronize: false,\r\n  logging: false,\r\n  logger: 'advanced-console',\r\n  namingStrategy: new SnakeNamingStrategy(),\r\n  entities: [\r\n    // Needed to get a TS context on entity imports.\r\n    // See\r\n    // https://stackoverflow.com/questions/59435293/typeorm-entity-in-nestjs-cannot-use-import-statement-outside-a-module\r\n    join(__dirname, 'src/**', '*.entity.ts'),\r\n    join(__dirname, 'src/**', '*.entity.js'),\r\n  ],\r\n  migrations: [join(__dirname, 'migration/**', '*.ts')],\r\n};\r\n\r\nexport default new DataSource(dataSourceOptions);\r\n"],"version":3}