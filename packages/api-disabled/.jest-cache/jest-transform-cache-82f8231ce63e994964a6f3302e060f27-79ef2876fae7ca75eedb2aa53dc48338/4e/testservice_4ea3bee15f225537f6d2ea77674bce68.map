{"file":"/home/user/climbox/packages/api/test/test.service.ts","mappings":"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","names":[],"sources":["/home/user/climbox/packages/api/test/test.service.ts"],"sourcesContent":["import { INestApplication } from '@nestjs/common';\r\nimport { Test, TestingModule } from '@nestjs/testing';\r\nimport { DataSource } from 'typeorm';\r\nimport { Point } from 'geojson';\r\nimport Bluebird from 'bluebird';\r\nimport { AppModule } from '../src/app.module';\r\nimport { User } from '../src/users/users.entity';\r\nimport { Site } from '../src/sites/sites.entity';\r\nimport { SiteSurveyPoint } from '../src/site-survey-points/site-survey-points.entity';\r\nimport { GlobalValidationPipe } from '../src/validations/global-validation.pipe';\r\nimport { SiteApplication } from '../src/site-applications/site-applications.entity';\r\nimport { Sources } from '../src/sites/sources.entity';\r\nimport { TimeSeries } from '../src/time-series/time-series.entity';\r\nimport { Collection } from '../src/collections/collections.entity';\r\nimport { DailyData } from '../src/sites/daily-data.entity';\r\nimport { Region } from '../src/regions/regions.entity';\r\nimport { Survey } from '../src/surveys/surveys.entity';\r\nimport { HistoricalMonthlyMean } from '../src/sites/historical-monthly-mean.entity';\r\nimport { SurveyMedia } from '../src/surveys/survey-media.entity';\r\nimport { ExclusionDates } from '../src/sites/exclusion-dates.entity';\r\nimport { getHistoricalMonthlyMeans } from '../src/utils/temperature';\r\nimport { users } from './mock/user.mock';\r\nimport { sites } from './mock/site.mock';\r\nimport { surveyPoints } from './mock/survey-point.mock';\r\nimport { siteApplications } from './mock/site-application.mock';\r\nimport { sources } from './mock/source.mock';\r\nimport { timeSeries } from './mock/time-series.mock';\r\nimport { collections } from './mock/collection.mock';\r\nimport { dailyData } from './mock/daily-data.mock';\r\nimport { surveys } from './mock/surveys.mock';\r\nimport { surveyMedia } from './mock/survey-media.mock';\r\n\r\nexport class TestService {\r\n  private static instance: TestService | null = null;\r\n  private app: INestApplication | null = null;\r\n\r\n  private constructor() {}\r\n\r\n  private async initializeApp() {\r\n    const moduleFixture: TestingModule = await Test.createTestingModule({\r\n      imports: [AppModule],\r\n    }).compile();\r\n\r\n    this.app = moduleFixture.createNestApplication();\r\n\r\n    await this.app.init();\r\n\r\n    this.app.useGlobalPipes(\r\n      new GlobalValidationPipe({\r\n        transform: true,\r\n        skipTransformIds: ['appId'],\r\n      }),\r\n    );\r\n\r\n    const connection = this.app.get(DataSource);\r\n    try {\r\n      // Clean up database\r\n      await this.cleanAllEntities(connection);\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.log('Clean up failed');\r\n      throw err;\r\n    }\r\n\r\n    try {\r\n      // Make sure database is up-to-date\r\n      await connection.runMigrations({ transaction: 'each' });\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.log('Migrations failed to run');\r\n      throw err;\r\n    }\r\n\r\n    try {\r\n      // Load mock entities\r\n      await this.loadMocks(connection);\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.log('Mocks failed to load');\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  private async loadMocks(connection: DataSource) {\r\n    await connection.getRepository(User).save(users);\r\n    await connection.getRepository(Site).save(sites);\r\n    await connection.getRepository(SiteSurveyPoint).save(surveyPoints);\r\n    await connection.getRepository(SiteApplication).save(siteApplications);\r\n    await connection.getRepository(Sources).save(sources);\r\n    await connection.getRepository(TimeSeries).save(timeSeries);\r\n    await connection.query('REFRESH MATERIALIZED VIEW latest_data');\r\n    await connection.getRepository(Collection).save(collections);\r\n    await connection.getRepository(DailyData).save(dailyData);\r\n    await connection.getRepository(Survey).save(surveys);\r\n    await connection.getRepository(SurveyMedia).save(surveyMedia);\r\n\r\n    await Bluebird.map(sites, async (site) => {\r\n      const [longitude, latitude] = (site.polygon as Point).coordinates;\r\n      const historicalMonthlyMean = await getHistoricalMonthlyMeans(\r\n        longitude,\r\n        latitude,\r\n      );\r\n\r\n      return Bluebird.map(historicalMonthlyMean, (hmm) => {\r\n        return connection.getRepository(HistoricalMonthlyMean).save({\r\n          site,\r\n          month: hmm.month,\r\n          temperature: hmm.temperature,\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public static getInstance() {\r\n    this.instance = this.instance || new TestService();\r\n    return this.instance;\r\n  }\r\n\r\n  public async getApp() {\r\n    if (!this.app) {\r\n      await this.initializeApp();\r\n    }\r\n\r\n    return this.app!;\r\n  }\r\n\r\n  public async getDataSource() {\r\n    if (!this.app) {\r\n      await this.initializeApp();\r\n    }\r\n\r\n    return this.app!.get(DataSource);\r\n  }\r\n\r\n  public cleanUpApp() {\r\n    if (!this.app) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this.app.close();\r\n  }\r\n\r\n  public async cleanAllEntities(connection: DataSource) {\r\n    await connection.getRepository(TimeSeries).delete({});\r\n    await connection.getRepository(Sources).delete({});\r\n    await connection.getRepository(Collection).delete({});\r\n    await connection.getRepository(Region).delete({});\r\n    await connection.getRepository(SiteApplication).delete({});\r\n    await connection.getRepository(SiteSurveyPoint).delete({});\r\n    await connection.getRepository(DailyData).delete({});\r\n    await connection.getRepository(ExclusionDates).delete({});\r\n    await connection.getRepository(Survey).delete({});\r\n    await connection.getRepository(SurveyMedia).delete({});\r\n    await connection.getRepository(HistoricalMonthlyMean).delete({});\r\n    await connection.getRepository(Site).delete({});\r\n    await connection.getRepository(User).delete({});\r\n  }\r\n}\r\n"],"version":3}