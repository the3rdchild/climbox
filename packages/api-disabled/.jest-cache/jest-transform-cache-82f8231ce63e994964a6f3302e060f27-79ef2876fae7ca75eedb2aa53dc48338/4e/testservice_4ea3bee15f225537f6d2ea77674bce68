c581539842e9beeda285058e1d68d52a
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestService = void 0;
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("typeorm");
const bluebird_1 = __importDefault(require("bluebird"));
const app_module_1 = require("../src/app.module");
const users_entity_1 = require("../src/users/users.entity");
const sites_entity_1 = require("../src/sites/sites.entity");
const site_survey_points_entity_1 = require("../src/site-survey-points/site-survey-points.entity");
const global_validation_pipe_1 = require("../src/validations/global-validation.pipe");
const site_applications_entity_1 = require("../src/site-applications/site-applications.entity");
const sources_entity_1 = require("../src/sites/sources.entity");
const time_series_entity_1 = require("../src/time-series/time-series.entity");
const collections_entity_1 = require("../src/collections/collections.entity");
const daily_data_entity_1 = require("../src/sites/daily-data.entity");
const regions_entity_1 = require("../src/regions/regions.entity");
const surveys_entity_1 = require("../src/surveys/surveys.entity");
const historical_monthly_mean_entity_1 = require("../src/sites/historical-monthly-mean.entity");
const survey_media_entity_1 = require("../src/surveys/survey-media.entity");
const exclusion_dates_entity_1 = require("../src/sites/exclusion-dates.entity");
const temperature_1 = require("../src/utils/temperature");
const user_mock_1 = require("./mock/user.mock");
const site_mock_1 = require("./mock/site.mock");
const survey_point_mock_1 = require("./mock/survey-point.mock");
const site_application_mock_1 = require("./mock/site-application.mock");
const source_mock_1 = require("./mock/source.mock");
const time_series_mock_1 = require("./mock/time-series.mock");
const collection_mock_1 = require("./mock/collection.mock");
const daily_data_mock_1 = require("./mock/daily-data.mock");
const surveys_mock_1 = require("./mock/surveys.mock");
const survey_media_mock_1 = require("./mock/survey-media.mock");
class TestService {
    constructor() {
        this.app = null;
    }
    initializeApp() {
        return __awaiter(this, void 0, void 0, function* () {
            const moduleFixture = yield testing_1.Test.createTestingModule({
                imports: [app_module_1.AppModule],
            }).compile();
            this.app = moduleFixture.createNestApplication();
            yield this.app.init();
            this.app.useGlobalPipes(new global_validation_pipe_1.GlobalValidationPipe({
                transform: true,
                skipTransformIds: ['appId'],
            }));
            const connection = this.app.get(typeorm_1.DataSource);
            try {
                // Clean up database
                yield this.cleanAllEntities(connection);
            }
            catch (err) {
                // eslint-disable-next-line no-console
                console.log('Clean up failed');
                throw err;
            }
            try {
                // Make sure database is up-to-date
                yield connection.runMigrations({ transaction: 'each' });
            }
            catch (err) {
                // eslint-disable-next-line no-console
                console.log('Migrations failed to run');
                throw err;
            }
            try {
                // Load mock entities
                yield this.loadMocks(connection);
            }
            catch (err) {
                // eslint-disable-next-line no-console
                console.log('Mocks failed to load');
                throw err;
            }
        });
    }
    loadMocks(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            yield connection.getRepository(users_entity_1.User).save(user_mock_1.users);
            yield connection.getRepository(sites_entity_1.Site).save(site_mock_1.sites);
            yield connection.getRepository(site_survey_points_entity_1.SiteSurveyPoint).save(survey_point_mock_1.surveyPoints);
            yield connection.getRepository(site_applications_entity_1.SiteApplication).save(site_application_mock_1.siteApplications);
            yield connection.getRepository(sources_entity_1.Sources).save(source_mock_1.sources);
            yield connection.getRepository(time_series_entity_1.TimeSeries).save(time_series_mock_1.timeSeries);
            yield connection.query('REFRESH MATERIALIZED VIEW latest_data');
            yield connection.getRepository(collections_entity_1.Collection).save(collection_mock_1.collections);
            yield connection.getRepository(daily_data_entity_1.DailyData).save(daily_data_mock_1.dailyData);
            yield connection.getRepository(surveys_entity_1.Survey).save(surveys_mock_1.surveys);
            yield connection.getRepository(survey_media_entity_1.SurveyMedia).save(survey_media_mock_1.surveyMedia);
            yield bluebird_1.default.map(site_mock_1.sites, (site) => __awaiter(this, void 0, void 0, function* () {
                const [longitude, latitude] = site.polygon.coordinates;
                const historicalMonthlyMean = yield (0, temperature_1.getHistoricalMonthlyMeans)(longitude, latitude);
                return bluebird_1.default.map(historicalMonthlyMean, (hmm) => {
                    return connection.getRepository(historical_monthly_mean_entity_1.HistoricalMonthlyMean).save({
                        site,
                        month: hmm.month,
                        temperature: hmm.temperature,
                    });
                });
            }));
        });
    }
    static getInstance() {
        this.instance = this.instance || new TestService();
        return this.instance;
    }
    getApp() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.app) {
                yield this.initializeApp();
            }
            return this.app;
        });
    }
    getDataSource() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.app) {
                yield this.initializeApp();
            }
            return this.app.get(typeorm_1.DataSource);
        });
    }
    cleanUpApp() {
        if (!this.app) {
            return Promise.resolve();
        }
        return this.app.close();
    }
    cleanAllEntities(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            yield connection.getRepository(time_series_entity_1.TimeSeries).delete({});
            yield connection.getRepository(sources_entity_1.Sources).delete({});
            yield connection.getRepository(collections_entity_1.Collection).delete({});
            yield connection.getRepository(regions_entity_1.Region).delete({});
            yield connection.getRepository(site_applications_entity_1.SiteApplication).delete({});
            yield connection.getRepository(site_survey_points_entity_1.SiteSurveyPoint).delete({});
            yield connection.getRepository(daily_data_entity_1.DailyData).delete({});
            yield connection.getRepository(exclusion_dates_entity_1.ExclusionDates).delete({});
            yield connection.getRepository(surveys_entity_1.Survey).delete({});
            yield connection.getRepository(survey_media_entity_1.SurveyMedia).delete({});
            yield connection.getRepository(historical_monthly_mean_entity_1.HistoricalMonthlyMean).delete({});
            yield connection.getRepository(sites_entity_1.Site).delete({});
            yield connection.getRepository(users_entity_1.User).delete({});
        });
    }
}
exports.TestService = TestService;
TestService.instance = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,