{"version":3,"names":["GeoTIFF","cov_2qkdd0yjbe","s","__importStar","require","coordinates_1","HistoricalMonthlyMeanRoot","tiffCache","Map","getTiffFromCache","url","f","has","b","set","fromUrl","forceXHR","get","getValueFromTiff","tiff","long","lat","image","getImage","gdalNoData","getGDALNoData","boundingBox","getBoundingBox","width","getWidth","height","getHeight","pixelX","pixelY","pointToPixel","data","readRasters","window","filteredData","map","row","filter","value","undefined","getMMM","exports","getHistoricalMonthlyMeans","HistoricalMonthlyMeanMapping","Promise","all","month","index","__awaiter","temperature","calculateDegreeHeatingDays","seaSurfaceTemperatures","maximumMonthlyMean","length","Error","reduce","sum","degreeDeviation"],"sources":["/home/user/climbox/packages/api/src/utils/temperature.ts"],"sourcesContent":["import * as GeoTIFF from 'geotiff';\r\nimport { pointToPixel } from './coordinates';\r\n\r\nconst HistoricalMonthlyMeanRoot =\r\n  'https://storage.googleapis.com/reef_climatology/';\r\n\r\nconst tiffCache = new Map<string, Promise<any>>();\r\n\r\nasync function getTiffFromCache(url: string) {\r\n  if (!tiffCache.has(url)) {\r\n    tiffCache.set(url, GeoTIFF.fromUrl(url, { forceXHR: true }));\r\n  }\r\n  return tiffCache.get(url)!;\r\n}\r\n\r\nasync function getValueFromTiff(tiff: any, long: number, lat: number) {\r\n  const image = await tiff.getImage();\r\n\r\n  const gdalNoData = image.getGDALNoData();\r\n  const boundingBox = image.getBoundingBox();\r\n  const width = image.getWidth();\r\n  const height = image.getHeight();\r\n\r\n  const { pixelX, pixelY } = pointToPixel(\r\n    long,\r\n    lat,\r\n    boundingBox,\r\n    width,\r\n    height,\r\n  );\r\n\r\n  const data: number[][] = await image.readRasters({\r\n    window: [pixelX, pixelY, pixelX + 10, pixelY + 10],\r\n  });\r\n\r\n  const filteredData = data.map((row) =>\r\n    row.filter((value) => value !== gdalNoData),\r\n  );\r\n\r\n  return filteredData[0][0] ? filteredData[0][0] / 100 : undefined;\r\n}\r\n\r\n/**\r\n * Corals start to become stressed when the SST is 1°C warmer than the maxiumum monthly mean temperature (MMM).\r\n * The MMM is the highest temperature out of the monthly mean temperatures over the year (warmest summer month)\r\n * 1°C above the MMM is called the \"bleaching threshhold\"\r\n * When the SST is warmer than the bleaching threshold temperature, the corals will experience heat stress. This heat stress is the main cause of mass coral bleaching.\r\n * The HotSpot highlights the areas where the SST is above the MMM.\r\n * The DHW shows how much heat stress has accumulated in an area over the past 12 weeks (3 months). The units for DHW are \"degree C-weeks\"\r\n * The DHW adds up the Coral Bleaching HotSpot values whenever the temperature exceeds the bleaching threshold.\r\n * Bleaching Alerts:\r\n *      No Stress (no heat stress or bleaching is present): HotSpot of less than or equal to 0.\r\n *      Bleaching Watch (low-level heat stress is present): HotSpot greater than 0 but less than 1; SST below bleaching threshhold.\r\n *      Bleaching Warning (heat stress is accumulating, possible coral bleaching): HotSpot of 1 or greater; SST above bleaching threshold; DHW greater than 0 but less than 4.\r\n *      Bleaching Alert Level 1 (significant bleaching likely): HotSpot of 1 or greater; SST above bleaching threshold; DHW greater than or equal to 4 but less than 8.\r\n *      Bleaching Alert Level 2 (severe bleaching and significant mortality likely): HotSpot of 1 or greater; SST above bleaching threshold; DHW greater than or equal to 8.\r\n *\r\n * DHW = (1/7)*sum[1->84](HS(i) if HS(i) >= 1C)\r\n * */\r\n\r\nexport async function getMMM(long: number, lat: number) {\r\n  const url = `${HistoricalMonthlyMeanRoot}sst_clim_mmm.tiff`;\r\n  const tiff = await getTiffFromCache(url);\r\n  return getValueFromTiff(tiff, long, lat);\r\n}\r\n\r\nexport async function getHistoricalMonthlyMeans(long: number, lat: number) {\r\n  const HistoricalMonthlyMeanMapping = [\r\n    'january',\r\n    'february',\r\n    'march',\r\n    'april',\r\n    'may',\r\n    'june',\r\n    'july',\r\n    'august',\r\n    'september',\r\n    'october',\r\n    'november',\r\n    'december',\r\n  ];\r\n\r\n  return Promise.all(\r\n    HistoricalMonthlyMeanMapping.map(async (month, index) => {\r\n      const url = `${HistoricalMonthlyMeanRoot}sst_clim_${month}.tiff`;\r\n      const tiff = await getTiffFromCache(url);\r\n      return {\r\n        month: index + 1,\r\n        temperature: await getValueFromTiff(tiff, long, lat),\r\n      };\r\n    }),\r\n  );\r\n}\r\n\r\n/**\r\n * Calculates the Degree Heating Days of a site location using 12 weeks of data.\r\n *\r\n * HS = SST(daily) - MMM if SST(daily) > MMM\r\n * HS = 0                if SST(daily) <= MMM\r\n * HS > 1C               bleaching threshold\r\n *\r\n * @param {float[]}    seaSurfaceTemperatures        list of seaSurfaceTemperatures\r\n * @param {float}      maximumMonthlyMean            maximumMonthlyMean for this location\r\n *\r\n * @return {float}     degreeHeatingDays             Degree Heating Days\r\n */\r\n\r\nexport function calculateDegreeHeatingDays(\r\n  seaSurfaceTemperatures: number[],\r\n  maximumMonthlyMean: number | null,\r\n) {\r\n  if (seaSurfaceTemperatures.length !== 84) {\r\n    throw new Error(\r\n      'Calculating Degree Heating Days requires exactly 84 days of data.',\r\n    );\r\n  }\r\n\r\n  if (!maximumMonthlyMean) {\r\n    throw new Error('Max monthly mean is undefined');\r\n  }\r\n\r\n  return seaSurfaceTemperatures.reduce((sum, value) => {\r\n    // Calculate deviation.\r\n    const degreeDeviation = value - maximumMonthlyMean;\r\n    // Add degree deviation for days above bleaching threshold (MMM + 1 degree).\r\n    return sum + (degreeDeviation >= 1 ? value - maximumMonthlyMean : 0);\r\n  }, 0);\r\n}\r\n"],"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"}