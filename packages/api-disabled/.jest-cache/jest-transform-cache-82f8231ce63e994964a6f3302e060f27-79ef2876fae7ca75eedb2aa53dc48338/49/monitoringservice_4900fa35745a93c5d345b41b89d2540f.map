{"version":3,"names":["common_1","cov_qvpye6od6","s","require","typeorm_1","luxon_1","sites_entity_1","surveys_entity_1","latest_data_entity_1","typeorm_2","users_entity_1","dates_1","site_applications_entity_1","csv_utils_1","monitoring_entity_1","escapeLikeString","raw","f","replace","MonitoringService","constructor","monitoringRepository","siteRepository","surveyRepository","latestDataRepository","siteApplicationRepository","getMetricsForSites","siteIds","skipAdminCheck","user","aggregationPeriod","startDate","endDate","Promise","all","map","querySiteId","__awaiter","b","InternalServerErrorException","adminLevel","AdminLevel","SiteManager","isSiteAdmin","createQueryBuilder","innerJoin","userId","id","andWhere","getOne","ForbiddenException","queryBase","withAggregate","select","addSelect","leftJoin","withStartDate","withEndDate","groupAndOrderBy","metrics","site","groupBy","orderBy","getRawMany","findOne","where","siteId","siteName","name","data","postMonitoringMetric","metric","save","getMonitoringStats","spotterId","monthly","start","end","csv","res","BadRequestException","length","spotterSite","sensorId","querySiteIds","toISOString","getDefaultDates","send","filename","getRows","startDateRows","endDateRows","x","y","Object","assign","date","DateTime","fromJSDate","toISO","flat","ReturnCSV","getMonitoringLastMonth","getMonitoringLastMonthDto","prevMonth","now","minus","month","toJSDate","sitesWithSpotter","find","Not","IsNull","undefined","Date","surveysReport","SitesOverview","adminEmail","adminUsername","organization","status","latestDataSubQuery","addOrderBy","surveysCountSubQuery","applicationSubQuery","baseQuery","getQuery","withSiteId","withSiteName","withSpotterId","withAdminEmail","withAdminUserName","withOrganization","withStatus","ret","addGroupBy","getSitesStatus","getRawOne","__decorate","Injectable","__param","InjectRepository","Monitoring","Site","Survey","LatestData","SiteApplication","Repository","exports"],"sources":["/home/user/climbox/packages/api/src/monitoring/monitoring.service.ts"],"sourcesContent":["import {\r\n  BadRequestException,\r\n  ForbiddenException,\r\n  Injectable,\r\n  InternalServerErrorException,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { DateTime } from 'luxon';\r\nimport { Site } from 'sites/sites.entity';\r\nimport { Survey } from 'surveys/surveys.entity';\r\nimport { LatestData } from 'time-series/latest-data.entity';\r\nimport { IsNull, Not, Repository } from 'typeorm';\r\nimport { AdminLevel, User } from 'users/users.entity';\r\nimport { getDefaultDates } from 'utils/dates';\r\nimport { SiteApplication } from 'site-applications/site-applications.entity';\r\nimport type { Response } from 'express';\r\nimport { ReturnCSV } from 'utils/csv-utils';\r\nimport { GetSitesOverviewDto } from './dto/get-sites-overview.dto';\r\nimport { GetMonitoringStatsDto } from './dto/get-monitoring-stats.dto';\r\nimport { PostMonitoringMetricDto } from './dto/post-monitoring-metric.dto';\r\nimport { Monitoring } from './monitoring.entity';\r\nimport { GetMonitoringLastMonthDto } from './dto/get-monitoring-last-month.dto';\r\n\r\ninterface GetMetricsForSitesProps {\r\n  siteIds: number[];\r\n  skipAdminCheck: boolean;\r\n  user?: User;\r\n  aggregationPeriod?: 'week' | 'month';\r\n  startDate?: Date;\r\n  endDate?: Date;\r\n}\r\n\r\ninterface SiteMetrics {\r\n  date?: Date;\r\n  totalRequests: number;\r\n  registeredUserRequests: number;\r\n  siteAdminRequests: number;\r\n  timeSeriesRequests: number;\r\n  CSVDownloadRequests: number;\r\n}\r\n\r\nfunction escapeLikeString(raw: string): string {\r\n  return raw.replace(/[\\\\%_]/g, '\\\\$&');\r\n}\r\n\r\n@Injectable()\r\nexport class MonitoringService {\r\n  constructor(\r\n    @InjectRepository(Monitoring)\r\n    private monitoringRepository: Repository<Monitoring>,\r\n\r\n    @InjectRepository(Site)\r\n    private siteRepository: Repository<Site>,\r\n\r\n    @InjectRepository(Survey)\r\n    private surveyRepository: Repository<Survey>,\r\n\r\n    @InjectRepository(LatestData)\r\n    private latestDataRepository: Repository<LatestData>,\r\n\r\n    @InjectRepository(SiteApplication)\r\n    private siteApplicationRepository: Repository<SiteApplication>,\r\n  ) {}\r\n\r\n  private async getMetricsForSites({\r\n    siteIds,\r\n    skipAdminCheck,\r\n    user,\r\n    aggregationPeriod,\r\n    startDate,\r\n    endDate,\r\n  }: GetMetricsForSitesProps) {\r\n    return Promise.all(\r\n      siteIds.map(async (querySiteId) => {\r\n        if (!skipAdminCheck) {\r\n          // this should never occur\r\n          if (!user) throw new InternalServerErrorException('');\r\n\r\n          if (user.adminLevel === AdminLevel.SiteManager) {\r\n            const isSiteAdmin = await this.siteRepository\r\n              .createQueryBuilder('site')\r\n              .innerJoin('site.admins', 'admins', 'admins.id = :userId', {\r\n                userId: user.id,\r\n              })\r\n              .andWhere('site.id = :querySiteId', { querySiteId })\r\n              .getOne();\r\n\r\n            if (!isSiteAdmin) throw new ForbiddenException();\r\n          }\r\n        }\r\n\r\n        const queryBase =\r\n          this.monitoringRepository.createQueryBuilder('monitoring');\r\n\r\n        const withAggregate = aggregationPeriod\r\n          ? queryBase.select(\r\n              `date_trunc('${aggregationPeriod}', monitoring.\"timestamp\")`,\r\n              'date',\r\n            )\r\n          : queryBase.select('monitoring.site_id', 'siteId');\r\n\r\n        withAggregate\r\n          .addSelect(\r\n            'SUM(CASE WHEN user_id IS NULL THEN 1 ELSE 0 END)::int',\r\n            'totalRequests',\r\n          )\r\n          .addSelect('COUNT(monitoring.user_id)::int', 'registeredUserRequests')\r\n          .addSelect('COUNT(uass.users_id)::int', 'siteAdminRequests')\r\n          .addSelect(\r\n            `SUM(CASE WHEN monitoring.metric = 'time_series_request' AND user_id IS NULL THEN 1 ELSE 0 END)::int`,\r\n            'timeSeriesRequests',\r\n          )\r\n          .addSelect(\r\n            `SUM(CASE WHEN monitoring.metric = 'csv_download' AND user_id IS NULL THEN 1 ELSE 0 END)::int`,\r\n            'CSVDownloadRequests',\r\n          )\r\n          .innerJoin('site', 's', 'monitoring.site_id = s.id')\r\n          .leftJoin(\r\n            'users_administered_sites_site',\r\n            'uass',\r\n            'monitoring.site_id = uass.site_id  AND monitoring.user_id = uass.users_id',\r\n          )\r\n          .andWhere('monitoring.site_id = :querySiteId', {\r\n            querySiteId,\r\n          });\r\n\r\n        const withStartDate = startDate\r\n          ? withAggregate.andWhere('monitoring.\"timestamp\" >= :startDate', {\r\n              startDate,\r\n            })\r\n          : withAggregate;\r\n\r\n        const withEndDate = endDate\r\n          ? withStartDate.andWhere('monitoring.\"timestamp\" <= :endDate', {\r\n              endDate,\r\n            })\r\n          : withStartDate;\r\n\r\n        const groupAndOrderBy = aggregationPeriod\r\n          ? 'monitoring.site_id, date'\r\n          : 'monitoring.site_id';\r\n\r\n        const [metrics, site] = await Promise.all([\r\n          withEndDate\r\n            .groupBy(groupAndOrderBy)\r\n            .orderBy(groupAndOrderBy)\r\n            .getRawMany(),\r\n          this.siteRepository.findOne({\r\n            where: { id: querySiteId },\r\n          }),\r\n        ]);\r\n\r\n        // This should never happen since we validate siteIds\r\n        if (!site) throw new InternalServerErrorException();\r\n\r\n        return {\r\n          siteId: site.id,\r\n          siteName: site.name,\r\n          data: metrics as SiteMetrics[],\r\n        };\r\n      }),\r\n    );\r\n  }\r\n\r\n  async postMonitoringMetric(\r\n    { metric, siteId }: PostMonitoringMetricDto,\r\n    user: User,\r\n  ): Promise<void> {\r\n    await this.monitoringRepository.save({\r\n      metric,\r\n      user,\r\n      site: { id: siteId },\r\n    });\r\n  }\r\n\r\n  async getMonitoringStats(\r\n    { siteIds, spotterId, monthly, start, end, csv }: GetMonitoringStatsDto,\r\n    user: User,\r\n    res: Response,\r\n  ) {\r\n    if (siteIds && spotterId) {\r\n      throw new BadRequestException(\r\n        'Invalid parameters: Only one of siteIds or spotterId can be provided, not both',\r\n      );\r\n    }\r\n\r\n    if (!siteIds?.length && !spotterId) {\r\n      throw new BadRequestException(\r\n        'Invalid parameters: One of siteIds or spotterId must be provided',\r\n      );\r\n    }\r\n\r\n    const spotterSite = spotterId\r\n      ? await this.siteRepository.findOne({\r\n          where: { sensorId: spotterId },\r\n        })\r\n      : null;\r\n\r\n    if (spotterSite === null && spotterId) {\r\n      throw new BadRequestException('Invalid value for parameter: spotterId');\r\n    }\r\n\r\n    const querySiteIds = siteIds || [spotterSite!.id];\r\n\r\n    if (start && end && start.toISOString() > end.toISOString()) {\r\n      throw new BadRequestException(\r\n        `Invalid Dates: start date can't be after end date`,\r\n      );\r\n    }\r\n\r\n    const { startDate, endDate } = getDefaultDates(\r\n      start?.toISOString(),\r\n      end?.toISOString(),\r\n    );\r\n\r\n    const aggregationPeriod = monthly ? 'month' : 'week';\r\n\r\n    if (!csv) {\r\n      res.send(\r\n        await this.getMetricsForSites({\r\n          siteIds: querySiteIds,\r\n          skipAdminCheck: false,\r\n          user,\r\n          aggregationPeriod,\r\n          startDate,\r\n          endDate,\r\n        }),\r\n      );\r\n      return;\r\n    }\r\n\r\n    const filename = 'site_metrics.csv';\r\n\r\n    const getRows = async (startDateRows: Date, endDateRows: Date) => {\r\n      const data = await this.getMetricsForSites({\r\n        siteIds: querySiteIds,\r\n        skipAdminCheck: false,\r\n        user,\r\n        aggregationPeriod,\r\n        startDate: startDateRows,\r\n        endDate: endDateRows,\r\n      });\r\n\r\n      return data\r\n        .map((x) => {\r\n          return x.data.map((y) => ({\r\n            siteId: x.siteId,\r\n            siteName: x.siteName,\r\n            ...y,\r\n            date: y.date && DateTime.fromJSDate(y.date).toISO(),\r\n          }));\r\n        })\r\n        .flat();\r\n    };\r\n\r\n    ReturnCSV({ startDate, endDate, res, filename, getRows });\r\n  }\r\n\r\n  async getMonitoringLastMonth(\r\n    getMonitoringLastMonthDto: GetMonitoringLastMonthDto,\r\n    res: Response,\r\n  ) {\r\n    const { csv } = getMonitoringLastMonthDto;\r\n    const prevMonth = DateTime.now().minus({ month: 1 }).toJSDate();\r\n    const sitesWithSpotter = await this.siteRepository.find({\r\n      where: { sensorId: Not(IsNull()) },\r\n      select: ['id'],\r\n    });\r\n\r\n    if (!csv) {\r\n      res.send(\r\n        await this.getMetricsForSites({\r\n          siteIds: sitesWithSpotter.map((x) => x.id),\r\n          skipAdminCheck: true,\r\n          user: undefined,\r\n          aggregationPeriod: undefined,\r\n          startDate: prevMonth,\r\n          endDate: undefined,\r\n        }),\r\n      );\r\n      return;\r\n    }\r\n\r\n    const filename = 'monthly_report.csv';\r\n\r\n    const getRows = async (startDateRows: Date, endDateRows: Date) => {\r\n      const data = await this.getMetricsForSites({\r\n        siteIds: sitesWithSpotter.map((x) => x.id),\r\n        skipAdminCheck: true,\r\n        user: undefined,\r\n        aggregationPeriod: undefined,\r\n        startDate: startDateRows,\r\n        endDate: endDateRows,\r\n      });\r\n\r\n      return data\r\n        .map((x) => {\r\n          if (x.data.length === 0)\r\n            return { siteId: x.siteId, siteName: x.siteName };\r\n          return x.data.map((y) => ({\r\n            siteId: x.siteId,\r\n            siteName: x.siteName,\r\n            ...y,\r\n          }));\r\n        })\r\n        .flat();\r\n    };\r\n\r\n    ReturnCSV({\r\n      startDate: prevMonth,\r\n      endDate: new Date(),\r\n      res,\r\n      filename,\r\n      getRows,\r\n    });\r\n  }\r\n\r\n  surveysReport() {\r\n    return this.surveyRepository\r\n      .createQueryBuilder('survey')\r\n      .select('survey.site_id', 'siteId')\r\n      .addSelect('survey.id', 'surveyId')\r\n      .addSelect('survey.dive_date', 'diveDate')\r\n      .addSelect('survey.updated_at', 'updatedAt')\r\n      .addSelect('s.name', 'siteName')\r\n      .addSelect('u.email', 'userEmail')\r\n      .addSelect('u.full_name', 'userFullName')\r\n      .addSelect('COUNT(sm.id)::int', 'surveyMediaCount')\r\n      .leftJoin('site', 's', 'survey.site_id = s.id')\r\n      .leftJoin('users', 'u', 'survey.user_id = u.id')\r\n      .leftJoin('survey_media', 'sm', 'sm.survey_id = survey.id')\r\n      .groupBy(\r\n        'survey.site_id, survey.id, survey.dive_date, survey.updated_at, s.id, s.name, u.email, u.full_name',\r\n      )\r\n      .getRawMany();\r\n  }\r\n\r\n  SitesOverview({\r\n    siteId,\r\n    siteName,\r\n    spotterId,\r\n    adminEmail,\r\n    adminUsername,\r\n    organization,\r\n    status,\r\n  }: GetSitesOverviewDto) {\r\n    const latestDataSubQuery = this.latestDataRepository\r\n      .createQueryBuilder('latest_data')\r\n      .select(\r\n        'DISTINCT ON (latest_data.site_id) latest_data.site_id, latest_data.timestamp',\r\n      )\r\n      .where(`latest_data.source = 'spotter'`)\r\n      .orderBy('latest_data.site_id')\r\n      .addOrderBy('latest_data.timestamp', 'DESC');\r\n\r\n    const surveysCountSubQuery = this.surveyRepository\r\n      .createQueryBuilder('survey')\r\n      .select('survey.site_id', 'site_id')\r\n      .addSelect('COUNT(*)', 'count')\r\n      .groupBy('survey.site_id');\r\n\r\n    const applicationSubQuery = this.siteApplicationRepository\r\n      .createQueryBuilder('application')\r\n      .select('application.site_id', 'site_id')\r\n      .addSelect('u.full_name', 'full_name')\r\n      .addSelect('u.organization', 'organization')\r\n      .addSelect('u.email', 'email')\r\n      .innerJoin('users', 'u', 'application.user_id = u.id');\r\n\r\n    const baseQuery = this.siteRepository\r\n      .createQueryBuilder('site')\r\n      .select('site.id', 'siteId')\r\n      .addSelect('site.name', 'siteName')\r\n      .addSelect(\r\n        'ARRAY_AGG(u.organization) || ARRAY_AGG(application.organization)',\r\n        'organizations',\r\n      )\r\n      .addSelect(\r\n        'ARRAY_AGG(u.full_name) || ARRAY_AGG(application.full_name)',\r\n        'adminNames',\r\n      )\r\n      .addSelect(\r\n        'ARRAY_AGG(u.email) || ARRAY_AGG(application.email)',\r\n        'adminEmails',\r\n      )\r\n      .addSelect('site.status', 'status')\r\n      .addSelect('site.depth', 'depth')\r\n      .addSelect('site.sensor_id', 'spotterId')\r\n      .addSelect('site.video_stream', 'videoStream')\r\n      .addSelect('site.updated_at', 'updatedAt')\r\n      .addSelect('latest_data.timestamp', 'lastDataReceived')\r\n      .addSelect('COALESCE(surveys_count.count, 0)', 'surveysCount')\r\n      .addSelect('site.contact_information', 'contactInformation')\r\n      .addSelect('site.created_at', 'createdAt')\r\n      .leftJoin(\r\n        'users_administered_sites_site',\r\n        'uass',\r\n        'uass.site_id = site.id',\r\n      )\r\n      .leftJoin('users', 'u', 'uass.users_id = u.id')\r\n      .leftJoin(\r\n        `(${latestDataSubQuery.getQuery()})`,\r\n        'latest_data',\r\n        'latest_data.site_id = site.id',\r\n      )\r\n      .leftJoin(\r\n        `(${surveysCountSubQuery.getQuery()})`,\r\n        'surveys_count',\r\n        'surveys_count.site_id = site.id',\r\n      )\r\n      .leftJoin(\r\n        `(${applicationSubQuery.getQuery()})`,\r\n        'application',\r\n        'application.site_id = site.id',\r\n      );\r\n\r\n    const withSiteId = siteId\r\n      ? baseQuery.andWhere('site.id = :siteId', { siteId })\r\n      : baseQuery;\r\n\r\n    const withSiteName = siteName\r\n      ? withSiteId.andWhere('site.name ILIKE :siteName', {\r\n          siteName: `%${escapeLikeString(siteName)}%`,\r\n        })\r\n      : withSiteId;\r\n\r\n    const withSpotterId = spotterId\r\n      ? withSiteName.andWhere('site.sensor_id = :spotterId', { spotterId })\r\n      : withSiteName;\r\n\r\n    const withAdminEmail = adminEmail\r\n      ? withSpotterId.andWhere('u.email ILIKE :adminEmail', {\r\n          adminEmail: `%${escapeLikeString(adminEmail)}%`,\r\n        })\r\n      : withSpotterId;\r\n\r\n    const withAdminUserName = adminUsername\r\n      ? withAdminEmail.andWhere('u.full_name ILIKE :adminUsername', {\r\n          adminUsername: `%${escapeLikeString(adminUsername)}%`,\r\n        })\r\n      : withAdminEmail;\r\n\r\n    const withOrganization = organization\r\n      ? withAdminUserName.andWhere('u.organization ILIKE :organization', {\r\n          organization: `%${escapeLikeString(organization)}%`,\r\n        })\r\n      : withAdminUserName;\r\n\r\n    const withStatus = status\r\n      ? withOrganization.andWhere('site.status = :status', { status })\r\n      : withOrganization;\r\n\r\n    const ret = withStatus\r\n      .groupBy('site.id')\r\n      .addGroupBy('site.name')\r\n      .addGroupBy('site.status')\r\n      .addGroupBy('site.depth')\r\n      .addGroupBy('site.sensor_id')\r\n      .addGroupBy('site.video_stream')\r\n      .addGroupBy('site.updated_at')\r\n      .addGroupBy('latest_data.timestamp')\r\n      .addGroupBy('surveys_count.count')\r\n      .addGroupBy('site.contact_information');\r\n\r\n    return ret.getRawMany();\r\n  }\r\n\r\n  getSitesStatus() {\r\n    return this.siteRepository\r\n      .createQueryBuilder('site')\r\n      .select('COUNT(*)', 'totalSites')\r\n      .addSelect(\"COUNT(*) FILTER (WHERE site.status = 'deployed')\", 'deployed')\r\n      .addSelect('COUNT(*) FILTER (WHERE site.display)', 'displayed')\r\n      .addSelect(\r\n        \"COUNT(*) FILTER (WHERE site.status = 'maintenance')\",\r\n        'maintenance',\r\n      )\r\n      .addSelect(\"COUNT(*) FILTER (WHERE site.status = 'shipped')\", 'shipped')\r\n      .addSelect(\r\n        \"COUNT(*) FILTER (WHERE site.status = 'end_of_life')\",\r\n        'endOfLife',\r\n      )\r\n      .addSelect(\"COUNT(*) FILTER (WHERE site.status = 'lost')\", 'lost')\r\n      .getRawOne();\r\n  }\r\n}\r\n"],"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"}