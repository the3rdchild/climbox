071f3960ad504ce387b25aacdb4a04f9
"use strict";

/* istanbul ignore next */
function cov_vx6k6r4nn() {
  var path = "/home/user/climbox/packages/api/src/utils/sofar-availability.ts";
  var hash = "855ac348bc9078c133d4badbdf84d849096157d8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/user/climbox/packages/api/src/utils/sofar-availability.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 74
        }
      },
      "4": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 36
        }
      },
      "5": {
        start: {
          line: 8,
          column: 36
        },
        end: {
          line: 8,
          column: 91
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "7": {
        start: {
          line: 11,
          column: 71
        },
        end: {
          line: 17,
          column: 5
        }
      },
      "8": {
        start: {
          line: 21,
          column: 34
        },
        end: {
          line: 22,
          column: 20
        }
      },
      "9": {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "10": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 46
        }
      },
      "11": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 54,
          column: 32
        }
      },
      "12": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 56,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 54
          },
          end: {
            line: 11,
            column: 55
          }
        },
        loc: {
          start: {
            line: 11,
            column: 71
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "getSofarNearestAvailablePoint",
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 38
          }
        },
        loc: {
          start: {
            line: 19,
            column: 46
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 11
          },
          end: {
            line: 54,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 10
          },
          end: {
            line: 53,
            column: 26
          }
        }, {
          start: {
            line: 54,
            column: 10
          },
          end: {
            line: 54,
            column: 31
          }
        }],
        line: 52
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "/home/user/climbox/packages/api/src/utils/sofar-availability.ts",
      mappings: ";;;;;;AACA,qCAAiE;AACjE,4FAA6D;AAEhD,QAAA,gBAAgB,GAA6B;IACxD,IAAI,EAAE,mBAAmB;IACzB,QAAQ,EAAE,mCAAkB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAChD,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE;YACR,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,UAAU;SACxB;KACF,CAAC,CAAC;CACJ,CAAC;AAEF,SAAgB,6BAA6B,CAAC,KAAY;IACxD,2FAA2F;IAC3F,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,IAAA,mBAAY,EAAC,KAAK,EAAE,wBAAgB,CAAC,CAAC,QAAQ;SACzE,WAAW,CAAC;IAEf,MAAM,IAAI,GAAY;QACpB,IAAI,EAAE,SAAS;QACf,WAAW,EAAE;YACX;gBACE;oBACE,CAAC,CAAC,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;oBACtC,CAAC,CAAC,EAAE,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE;iBACpC;gBACD;oBACE,CAAC,CAAC,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;oBACtC,CAAC,CAAC,EAAE,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE;iBACpC;gBACD;oBACE,CAAC,CAAC,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;oBACtC,CAAC,CAAC,EAAE,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE;iBACpC;gBACD;oBACE,CAAC,CAAC,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;oBACtC,CAAC,CAAC,EAAE,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE;iBACpC;gBAED,cAAc;gBACd;oBACE,CAAC,CAAC,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;oBACtC,CAAC,CAAC,EAAE,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE;iBACpC;aACF;SACF;KACF,CAAC;IAEF,MAAM,gBAAgB,GAAG,KAAK,CAAC,WAAW,CAAC;IAE3C,OAAO,IAAA,4BAAqB,EAAC,KAAK,EAAE,IAAI,CAAC;QACvC,CAAC,CAAE,gBAAqC;QACxC,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC5B,CAAC;AAxCD,sEAwCC",
      names: [],
      sources: ["/home/user/climbox/packages/api/src/utils/sofar-availability.ts"],
      sourcesContent: ["import type { FeatureCollection, Point, Polygon } from 'geojson';\r\nimport { nearestPoint, booleanPointInPolygon } from '@turf/turf';\r\nimport availabilityPoints from './sofar-availability-points';\r\n\r\nexport const AVAILABLE_POINTS: FeatureCollection<Point> = {\r\n  type: 'FeatureCollection',\r\n  features: availabilityPoints.map((coordinate) => ({\r\n    type: 'Feature',\r\n    geometry: {\r\n      type: 'Point',\r\n      coordinates: coordinate,\r\n    },\r\n  })),\r\n};\r\n\r\nexport function getSofarNearestAvailablePoint(point: Point): [number, number] {\r\n  // deconstructing number[] into [number, number] in order to make typescript compiler happy\r\n  const [longitude, latitude] = nearestPoint(point, AVAILABLE_POINTS).geometry\r\n    .coordinates;\r\n\r\n  const poly: Polygon = {\r\n    type: 'Polygon',\r\n    coordinates: [\r\n      [\r\n        [\r\n          ((180 + longitude - 0.25) % 360) - 180,\r\n          ((90 + latitude + 0.25) % 180) - 90,\r\n        ],\r\n        [\r\n          ((180 + longitude - 0.25) % 360) - 180,\r\n          ((90 + latitude - 0.25) % 180) - 90,\r\n        ],\r\n        [\r\n          ((180 + longitude + 0.25) % 360) - 180,\r\n          ((90 + latitude - 0.25) % 180) - 90,\r\n        ],\r\n        [\r\n          ((180 + longitude + 0.25) % 360) - 180,\r\n          ((90 + latitude + 0.25) % 180) - 90,\r\n        ],\r\n\r\n        // first again\r\n        [\r\n          ((180 + longitude - 0.25) % 360) - 180,\r\n          ((90 + latitude + 0.25) % 180) - 90,\r\n        ],\r\n      ],\r\n    ],\r\n  };\r\n\r\n  const pointCoordinates = point.coordinates;\r\n\r\n  return booleanPointInPolygon(point, poly)\r\n    ? (pointCoordinates as [number, number])\r\n    : [longitude, latitude];\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "855ac348bc9078c133d4badbdf84d849096157d8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_vx6k6r4nn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_vx6k6r4nn();
var __importDefault =
/* istanbul ignore next */
(cov_vx6k6r4nn().s[0]++,
/* istanbul ignore next */
(cov_vx6k6r4nn().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_vx6k6r4nn().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_vx6k6r4nn().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_vx6k6r4nn().f[0]++;
  cov_vx6k6r4nn().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_vx6k6r4nn().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_vx6k6r4nn().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_vx6k6r4nn().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_vx6k6r4nn().b[1][1]++, {
      "default": mod
    })
  );
}));
/* istanbul ignore next */
cov_vx6k6r4nn().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_vx6k6r4nn().s[3]++;
exports.getSofarNearestAvailablePoint = exports.AVAILABLE_POINTS = void 0;
const turf_1 =
/* istanbul ignore next */
(cov_vx6k6r4nn().s[4]++, require("@turf/turf"));
const sofar_availability_points_1 =
/* istanbul ignore next */
(cov_vx6k6r4nn().s[5]++, __importDefault(require("./sofar-availability-points")));
/* istanbul ignore next */
cov_vx6k6r4nn().s[6]++;
exports.AVAILABLE_POINTS = {
  type: 'FeatureCollection',
  features: sofar_availability_points_1.default.map(coordinate => {
    /* istanbul ignore next */
    cov_vx6k6r4nn().f[1]++;
    cov_vx6k6r4nn().s[7]++;
    return {
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: coordinate
      }
    };
  })
};
function getSofarNearestAvailablePoint(point) {
  /* istanbul ignore next */
  cov_vx6k6r4nn().f[2]++;
  // deconstructing number[] into [number, number] in order to make typescript compiler happy
  const [longitude, latitude] =
  /* istanbul ignore next */
  (cov_vx6k6r4nn().s[8]++, (0, turf_1.nearestPoint)(point, exports.AVAILABLE_POINTS).geometry.coordinates);
  const poly =
  /* istanbul ignore next */
  (cov_vx6k6r4nn().s[9]++, {
    type: 'Polygon',
    coordinates: [[[(180 + longitude - 0.25) % 360 - 180, (90 + latitude + 0.25) % 180 - 90], [(180 + longitude - 0.25) % 360 - 180, (90 + latitude - 0.25) % 180 - 90], [(180 + longitude + 0.25) % 360 - 180, (90 + latitude - 0.25) % 180 - 90], [(180 + longitude + 0.25) % 360 - 180, (90 + latitude + 0.25) % 180 - 90],
    // first again
    [(180 + longitude - 0.25) % 360 - 180, (90 + latitude + 0.25) % 180 - 90]]]
  });
  const pointCoordinates =
  /* istanbul ignore next */
  (cov_vx6k6r4nn().s[10]++, point.coordinates);
  /* istanbul ignore next */
  cov_vx6k6r4nn().s[11]++;
  return (0, turf_1.booleanPointInPolygon)(point, poly) ?
  /* istanbul ignore next */
  (cov_vx6k6r4nn().b[3][0]++, pointCoordinates) :
  /* istanbul ignore next */
  (cov_vx6k6r4nn().b[3][1]++, [longitude, latitude]);
}
/* istanbul ignore next */
cov_vx6k6r4nn().s[12]++;
exports.getSofarNearestAvailablePoint = getSofarNearestAvailablePoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfdng2azZyNG5uIiwiYWN0dWFsQ292ZXJhZ2UiLCJ0dXJmXzEiLCJzIiwicmVxdWlyZSIsInNvZmFyX2F2YWlsYWJpbGl0eV9wb2ludHNfMSIsIl9faW1wb3J0RGVmYXVsdCIsImV4cG9ydHMiLCJBVkFJTEFCTEVfUE9JTlRTIiwidHlwZSIsImZlYXR1cmVzIiwiZGVmYXVsdCIsIm1hcCIsImNvb3JkaW5hdGUiLCJmIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsImdldFNvZmFyTmVhcmVzdEF2YWlsYWJsZVBvaW50IiwicG9pbnQiLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsIm5lYXJlc3RQb2ludCIsInBvbHkiLCJwb2ludENvb3JkaW5hdGVzIiwiYm9vbGVhblBvaW50SW5Qb2x5Z29uIiwiYiJdLCJzb3VyY2VzIjpbIi9ob21lL3VzZXIvY2xpbWJveC9wYWNrYWdlcy9hcGkvc3JjL3V0aWxzL3NvZmFyLWF2YWlsYWJpbGl0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZlYXR1cmVDb2xsZWN0aW9uLCBQb2ludCwgUG9seWdvbiB9IGZyb20gJ2dlb2pzb24nO1xyXG5pbXBvcnQgeyBuZWFyZXN0UG9pbnQsIGJvb2xlYW5Qb2ludEluUG9seWdvbiB9IGZyb20gJ0B0dXJmL3R1cmYnO1xyXG5pbXBvcnQgYXZhaWxhYmlsaXR5UG9pbnRzIGZyb20gJy4vc29mYXItYXZhaWxhYmlsaXR5LXBvaW50cyc7XHJcblxyXG5leHBvcnQgY29uc3QgQVZBSUxBQkxFX1BPSU5UUzogRmVhdHVyZUNvbGxlY3Rpb248UG9pbnQ+ID0ge1xyXG4gIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXHJcbiAgZmVhdHVyZXM6IGF2YWlsYWJpbGl0eVBvaW50cy5tYXAoKGNvb3JkaW5hdGUpID0+ICh7XHJcbiAgICB0eXBlOiAnRmVhdHVyZScsXHJcbiAgICBnZW9tZXRyeToge1xyXG4gICAgICB0eXBlOiAnUG9pbnQnLFxyXG4gICAgICBjb29yZGluYXRlczogY29vcmRpbmF0ZSxcclxuICAgIH0sXHJcbiAgfSkpLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNvZmFyTmVhcmVzdEF2YWlsYWJsZVBvaW50KHBvaW50OiBQb2ludCk6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gIC8vIGRlY29uc3RydWN0aW5nIG51bWJlcltdIGludG8gW251bWJlciwgbnVtYmVyXSBpbiBvcmRlciB0byBtYWtlIHR5cGVzY3JpcHQgY29tcGlsZXIgaGFwcHlcclxuICBjb25zdCBbbG9uZ2l0dWRlLCBsYXRpdHVkZV0gPSBuZWFyZXN0UG9pbnQocG9pbnQsIEFWQUlMQUJMRV9QT0lOVFMpLmdlb21ldHJ5XHJcbiAgICAuY29vcmRpbmF0ZXM7XHJcblxyXG4gIGNvbnN0IHBvbHk6IFBvbHlnb24gPSB7XHJcbiAgICB0eXBlOiAnUG9seWdvbicsXHJcbiAgICBjb29yZGluYXRlczogW1xyXG4gICAgICBbXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgKCgxODAgKyBsb25naXR1ZGUgLSAwLjI1KSAlIDM2MCkgLSAxODAsXHJcbiAgICAgICAgICAoKDkwICsgbGF0aXR1ZGUgKyAwLjI1KSAlIDE4MCkgLSA5MCxcclxuICAgICAgICBdLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICgoMTgwICsgbG9uZ2l0dWRlIC0gMC4yNSkgJSAzNjApIC0gMTgwLFxyXG4gICAgICAgICAgKCg5MCArIGxhdGl0dWRlIC0gMC4yNSkgJSAxODApIC0gOTAsXHJcbiAgICAgICAgXSxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAoKDE4MCArIGxvbmdpdHVkZSArIDAuMjUpICUgMzYwKSAtIDE4MCxcclxuICAgICAgICAgICgoOTAgKyBsYXRpdHVkZSAtIDAuMjUpICUgMTgwKSAtIDkwLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgKCgxODAgKyBsb25naXR1ZGUgKyAwLjI1KSAlIDM2MCkgLSAxODAsXHJcbiAgICAgICAgICAoKDkwICsgbGF0aXR1ZGUgKyAwLjI1KSAlIDE4MCkgLSA5MCxcclxuICAgICAgICBdLFxyXG5cclxuICAgICAgICAvLyBmaXJzdCBhZ2FpblxyXG4gICAgICAgIFtcclxuICAgICAgICAgICgoMTgwICsgbG9uZ2l0dWRlIC0gMC4yNSkgJSAzNjApIC0gMTgwLFxyXG4gICAgICAgICAgKCg5MCArIGxhdGl0dWRlICsgMC4yNSkgJSAxODApIC0gOTAsXHJcbiAgICAgICAgXSxcclxuICAgICAgXSxcclxuICAgIF0sXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcG9pbnRDb29yZGluYXRlcyA9IHBvaW50LmNvb3JkaW5hdGVzO1xyXG5cclxuICByZXR1cm4gYm9vbGVhblBvaW50SW5Qb2x5Z29uKHBvaW50LCBwb2x5KVxyXG4gICAgPyAocG9pbnRDb29yZGluYXRlcyBhcyBbbnVtYmVyLCBudW1iZXJdKVxyXG4gICAgOiBbbG9uZ2l0dWRlLCBsYXRpdHVkZV07XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFXSztJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9B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