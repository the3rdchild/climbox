25f1247e85ce9a575ddf2d34cafacacc
"use strict";

/* istanbul ignore next */
function cov_1mgyypbcki() {
  var path = "/home/user/climbox/packages/api/src/utils/dates.ts";
  var hash = "9c53c9499e30e06351058474cbeb1351f35303cf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/user/climbox/packages/api/src/utils/dates.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 59
        }
      },
      "2": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 57
        }
      },
      "3": {
        start: {
          line: 6,
          column: 22
        },
        end: {
          line: 6,
          column: 69
        }
      },
      "4": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 50
        }
      },
      "5": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 58
        }
      },
      "6": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "7": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 52
        }
      },
      "8": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 18,
          column: 70
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "10": {
        start: {
          line: 21,
          column: 0
        },
        end: {
          line: 21,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "getStartEndDate",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 24
          }
        },
        loc: {
          start: {
            line: 5,
            column: 46
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "getDefaultDates",
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 24
          }
        },
        loc: {
          start: {
            line: 14,
            column: 37
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 5,
            column: 42
          },
          end: {
            line: 5,
            column: 44
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 15,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 15,
            column: 26
          },
          end: {
            line: 15,
            column: 39
          }
        }, {
          start: {
            line: 15,
            column: 42
          },
          end: {
            line: 15,
            column: 52
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 22
          },
          end: {
            line: 18,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 17,
            column: 10
          },
          end: {
            line: 17,
            column: 25
          }
        }, {
          start: {
            line: 18,
            column: 10
          },
          end: {
            line: 18,
            column: 70
          }
        }],
        line: 16
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "/home/user/climbox/packages/api/src/utils/dates.ts",
      mappings: ";;;AAAA,0DAA+C;AAE/C,SAAgB,eAAe,CAAC,OAAa,EAAE,QAAgB,EAAE;IAC/D,MAAM,SAAS,GAAG,2BAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC/C,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC/C,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;AACxD,CAAC;AAJD,0CAIC;AAED,oFAAoF;AACpF,sEAAsE;AACtE,oGAAoG;AACpG,SAAgB,eAAe,CAAC,KAAc,EAAE,GAAY;IAC1D,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC;IACjD,MAAM,SAAS,GAAG,KAAK;QACrB,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAEjE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;AAChC,CAAC;AAPD,0CAOC",
      names: [],
      sources: ["/home/user/climbox/packages/api/src/utils/dates.ts"],
      sourcesContent: ["import { DateTime } from '../luxon-extensions';\r\n\r\nexport function getStartEndDate(endDate: Date, hours: number = 24) {\r\n  const endMoment = DateTime.fromJSDate(endDate);\r\n  const startMoment = endMoment.minus({ hours });\r\n  return [startMoment.toString(), endMoment.toString()];\r\n}\r\n\r\n// Util function to get the [startDate, endDate] time interval for time series data.\r\n// If no value for endDate is passed, then we define endDate as \"now\".\r\n// If no value for startDate is passed, then we define startDate as three months before the endDate.\r\nexport function getDefaultDates(start?: string, end?: string) {\r\n  const endDate = end ? new Date(end) : new Date();\r\n  const startDate = start\r\n    ? new Date(start)\r\n    : new Date(new Date(endDate).setMonth(endDate.getMonth() - 3));\r\n\r\n  return { startDate, endDate };\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c53c9499e30e06351058474cbeb1351f35303cf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mgyypbcki = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mgyypbcki();
cov_1mgyypbcki().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mgyypbcki().s[1]++;
exports.getDefaultDates = exports.getStartEndDate = void 0;
const luxon_extensions_1 =
/* istanbul ignore next */
(cov_1mgyypbcki().s[2]++, require("../luxon-extensions"));
function getStartEndDate(endDate, hours =
/* istanbul ignore next */
(cov_1mgyypbcki().b[0][0]++, 24)) {
  /* istanbul ignore next */
  cov_1mgyypbcki().f[0]++;
  const endMoment =
  /* istanbul ignore next */
  (cov_1mgyypbcki().s[3]++, luxon_extensions_1.DateTime.fromJSDate(endDate));
  const startMoment =
  /* istanbul ignore next */
  (cov_1mgyypbcki().s[4]++, endMoment.minus({
    hours
  }));
  /* istanbul ignore next */
  cov_1mgyypbcki().s[5]++;
  return [startMoment.toString(), endMoment.toString()];
}
/* istanbul ignore next */
cov_1mgyypbcki().s[6]++;
exports.getStartEndDate = getStartEndDate;
// Util function to get the [startDate, endDate] time interval for time series data.
// If no value for endDate is passed, then we define endDate as "now".
// If no value for startDate is passed, then we define startDate as three months before the endDate.
function getDefaultDates(start, end) {
  /* istanbul ignore next */
  cov_1mgyypbcki().f[1]++;
  const endDate =
  /* istanbul ignore next */
  (cov_1mgyypbcki().s[7]++, end ?
  /* istanbul ignore next */
  (cov_1mgyypbcki().b[1][0]++, new Date(end)) :
  /* istanbul ignore next */
  (cov_1mgyypbcki().b[1][1]++, new Date()));
  const startDate =
  /* istanbul ignore next */
  (cov_1mgyypbcki().s[8]++, start ?
  /* istanbul ignore next */
  (cov_1mgyypbcki().b[2][0]++, new Date(start)) :
  /* istanbul ignore next */
  (cov_1mgyypbcki().b[2][1]++, new Date(new Date(endDate).setMonth(endDate.getMonth() - 3))));
  /* istanbul ignore next */
  cov_1mgyypbcki().s[9]++;
  return {
    startDate,
    endDate
  };
}
/* istanbul ignore next */
cov_1mgyypbcki().s[10]++;
exports.getDefaultDates = getDefaultDates;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW1neXlwYmNraSIsImFjdHVhbENvdmVyYWdlIiwicyIsImx1eG9uX2V4dGVuc2lvbnNfMSIsInJlcXVpcmUiLCJnZXRTdGFydEVuZERhdGUiLCJlbmREYXRlIiwiaG91cnMiLCJiIiwiZiIsImVuZE1vbWVudCIsIkRhdGVUaW1lIiwiZnJvbUpTRGF0ZSIsInN0YXJ0TW9tZW50IiwibWludXMiLCJ0b1N0cmluZyIsImV4cG9ydHMiLCJnZXREZWZhdWx0RGF0ZXMiLCJzdGFydCIsImVuZCIsIkRhdGUiLCJzdGFydERhdGUiLCJzZXRNb250aCIsImdldE1vbnRoIl0sInNvdXJjZXMiOlsiL2hvbWUvdXNlci9jbGltYm94L3BhY2thZ2VzL2FwaS9zcmMvdXRpbHMvZGF0ZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICcuLi9sdXhvbi1leHRlbnNpb25zJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFydEVuZERhdGUoZW5kRGF0ZTogRGF0ZSwgaG91cnM6IG51bWJlciA9IDI0KSB7XHJcbiAgY29uc3QgZW5kTW9tZW50ID0gRGF0ZVRpbWUuZnJvbUpTRGF0ZShlbmREYXRlKTtcclxuICBjb25zdCBzdGFydE1vbWVudCA9IGVuZE1vbWVudC5taW51cyh7IGhvdXJzIH0pO1xyXG4gIHJldHVybiBbc3RhcnRNb21lbnQudG9TdHJpbmcoKSwgZW5kTW9tZW50LnRvU3RyaW5nKCldO1xyXG59XHJcblxyXG4vLyBVdGlsIGZ1bmN0aW9uIHRvIGdldCB0aGUgW3N0YXJ0RGF0ZSwgZW5kRGF0ZV0gdGltZSBpbnRlcnZhbCBmb3IgdGltZSBzZXJpZXMgZGF0YS5cclxuLy8gSWYgbm8gdmFsdWUgZm9yIGVuZERhdGUgaXMgcGFzc2VkLCB0aGVuIHdlIGRlZmluZSBlbmREYXRlIGFzIFwibm93XCIuXHJcbi8vIElmIG5vIHZhbHVlIGZvciBzdGFydERhdGUgaXMgcGFzc2VkLCB0aGVuIHdlIGRlZmluZSBzdGFydERhdGUgYXMgdGhyZWUgbW9udGhzIGJlZm9yZSB0aGUgZW5kRGF0ZS5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHREYXRlcyhzdGFydD86IHN0cmluZywgZW5kPzogc3RyaW5nKSB7XHJcbiAgY29uc3QgZW5kRGF0ZSA9IGVuZCA/IG5ldyBEYXRlKGVuZCkgOiBuZXcgRGF0ZSgpO1xyXG4gIGNvbnN0IHN0YXJ0RGF0ZSA9IHN0YXJ0XHJcbiAgICA/IG5ldyBEYXRlKHN0YXJ0KVxyXG4gICAgOiBuZXcgRGF0ZShuZXcgRGF0ZShlbmREYXRlKS5zZXRNb250aChlbmREYXRlLmdldE1vbnRoKCkgLSAzKSk7XHJcblxyXG4gIHJldHVybiB7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSB9O1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBYVE7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7Ozs7QUFiUixNQUFBQyxrQkFBQTtBQUFBO0FBQUEsQ0FBQUgsY0FBQSxHQUFBRSxDQUFBLE9BQUFFLE9BQUE7QUFFQSxTQUFnQkMsZUFBZUEsQ0FBQ0MsT0FBYSxFQUFFQyxLQUFBO0FBQUE7QUFBQSxDQUFBUCxjQUFBLEdBQUFRLENBQUEsVUFBZ0IsRUFBRTtFQUFBO0VBQUFSLGNBQUEsR0FBQVMsQ0FBQTtFQUMvRCxNQUFNQyxTQUFTO0VBQUE7RUFBQSxDQUFBVixjQUFBLEdBQUFFLENBQUEsT0FBR0Msa0JBQUEsQ0FBQVEsUUFBUSxDQUFDQyxVQUFVLENBQUNOLE9BQU8sQ0FBQztFQUM5QyxNQUFNTyxXQUFXO0VBQUE7RUFBQSxDQUFBYixjQUFBLEdBQUFFLENBQUEsT0FBR1EsU0FBUyxDQUFDSSxLQUFLLENBQUM7SUFBRVA7RUFBSyxDQUFFLENBQUM7RUFBQztFQUFBUCxjQUFBLEdBQUFFLENBQUE7RUFDL0MsT0FBTyxDQUFDVyxXQUFXLENBQUNFLFFBQVEsRUFBRSxFQUFFTCxTQUFTLENBQUNLLFFBQVEsRUFBRSxDQUFDO0FBQ3ZEO0FBQUM7QUFBQWYsY0FBQSxHQUFBRSxDQUFBO0FBSkRjLE9BQUEsQ0FBQVgsZUFBQSxHQUFBQSxlQUFBO0FBTUE7QUFDQTtBQUNBO0FBQ0EsU0FBZ0JZLGVBQWVBLENBQUNDLEtBQWMsRUFBRUMsR0FBWTtFQUFBO0VBQUFuQixjQUFBLEdBQUFTLENBQUE7RUFDMUQsTUFBTUgsT0FBTztFQUFBO0VBQUEsQ0FBQU4sY0FBQSxHQUFBRSxDQUFBLE9BQUdpQixHQUFHO0VBQUE7RUFBQSxDQUFBbkIsY0FBQSxHQUFBUSxDQUFBLFVBQUcsSUFBSVksSUFBSSxDQUFDRCxHQUFHLENBQUM7RUFBQTtFQUFBLENBQUFuQixjQUFBLEdBQUFRLENBQUEsVUFBRyxJQUFJWSxJQUFJLEVBQUU7RUFDaEQsTUFBTUMsU0FBUztFQUFBO0VBQUEsQ0FBQXJCLGNBQUEsR0FBQUUsQ0FBQSxPQUFHZ0IsS0FBSztFQUFBO0VBQUEsQ0FBQWxCLGNBQUEsR0FBQVEsQ0FBQSxVQUNuQixJQUFJWSxJQUFJLENBQUNGLEtBQUssQ0FBQztFQUFBO0VBQUEsQ0FBQWxCLGNBQUEsR0FBQVEsQ0FBQSxVQUNmLElBQUlZLElBQUksQ0FBQyxJQUFJQSxJQUFJLENBQUNkLE9BQU8sQ0FBQyxDQUFDZ0IsUUFBUSxDQUFDaEIsT0FBTyxDQUFDaUIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFBQztFQUFBdkIsY0FBQSxHQUFBRSxDQUFBO0VBRWpFLE9BQU87SUFBRW1CLFNBQVM7SUFBRWY7RUFBTyxDQUFFO0FBQy9CO0FBQUM7QUFBQU4sY0FBQSxHQUFBRSxDQUFBO0FBUERjLE9BQUEsQ0FBQUMsZUFBQSxHQUFBQSxlQUFBIn0=