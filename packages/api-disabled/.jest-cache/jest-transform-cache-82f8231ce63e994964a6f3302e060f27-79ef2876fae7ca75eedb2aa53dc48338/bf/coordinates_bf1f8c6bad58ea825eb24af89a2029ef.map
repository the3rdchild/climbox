{"version":3,"names":["cov_2ohivl22ru","actualCoverage","s","pointToIndex","long","lat","boundingBox","width","height","f","minLong","minLat","maxLong","maxLat","geoWidth","Math","abs","geoHeight","tempLong","b","tempLat","indexLong","round","indexLat","exports","pointToPixel","pixelX","pixelY","createPoint","longitude","latitude","numberOfDecimals","precision","pow","type","coordinates","Number","EPSILON"],"sources":["/home/user/climbox/packages/api/src/utils/coordinates.ts"],"sourcesContent":["import { Point } from 'geojson';\r\n\r\nexport type Extent = [number, number, number, number];\r\n\r\nexport function pointToIndex(\r\n  long: number,\r\n  lat: number,\r\n  boundingBox: Extent,\r\n  width: number,\r\n  height: number,\r\n) {\r\n  const [minLong, minLat, maxLong, maxLat] = boundingBox;\r\n\r\n  const geoWidth = Math.abs(maxLong - minLong);\r\n  const geoHeight = Math.abs(maxLat - minLat);\r\n\r\n  // Normalize longitude and latitude depending on the boundingBox convention\r\n  const tempLong =\r\n    minLong >= 0\r\n      ? (((long % 360) + 540) % 360) - 180\r\n      : ((long + 180) % 360) - 180;\r\n\r\n  const tempLat =\r\n    minLat >= 0 ? (((lat % 180) + 270) % 180) - 90 : ((lat + 90) % 180) - 90;\r\n\r\n  const indexLong = Math.round(\r\n    (Math.abs(tempLong - minLong) / geoWidth) * width,\r\n  );\r\n  const indexLat = Math.round(\r\n    (Math.abs(tempLat - minLat) / geoHeight) * height,\r\n  );\r\n\r\n  return { indexLong, indexLat };\r\n}\r\n\r\nexport function pointToPixel(\r\n  long: number,\r\n  lat: number,\r\n  boundingBox: Extent,\r\n  width: number,\r\n  height: number,\r\n) {\r\n  const { indexLong, indexLat } = pointToIndex(\r\n    long,\r\n    lat,\r\n    boundingBox,\r\n    width,\r\n    height,\r\n  );\r\n\r\n  // Pixel (0, 0) is the top left corner.\r\n  const pixelX = indexLong;\r\n  const pixelY = height - indexLat;\r\n\r\n  return { pixelX, pixelY };\r\n}\r\n\r\nexport const createPoint = (\r\n  longitude: number,\r\n  latitude: number,\r\n  numberOfDecimals: number = 5,\r\n): Point => {\r\n  const precision = 10 ** numberOfDecimals;\r\n  return {\r\n    type: 'Point',\r\n    coordinates: [\r\n      Math.round((longitude + Number.EPSILON) * precision) / precision,\r\n      Math.round((latitude + Number.EPSILON) * precision) / precision,\r\n    ],\r\n  };\r\n};\r\n"],"mappings":"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"}