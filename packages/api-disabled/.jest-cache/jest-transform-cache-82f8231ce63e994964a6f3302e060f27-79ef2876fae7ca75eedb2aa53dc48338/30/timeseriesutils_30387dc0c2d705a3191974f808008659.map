{"version":3,"names":["typeorm_1","cov_120xggxifv","s","require","source_type_enum_1","dates_1","groupByMetricAndSource","data","f","groupedByMetricMap","Map","forEach","x","item","get","metric","undefined","b","set","entries","Array","from","groupedByPointTypeDepth","map","key","val","groupByMap","groupByKey","surveyPointId","source","depth","values","formatted","raw","omittedBy","surveyPointName","rest","__rest","Error","type","surveyPoint","id","name","Object","fromEntries","exports","getAvailableMetricsQuery","timeSeriesRepository","siteId","start","startDate","end","endDate","metrics","sql","surveyPointConditionSql","params","surveyPointConditionParams","query","createQueryBuilder","select","addSelect","distinct","innerJoin","assign","leftJoin","withStartDate","andWhere","withEndDate","withMetrics","length","getRawMany","getAvailableDataDates","getRawOne","getDataQuery","hourly","csv","order","getDefaultDates","groupBy","orderBy","getDataRangeQuery","surveyPointCondition","getNOAASource","site","sourcesRepository","__awaiter","findOne","where","SourceType","NOAA","IsNull","relations","then","save","getSources","sites","sourceRepository","sensorId","SPOTTER","insertSiteDataToTimeSeries","NOAASource","insert","dataPoint","onConflict","execute","getRandomID","Math","random","toString","substring","refreshMaterializedView","repository","console","time","timeEnd"],"sources":["/home/user/climbox/packages/api/src/utils/time-series.utils.ts"],"sourcesContent":["import { IsNull, Repository } from 'typeorm';\r\nimport { Site } from '../sites/sites.entity';\r\nimport { SourceType } from '../sites/schemas/source-type.enum';\r\nimport { Sources } from '../sites/sources.entity';\r\nimport { TimeSeriesValueDto } from '../time-series/dto/time-series-value.dto';\r\nimport { TimeSeries } from '../time-series/time-series.entity';\r\nimport { getDefaultDates } from './dates';\r\nimport { Metric } from '../time-series/metrics.enum';\r\n\r\ninterface TimeSeriesGroupable {\r\n  metric: Metric;\r\n  source: SourceType;\r\n  depth: number | null;\r\n  surveyPointId?: number;\r\n  surveyPointName?: string;\r\n}\r\n\r\nexport type TimeSeriesData = TimeSeriesGroupable & {\r\n  value: number;\r\n  timestamp: Date;\r\n};\r\n\r\nexport type TimeSeriesRange = TimeSeriesGroupable & {\r\n  maxDate: Date;\r\n  minDate: Date;\r\n};\r\n\r\ninterface SurveyPoint {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\ntype TimeSeriesResponse<T> = Partial<\r\n  Record<\r\n    Metric,\r\n    { type: SourceType; depth: number; surveyPoint?: SurveyPoint; data: T[] }[]\r\n  >\r\n>;\r\n\r\n// TODO: Revisit the response structure and simplify when we have more metrics and sources available\r\nexport const groupByMetricAndSource = <T extends TimeSeriesGroupable>(\r\n  data: T[],\r\n): TimeSeriesResponse<\r\n  Omit<T, 'metric' | 'source' | 'surveyPointId' | 'surveyPointName' | 'depth'>\r\n> => {\r\n  const groupedByMetricMap = new Map<Metric, T[]>();\r\n  data.forEach((x) => {\r\n    const item = groupedByMetricMap.get(x.metric);\r\n    if (item !== undefined) {\r\n      groupedByMetricMap.set(x.metric, [...item, x]);\r\n    } else {\r\n      groupedByMetricMap.set(x.metric, [x]);\r\n    }\r\n  });\r\n\r\n  const entries = Array.from(groupedByMetricMap.entries());\r\n\r\n  const groupedByPointTypeDepth = entries.map(([key, val]) => {\r\n    const groupByMap = new Map<string, T[]>();\r\n    val.forEach((x) => {\r\n      const groupByKey = `${x.surveyPointId}_${x.source}_${x.depth}`;\r\n      const item = groupByMap.get(groupByKey);\r\n      if (item !== undefined) {\r\n        groupByMap.set(groupByKey, [...item, x]);\r\n      } else {\r\n        groupByMap.set(groupByKey, [x]);\r\n      }\r\n    });\r\n\r\n    const values = Array.from(groupByMap.values());\r\n    const formatted = values.map((raw) => {\r\n      const omittedBy = raw.map((x) => {\r\n        const {\r\n          metric,\r\n          source,\r\n          surveyPointId,\r\n          surveyPointName,\r\n          depth,\r\n          ...rest\r\n        } = x;\r\n        return rest;\r\n      });\r\n\r\n      // all items should have the same source, pointId and depth, since we grouped them\r\n      const item = raw[0];\r\n\r\n      // this should never happen\r\n      if (!item) throw new Error('Empty set of (source, pointId, depth)');\r\n\r\n      return {\r\n        type: item.source,\r\n        depth: item.depth,\r\n        surveyPoint: { id: item.surveyPointId, name: item.surveyPointName },\r\n        data: omittedBy,\r\n      };\r\n    });\r\n\r\n    return [key, formatted];\r\n  });\r\n\r\n  return Object.fromEntries(groupedByPointTypeDepth);\r\n};\r\n\r\nexport const getAvailableMetricsQuery = ({\r\n  timeSeriesRepository,\r\n  siteId,\r\n  start: startDate,\r\n  end: endDate,\r\n  surveyPointId,\r\n  metrics,\r\n}: {\r\n  timeSeriesRepository: Repository<TimeSeries>;\r\n  siteId: number;\r\n  start?: string;\r\n  end?: string;\r\n  surveyPointId?: number;\r\n  metrics: Metric[];\r\n}) => {\r\n  const { sql: surveyPointConditionSql, params: surveyPointConditionParams } =\r\n    surveyPointId\r\n      ? {\r\n          sql: 'AND (source.survey_point_id = :surveyPointId OR source.survey_point_id IS NULL)',\r\n          params: { surveyPointId },\r\n        }\r\n      : { sql: '', params: {} };\r\n\r\n  const query = timeSeriesRepository\r\n    .createQueryBuilder('time_series')\r\n    .select('metric')\r\n    .addSelect('source.type', 'source')\r\n    .addSelect('source.depth', 'depth')\r\n    .distinct(true)\r\n    .innerJoin(\r\n      'time_series.source',\r\n      'source',\r\n      `source.site_id = :siteId ${surveyPointConditionSql}`,\r\n      { siteId, ...surveyPointConditionParams },\r\n    )\r\n    .leftJoin('source.surveyPoint', 'surveyPoint');\r\n\r\n  const withStartDate = startDate\r\n    ? query.andWhere('timestamp >= :startDate', { startDate })\r\n    : query;\r\n\r\n  const withEndDate = endDate\r\n    ? withStartDate.andWhere('timestamp <= :endDate', { endDate })\r\n    : withStartDate;\r\n\r\n  const withMetrics =\r\n    metrics.length > 0\r\n      ? withEndDate.andWhere('metric IN (:...metrics)', { metrics })\r\n      : withEndDate;\r\n\r\n  return withMetrics.getRawMany();\r\n};\r\n\r\nexport const getAvailableDataDates = ({\r\n  timeSeriesRepository,\r\n  siteId,\r\n  surveyPointId,\r\n  metrics,\r\n}: {\r\n  timeSeriesRepository: Repository<TimeSeries>;\r\n  siteId: number;\r\n  surveyPointId?: number;\r\n  metrics: Metric[];\r\n}): Promise<{ min: Date; max: Date } | undefined> => {\r\n  const { sql: surveyPointConditionSql, params: surveyPointConditionParams } =\r\n    surveyPointId\r\n      ? {\r\n          sql: 'AND (source.survey_point_id = :surveyPointId OR source.survey_point_id IS NULL)',\r\n          params: { surveyPointId },\r\n        }\r\n      : { sql: '', params: {} };\r\n\r\n  const query = timeSeriesRepository\r\n    .createQueryBuilder('time_series')\r\n    .select('min(\"timestamp\")')\r\n    .addSelect('max(\"timestamp\")')\r\n    .innerJoin(\r\n      'time_series.source',\r\n      'source',\r\n      `source.site_id = :siteId ${surveyPointConditionSql}`,\r\n      { siteId, ...surveyPointConditionParams },\r\n    )\r\n    .leftJoin('source.surveyPoint', 'surveyPoint');\r\n\r\n  const withMetrics =\r\n    metrics.length > 0\r\n      ? query.andWhere('metric IN (:...metrics)', {\r\n          metrics,\r\n        })\r\n      : query;\r\n\r\n  return withMetrics.getRawOne();\r\n};\r\n\r\ninterface GetDataQueryParams {\r\n  timeSeriesRepository: Repository<TimeSeries>;\r\n  siteId: number;\r\n  metrics: Metric[];\r\n  start?: string;\r\n  end?: string;\r\n  hourly?: boolean;\r\n  surveyPointId?: number;\r\n  csv?: boolean;\r\n  order?: 'ASC' | 'DESC';\r\n}\r\n\r\nexport const getDataQuery = ({\r\n  timeSeriesRepository,\r\n  siteId,\r\n  metrics,\r\n  start,\r\n  end,\r\n  hourly,\r\n  surveyPointId,\r\n  csv = false,\r\n  order = 'ASC',\r\n}: GetDataQueryParams): Promise<TimeSeriesData[]> => {\r\n  const { endDate, startDate } = csv\r\n    ? { startDate: start, endDate: end }\r\n    : getDefaultDates(start, end);\r\n\r\n  const { sql: surveyPointConditionSql, params: surveyPointConditionParams } =\r\n    surveyPointId\r\n      ? {\r\n          sql: 'AND (source.survey_point_id = :surveyPointId OR source.survey_point_id IS NULL)',\r\n          params: { surveyPointId },\r\n        }\r\n      : { sql: '', params: {} };\r\n\r\n  const query = timeSeriesRepository\r\n    .createQueryBuilder('time_series')\r\n    .select(hourly ? 'avg(value)' : 'value', 'value')\r\n    .addSelect('metric')\r\n    .addSelect('source.type', 'source')\r\n    .addSelect(\r\n      hourly ? \"date_trunc('hour', timestamp)\" : 'timestamp',\r\n      'timestamp',\r\n    )\r\n    .addSelect('source.depth', 'depth')\r\n    .innerJoin(\r\n      'time_series.source',\r\n      'source',\r\n      `source.site_id = :siteId ${surveyPointConditionSql}`,\r\n      { siteId, ...surveyPointConditionParams },\r\n    )\r\n    .leftJoin('source.surveyPoint', 'surveyPoint')\r\n    .addSelect('surveyPoint.id', 'surveyPointId')\r\n    .addSelect('surveyPoint.name', 'surveyPointName');\r\n\r\n  const withStartDate = startDate\r\n    ? query.andWhere('timestamp >= :startDate', { startDate })\r\n    : query;\r\n\r\n  const withEndDate = endDate\r\n    ? withStartDate.andWhere('timestamp <= :endDate', { endDate })\r\n    : withStartDate;\r\n\r\n  const withMetrics =\r\n    metrics.length > 0\r\n      ? withEndDate.andWhere('metric IN (:...metrics)', { metrics })\r\n      : withEndDate;\r\n\r\n  return hourly\r\n    ? withMetrics\r\n        .groupBy(\r\n          \"date_trunc('hour', timestamp), metric, source.type, surveyPoint.id, source.depth\",\r\n        )\r\n        .orderBy(\"date_trunc('hour', timestamp)\", order)\r\n        .getRawMany()\r\n    : withMetrics.orderBy('timestamp', order).getRawMany();\r\n};\r\n\r\nexport const getDataRangeQuery = (\r\n  timeSeriesRepository: Repository<TimeSeries>,\r\n  siteId: number,\r\n  surveyPointId?: number,\r\n): Promise<TimeSeriesRange[]> => {\r\n  const surveyPointCondition = surveyPointId\r\n    ? `(source.survey_point_id = ${surveyPointId} OR source.survey_point_id is NULL)`\r\n    : '1=1';\r\n\r\n  return timeSeriesRepository\r\n    .createQueryBuilder('time_series')\r\n    .select('metric')\r\n    .addSelect('source.type', 'source')\r\n    .addSelect('source.depth', 'depth')\r\n    .addSelect('MIN(timestamp)', 'minDate')\r\n    .addSelect('MAX(timestamp)', 'maxDate')\r\n    .innerJoin(\r\n      'time_series.source',\r\n      'source',\r\n      `source.site_id = :siteId AND ${surveyPointCondition}`,\r\n      { siteId },\r\n    )\r\n    .leftJoin('source.surveyPoint', 'surveyPoint')\r\n    .addSelect('surveyPoint.id', 'surveyPointId')\r\n    .addSelect('surveyPoint.name', 'surveyPointName')\r\n    .groupBy('metric, source.type, surveyPoint.id, source.depth')\r\n    .orderBy('MAX(timestamp)', 'ASC')\r\n    .getRawMany();\r\n};\r\n\r\n/**\r\n * Fetch existing NOAA sources based on the sites.\r\n * If the source does not exists create it.\r\n * @param site The site entity\r\n * @param sourcesRepository The repository needed to make the query\r\n * @returns The source found or created\r\n */\r\nexport const getNOAASource = async (\r\n  site: Site,\r\n  sourcesRepository: Repository<Sources>,\r\n) => {\r\n  return sourcesRepository\r\n    .findOne({\r\n      where: {\r\n        site: { id: site.id },\r\n        type: SourceType.NOAA,\r\n        surveyPoint: IsNull(),\r\n      },\r\n      relations: ['site', 'site.historicalMonthlyMean'],\r\n    })\r\n    .then((source) => {\r\n      // If source exists return it\r\n      if (source) {\r\n        return source;\r\n      }\r\n\r\n      // Else create it and return the created entity\r\n      return sourcesRepository.save({\r\n        site,\r\n        type: SourceType.NOAA,\r\n      });\r\n    });\r\n};\r\n\r\n/**\r\n * Fetches the spotter sources based on the site.\r\n * If no such source exists, it creates it\r\n * @param sites The selected site\r\n * @param type The SourceType\r\n * @param sourceRepository The necessary repository to perform the query\r\n * @returns The requested source entity\r\n */\r\nexport const getSources = (\r\n  sites: Site[],\r\n  type: SourceType,\r\n  sourceRepository: Repository<Sources>,\r\n) => {\r\n  return sites.map((site) =>\r\n    sourceRepository\r\n      .findOne({\r\n        relations: ['site'],\r\n        where: {\r\n          site: { id: site.id },\r\n          surveyPoint: IsNull(),\r\n          type,\r\n          sensorId:\r\n            type === SourceType.SPOTTER && site.sensorId !== null\r\n              ? site.sensorId\r\n              : IsNull(),\r\n        },\r\n      })\r\n      .then((source) => {\r\n        // If the source exists return it\r\n        if (source) {\r\n          return source;\r\n        }\r\n\r\n        // Else create it and return the created entity\r\n        return sourceRepository.save({\r\n          site,\r\n          type,\r\n          sensorId: type === SourceType.SPOTTER ? site.sensorId : undefined,\r\n        });\r\n      }),\r\n  );\r\n};\r\n\r\nexport const insertSiteDataToTimeSeries = (\r\n  data: TimeSeriesValueDto[],\r\n  metric: Metric,\r\n  NOAASource: Sources,\r\n  timeSeriesRepository: Repository<TimeSeries>,\r\n) => {\r\n  if (data.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return timeSeriesRepository\r\n    .createQueryBuilder('time_series')\r\n    .insert()\r\n    .values(\r\n      data.map((dataPoint) => ({\r\n        ...dataPoint,\r\n        source: NOAASource,\r\n        metric,\r\n      })),\r\n    )\r\n    .onConflict('ON CONSTRAINT \"no_duplicate_data\" DO NOTHING')\r\n    .execute();\r\n};\r\n\r\nexport const getRandomID = (length = 7) =>\r\n  (Math.random() + 1).toString(36).substring(length);\r\n\r\nexport const refreshMaterializedView = async (repository: Repository<any>) => {\r\n  const id = getRandomID();\r\n  // eslint-disable-next-line no-console\r\n  console.time(`Refresh Materialized View ${id}`);\r\n  await repository.query('REFRESH MATERIALIZED VIEW latest_data');\r\n  // eslint-disable-next-line no-console\r\n  console.timeEnd(`Refresh Materialized View ${id}`);\r\n};\r\n"],"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"}