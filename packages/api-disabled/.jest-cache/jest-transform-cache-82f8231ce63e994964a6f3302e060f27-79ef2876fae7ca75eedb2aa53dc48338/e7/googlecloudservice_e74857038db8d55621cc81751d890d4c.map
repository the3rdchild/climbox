{"version":3,"names":["common_1","cov_11qazr04pj","s","require","typeorm_1","storage_1","typeorm_2","path_1","__importDefault","file_decorator_1","data_uploads_entity_1","google_cloud_utils_1","survey_media_entity_1","GoogleCloudService","constructor","surveyMediaRepository","dataUploadsRepository","f","logger","Logger","GCS_BUCKET","process","env","STORAGE_FOLDER","GCS_KEYFILE","GCS_PROJECT","storage","Storage","keyFilename","projectId","retryOptions","autoRetry","maxRetries","getDestination","filePath","type","dir","prefix","b","error","InternalServerErrorException","folder","basename","default","getRandomName","uploadFileAsync","dest","uploadFile","uploadFileSync","destination","response","bucket","upload","public","gzip","publicUrl","name","uploadBuffer","buffer","uploadBufferToDestination","file","bufferData","Buffer","isBuffer","from","save","findDanglingFiles","surveyMedia","find","select","dataUploads","originalMediaSet","Set","map","media","getSurveyMediaFileFromURL","url","thumbnailMediaSet","thumbnailUrl","dataUploadsSet","x","fileLocation","mediaFileResponse","getFiles","GoogleCloudDir","SURVEYS","dataUploadsFileResponse","DATA_UPLOADS","mediaFiltered","filter","has","dataUploadsFiltered","deleteDanglingFiles","danglingFiles","actions","deleteFile","catch","log","Promise","all","delete","__decorate","Injectable","__param","InjectRepository","SurveyMedia","DataUploads","Repository","exports"],"sources":["/home/user/climbox/packages/api/src/google-cloud/google-cloud.service.ts"],"sourcesContent":["import {\r\n  Injectable,\r\n  InternalServerErrorException,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Storage } from '@google-cloud/storage';\r\nimport { Repository } from 'typeorm';\r\nimport path from 'path';\r\nimport { getRandomName } from '../uploads/file.decorator';\r\nimport { DataUploads } from '../data-uploads/data-uploads.entity';\r\nimport {\r\n  getSurveyMediaFileFromURL,\r\n  GoogleCloudDir,\r\n} from '../utils/google-cloud.utils';\r\nimport { SurveyMedia } from '../surveys/survey-media.entity';\r\n\r\n@Injectable()\r\nexport class GoogleCloudService {\r\n  private logger = new Logger('GCS');\r\n  private storage: Storage;\r\n\r\n  private readonly GCS_BUCKET = process.env.GCS_BUCKET;\r\n  private readonly STORAGE_FOLDER = process.env.STORAGE_FOLDER;\r\n  private readonly GCS_KEYFILE = process.env.GCS_KEYFILE;\r\n  private readonly GCS_PROJECT = process.env.GCS_PROJECT;\r\n\r\n  constructor(\r\n    @InjectRepository(SurveyMedia)\r\n    private surveyMediaRepository?: Repository<SurveyMedia>,\r\n\r\n    @InjectRepository(DataUploads)\r\n    private dataUploadsRepository?: Repository<DataUploads>,\r\n  ) {\r\n    this.storage = new Storage({\r\n      keyFilename: this.GCS_KEYFILE,\r\n      projectId: this.GCS_PROJECT,\r\n      retryOptions: { autoRetry: true, maxRetries: 3 },\r\n    });\r\n  }\r\n\r\n  private getDestination(\r\n    filePath: string,\r\n    type: string,\r\n    dir: string,\r\n    prefix: string,\r\n  ): string {\r\n    if (!this.STORAGE_FOLDER) {\r\n      this.logger.error('STORAGE_FOLDER variable has not been initialized');\r\n      throw new InternalServerErrorException();\r\n    }\r\n    const folder = `${this.STORAGE_FOLDER}/${dir}/`;\r\n    const basename = path.basename(filePath);\r\n    return getRandomName(folder, prefix, basename, type);\r\n  }\r\n\r\n  public uploadFileAsync(\r\n    filePath: string,\r\n    type: string,\r\n    dir: string = 'surveys',\r\n    prefix: string = 'site_hobo_image',\r\n  ): string {\r\n    const dest = this.getDestination(filePath, type, dir, prefix);\r\n    this.uploadFile(filePath, dest);\r\n    return dest;\r\n  }\r\n\r\n  public async uploadFileSync(\r\n    filePath: string,\r\n    type: string,\r\n    dir: string = 'surveys',\r\n    prefix: string = 'site_hobo_image',\r\n  ): Promise<string> {\r\n    const destination = this.getDestination(filePath, type, dir, prefix);\r\n    return this.uploadFile(filePath, destination);\r\n  }\r\n\r\n  private async uploadFile(\r\n    filePath: string,\r\n    destination: string,\r\n  ): Promise<string> {\r\n    if (!this.GCS_BUCKET) {\r\n      this.logger.error('GCS_BUCKET variable has not been initialized');\r\n      throw new InternalServerErrorException();\r\n    }\r\n    const response = await this.storage\r\n      .bucket(this.GCS_BUCKET)\r\n      .upload(filePath, {\r\n        destination,\r\n        public: true,\r\n        gzip: true,\r\n      });\r\n\r\n    const publicUrl = response[0].name;\r\n\r\n    return `https://storage.googleapis.com/${this.GCS_BUCKET}/${publicUrl}`;\r\n  }\r\n\r\n  public uploadBuffer(\r\n    buffer: Buffer | Uint8Array,\r\n    filePath: string,\r\n    type: string,\r\n    dir: string,\r\n    prefix: string,\r\n  ) {\r\n    const dest = this.getDestination(filePath, type, dir, prefix);\r\n    return this.uploadBufferToDestination(buffer, dest);\r\n  }\r\n\r\n  public async uploadBufferToDestination(\r\n    buffer: Buffer | Uint8Array,\r\n    destination: string,\r\n    bucket = this.GCS_BUCKET,\r\n  ) {\r\n    if (!bucket) {\r\n      this.logger.error('GCS_BUCKET variable has not been initialized');\r\n      throw new InternalServerErrorException();\r\n    }\r\n    const file = this.storage.bucket(bucket).file(destination);\r\n    try {\r\n      const bufferData = Buffer.isBuffer(buffer) ? buffer : Buffer.from(buffer);\r\n      await file.save(bufferData, { public: true, gzip: true });\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n      throw new InternalServerErrorException();\r\n    }\r\n    return `https://storage.googleapis.com/${bucket}/${destination}`;\r\n  }\r\n\r\n  public async findDanglingFiles(): Promise<string[]> {\r\n    if (!this.GCS_BUCKET || !this.STORAGE_FOLDER) {\r\n      this.logger.error(\r\n        'GCS_BUCKET or STORAGE_FOLDER variable has not been initialized',\r\n      );\r\n      throw new InternalServerErrorException();\r\n    }\r\n\r\n    if (!this.surveyMediaRepository || !this.dataUploadsRepository) {\r\n      throw new InternalServerErrorException();\r\n    }\r\n\r\n    const surveyMedia = await this.surveyMediaRepository.find({\r\n      select: ['url', 'thumbnailUrl'],\r\n    });\r\n\r\n    const dataUploads = await this.dataUploadsRepository.find({\r\n      select: ['fileLocation'],\r\n    });\r\n\r\n    const originalMediaSet = new Set(\r\n      surveyMedia.map((media) => getSurveyMediaFileFromURL(media.url)),\r\n    );\r\n\r\n    const thumbnailMediaSet = new Set(\r\n      surveyMedia.map((media) =>\r\n        getSurveyMediaFileFromURL(media.thumbnailUrl || ''),\r\n      ),\r\n    );\r\n\r\n    const dataUploadsSet = new Set(dataUploads.map((x) => x.fileLocation));\r\n\r\n    const [mediaFileResponse] = await this.storage\r\n      .bucket(this.GCS_BUCKET)\r\n      .getFiles({ prefix: `${this.STORAGE_FOLDER}/${GoogleCloudDir.SURVEYS}` });\r\n\r\n    const [dataUploadsFileResponse] = await this.storage\r\n      .bucket(this.GCS_BUCKET)\r\n      .getFiles({\r\n        prefix: `${this.STORAGE_FOLDER}/${GoogleCloudDir.DATA_UPLOADS}`,\r\n      });\r\n\r\n    const mediaFiltered = mediaFileResponse\r\n      .filter((f) => !originalMediaSet.has(f.name))\r\n      .filter((f) => !thumbnailMediaSet.has(f.name))\r\n      .map((f) => f.name);\r\n\r\n    const dataUploadsFiltered = dataUploadsFileResponse\r\n      .filter((f) => !dataUploadsSet.has(f.name))\r\n      .map((f) => f.name);\r\n\r\n    return [...mediaFiltered, ...dataUploadsFiltered];\r\n  }\r\n\r\n  public async deleteDanglingFiles(): Promise<void[]> {\r\n    const danglingFiles = await this.findDanglingFiles();\r\n\r\n    const actions = danglingFiles.map((file) => {\r\n      return this.deleteFile(file).catch(() => {\r\n        this.logger.log(`Could not delete media ${file}.`);\r\n      });\r\n    });\r\n\r\n    return Promise.all(actions);\r\n  }\r\n\r\n  public async deleteFile(file: string) {\r\n    if (!this.GCS_BUCKET) {\r\n      this.logger.error('GCS_BUCKET variable has not been initialized');\r\n      throw new InternalServerErrorException();\r\n    }\r\n\r\n    try {\r\n      await this.storage.bucket(this.GCS_BUCKET).file(file).delete();\r\n    } catch (error) {\r\n      this.logger.error(\r\n        `Failed to delete the file ${file}: `,\r\n        error as string | undefined,\r\n      );\r\n      throw new InternalServerErrorException();\r\n    }\r\n  }\r\n}\r\n"],"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"}