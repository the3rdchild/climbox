c721bf51905055013f6ba049038f8d9f
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const temperature_1 = require("./temperature");
// Mock functions
function getSeaSurfaceTemperatures(siteID) {
    return Array.from(Array(siteID), (_, index) => index);
}
function getMaximumMonthlyMean(siteID) {
    return 27.5 + siteID;
}
test('Not enough SST.', () => {
    const seaSurfaceTemperatures = getSeaSurfaceTemperatures(1);
    const maximumMonthlyMean = getMaximumMonthlyMean(1);
    return expect(() => {
        (0, temperature_1.calculateDegreeHeatingDays)(seaSurfaceTemperatures, maximumMonthlyMean);
    }).toThrow(Error);
});
test('Undefined maximumMonthlyMean', () => {
    const seaSurfaceTemperatures = getSeaSurfaceTemperatures(84);
    return expect(() => {
        (0, temperature_1.calculateDegreeHeatingDays)(seaSurfaceTemperatures, null);
    }).toThrow(Error);
});
test('Calculates data as expected.', () => {
    const seaSurfaceTemperatures = getSeaSurfaceTemperatures(84);
    const maximumMonthlyMean = getMaximumMonthlyMean(1);
    const DHD = (0, temperature_1.calculateDegreeHeatingDays)(seaSurfaceTemperatures, maximumMonthlyMean);
    expect(DHD).toBe(1512);
});
test('Get MMM as expected.', () => __awaiter(void 0, void 0, void 0, function* () {
    jest.setTimeout(60000);
    yield (0, temperature_1.getMMM)(0, 0).then((data) => expect(data).toEqual(28.95));
    yield (0, temperature_1.getMMM)(-89.9, -10).then((data) => expect(data).toEqual(26.55));
    yield (0, temperature_1.getMMM)(-108.0, -53.1).then((data) => expect(data).toEqual(7.94));
}));
test('Get HistoricalMonthlyMeans as expected.', () => __awaiter(void 0, void 0, void 0, function* () {
    jest.setTimeout(60000);
    yield (0, temperature_1.getHistoricalMonthlyMeans)(0, 0).then((data) => expect(data).toEqual([
        { month: 1, temperature: 27.65 },
        { month: 2, temperature: 28.24 },
        { month: 3, temperature: 28.68 },
        { month: 4, temperature: 28.95 },
        { month: 5, temperature: 28.06 },
        { month: 6, temperature: 25.83 },
        { month: 7, temperature: 25.06 },
        { month: 8, temperature: 24.82 },
        { month: 9, temperature: 25.44 },
        { month: 10, temperature: 26.25 },
        { month: 11, temperature: 26.7 },
        { month: 12, temperature: 27.03 },
    ]));
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdXNlci9jbGltYm94L3BhY2thZ2VzL2FwaS9zcmMvdXRpbHMvdGVtcGVyYXR1cmUudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLCtDQUl1QjtBQUV2QixpQkFBaUI7QUFDakIsU0FBUyx5QkFBeUIsQ0FBQyxNQUFjO0lBQy9DLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxNQUFjO0lBQzNDLE9BQU8sSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUN2QixDQUFDO0FBRUQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMzQixNQUFNLHNCQUFzQixHQUFHLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsT0FBTyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ2pCLElBQUEsd0NBQTBCLEVBQUMsc0JBQXNCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUN6RSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO0lBQ3hDLE1BQU0sc0JBQXNCLEdBQUcseUJBQXlCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0QsT0FBTyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ2pCLElBQUEsd0NBQTBCLEVBQUMsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUN4QyxNQUFNLHNCQUFzQixHQUFHLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxHQUFHLEdBQUcsSUFBQSx3Q0FBMEIsRUFDcEMsc0JBQXNCLEVBQ3RCLGtCQUFrQixDQUNuQixDQUFDO0lBQ0YsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFTLEVBQUU7SUFDdEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixNQUFNLElBQUEsb0JBQU0sRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDL0QsTUFBTSxJQUFBLG9CQUFNLEVBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNyRSxNQUFNLElBQUEsb0JBQU0sRUFBQyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMseUNBQXlDLEVBQUUsR0FBUyxFQUFFO0lBQ3pELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsTUFBTSxJQUFBLHVDQUF5QixFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ25CLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1FBQ2pDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO1FBQ2hDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO0tBQ2xDLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFBLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS91c2VyL2NsaW1ib3gvcGFja2FnZXMvYXBpL3NyYy91dGlscy90ZW1wZXJhdHVyZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgY2FsY3VsYXRlRGVncmVlSGVhdGluZ0RheXMsXHJcbiAgZ2V0TU1NLFxyXG4gIGdldEhpc3RvcmljYWxNb250aGx5TWVhbnMsXHJcbn0gZnJvbSAnLi90ZW1wZXJhdHVyZSc7XHJcblxyXG4vLyBNb2NrIGZ1bmN0aW9uc1xyXG5mdW5jdGlvbiBnZXRTZWFTdXJmYWNlVGVtcGVyYXR1cmVzKHNpdGVJRDogbnVtYmVyKSB7XHJcbiAgcmV0dXJuIEFycmF5LmZyb20oQXJyYXkoc2l0ZUlEKSwgKF8sIGluZGV4KSA9PiBpbmRleCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE1heGltdW1Nb250aGx5TWVhbihzaXRlSUQ6IG51bWJlcikge1xyXG4gIHJldHVybiAyNy41ICsgc2l0ZUlEO1xyXG59XHJcblxyXG50ZXN0KCdOb3QgZW5vdWdoIFNTVC4nLCAoKSA9PiB7XHJcbiAgY29uc3Qgc2VhU3VyZmFjZVRlbXBlcmF0dXJlcyA9IGdldFNlYVN1cmZhY2VUZW1wZXJhdHVyZXMoMSk7XHJcbiAgY29uc3QgbWF4aW11bU1vbnRobHlNZWFuID0gZ2V0TWF4aW11bU1vbnRobHlNZWFuKDEpO1xyXG4gIHJldHVybiBleHBlY3QoKCkgPT4ge1xyXG4gICAgY2FsY3VsYXRlRGVncmVlSGVhdGluZ0RheXMoc2VhU3VyZmFjZVRlbXBlcmF0dXJlcywgbWF4aW11bU1vbnRobHlNZWFuKTtcclxuICB9KS50b1Rocm93KEVycm9yKTtcclxufSk7XHJcblxyXG50ZXN0KCdVbmRlZmluZWQgbWF4aW11bU1vbnRobHlNZWFuJywgKCkgPT4ge1xyXG4gIGNvbnN0IHNlYVN1cmZhY2VUZW1wZXJhdHVyZXMgPSBnZXRTZWFTdXJmYWNlVGVtcGVyYXR1cmVzKDg0KTtcclxuICByZXR1cm4gZXhwZWN0KCgpID0+IHtcclxuICAgIGNhbGN1bGF0ZURlZ3JlZUhlYXRpbmdEYXlzKHNlYVN1cmZhY2VUZW1wZXJhdHVyZXMsIG51bGwpO1xyXG4gIH0pLnRvVGhyb3coRXJyb3IpO1xyXG59KTtcclxuXHJcbnRlc3QoJ0NhbGN1bGF0ZXMgZGF0YSBhcyBleHBlY3RlZC4nLCAoKSA9PiB7XHJcbiAgY29uc3Qgc2VhU3VyZmFjZVRlbXBlcmF0dXJlcyA9IGdldFNlYVN1cmZhY2VUZW1wZXJhdHVyZXMoODQpO1xyXG4gIGNvbnN0IG1heGltdW1Nb250aGx5TWVhbiA9IGdldE1heGltdW1Nb250aGx5TWVhbigxKTtcclxuICBjb25zdCBESEQgPSBjYWxjdWxhdGVEZWdyZWVIZWF0aW5nRGF5cyhcclxuICAgIHNlYVN1cmZhY2VUZW1wZXJhdHVyZXMsXHJcbiAgICBtYXhpbXVtTW9udGhseU1lYW4sXHJcbiAgKTtcclxuICBleHBlY3QoREhEKS50b0JlKDE1MTIpO1xyXG59KTtcclxuXHJcbnRlc3QoJ0dldCBNTU0gYXMgZXhwZWN0ZWQuJywgYXN5bmMgKCkgPT4ge1xyXG4gIGplc3Quc2V0VGltZW91dCg2MDAwMCk7XHJcbiAgYXdhaXQgZ2V0TU1NKDAsIDApLnRoZW4oKGRhdGEpID0+IGV4cGVjdChkYXRhKS50b0VxdWFsKDI4Ljk1KSk7XHJcbiAgYXdhaXQgZ2V0TU1NKC04OS45LCAtMTApLnRoZW4oKGRhdGEpID0+IGV4cGVjdChkYXRhKS50b0VxdWFsKDI2LjU1KSk7XHJcbiAgYXdhaXQgZ2V0TU1NKC0xMDguMCwgLTUzLjEpLnRoZW4oKGRhdGEpID0+IGV4cGVjdChkYXRhKS50b0VxdWFsKDcuOTQpKTtcclxufSk7XHJcblxyXG50ZXN0KCdHZXQgSGlzdG9yaWNhbE1vbnRobHlNZWFucyBhcyBleHBlY3RlZC4nLCBhc3luYyAoKSA9PiB7XHJcbiAgamVzdC5zZXRUaW1lb3V0KDYwMDAwKTtcclxuICBhd2FpdCBnZXRIaXN0b3JpY2FsTW9udGhseU1lYW5zKDAsIDApLnRoZW4oKGRhdGEpID0+XHJcbiAgICBleHBlY3QoZGF0YSkudG9FcXVhbChbXHJcbiAgICAgIHsgbW9udGg6IDEsIHRlbXBlcmF0dXJlOiAyNy42NSB9LFxyXG4gICAgICB7IG1vbnRoOiAyLCB0ZW1wZXJhdHVyZTogMjguMjQgfSxcclxuICAgICAgeyBtb250aDogMywgdGVtcGVyYXR1cmU6IDI4LjY4IH0sXHJcbiAgICAgIHsgbW9udGg6IDQsIHRlbXBlcmF0dXJlOiAyOC45NSB9LFxyXG4gICAgICB7IG1vbnRoOiA1LCB0ZW1wZXJhdHVyZTogMjguMDYgfSxcclxuICAgICAgeyBtb250aDogNiwgdGVtcGVyYXR1cmU6IDI1LjgzIH0sXHJcbiAgICAgIHsgbW9udGg6IDcsIHRlbXBlcmF0dXJlOiAyNS4wNiB9LFxyXG4gICAgICB7IG1vbnRoOiA4LCB0ZW1wZXJhdHVyZTogMjQuODIgfSxcclxuICAgICAgeyBtb250aDogOSwgdGVtcGVyYXR1cmU6IDI1LjQ0IH0sXHJcbiAgICAgIHsgbW9udGg6IDEwLCB0ZW1wZXJhdHVyZTogMjYuMjUgfSxcclxuICAgICAgeyBtb250aDogMTEsIHRlbXBlcmF0dXJlOiAyNi43IH0sXHJcbiAgICAgIHsgbW9udGg6IDEyLCB0ZW1wZXJhdHVyZTogMjcuMDMgfSxcclxuICAgIF0pLFxyXG4gICk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=